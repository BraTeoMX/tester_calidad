{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "IgcAvatarComponent",
          "declaration": {
            "name": "default",
            "module": "./components/avatar/avatar.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcAccordionComponent",
          "declaration": {
            "name": "default",
            "module": "./components/accordion/accordion.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcBadgeComponent",
          "declaration": {
            "name": "default",
            "module": "./components/badge/badge.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcBannerComponent",
          "declaration": {
            "name": "default",
            "module": "./components/banner/banner.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcButtonComponent",
          "declaration": {
            "name": "default",
            "module": "./components/button/button.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcButtonGroupComponent",
          "declaration": {
            "name": "default",
            "module": "./components/button-group/button-group.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCalendarComponent",
          "declaration": {
            "name": "default",
            "module": "./components/calendar/calendar.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCardComponent",
          "declaration": {
            "name": "default",
            "module": "./components/card/card.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCardActionsComponent",
          "declaration": {
            "name": "default",
            "module": "./components/card/card.actions.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCardContentComponent",
          "declaration": {
            "name": "default",
            "module": "./components/card/card.content.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCardHeaderComponent",
          "declaration": {
            "name": "default",
            "module": "./components/card/card.header.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCardMediaComponent",
          "declaration": {
            "name": "default",
            "module": "./components/card/card.media.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCheckboxComponent",
          "declaration": {
            "name": "default",
            "module": "./components/checkbox/checkbox.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCircularProgressComponent",
          "declaration": {
            "name": "default",
            "module": "./components/progress/circular-progress.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCircularGradientComponent",
          "declaration": {
            "name": "default",
            "module": "./components/progress/circular-gradient.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcChipComponent",
          "declaration": {
            "name": "default",
            "module": "./components/chip/chip.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcComboComponent",
          "declaration": {
            "name": "default",
            "module": "./components/combo/combo.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDatePickerComponent",
          "declaration": {
            "name": "default",
            "module": "./components/date-picker/date-picker.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDateTimeInputComponent",
          "declaration": {
            "name": "default",
            "module": "./components/date-time-input/date-time-input.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDialogComponent",
          "declaration": {
            "name": "default",
            "module": "./components/dialog/dialog.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDividerComponent",
          "declaration": {
            "name": "default",
            "module": "./components/divider/divider.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDropdownComponent",
          "declaration": {
            "name": "default",
            "module": "./components/dropdown/dropdown.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDropdownGroupComponent",
          "declaration": {
            "name": "default",
            "module": "./components/dropdown/dropdown-group.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDropdownHeaderComponent",
          "declaration": {
            "name": "default",
            "module": "./components/dropdown/dropdown-header.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDropdownItemComponent",
          "declaration": {
            "name": "default",
            "module": "./components/dropdown/dropdown-item.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSelectComponent",
          "declaration": {
            "name": "default",
            "module": "./components/select/select.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSelectGroupComponent",
          "declaration": {
            "name": "default",
            "module": "./components/select/select-group.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSelectHeaderComponent",
          "declaration": {
            "name": "default",
            "module": "./components/select/select-header.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSelectItemComponent",
          "declaration": {
            "name": "default",
            "module": "./components/select/select-item.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcExpansionPanelComponent",
          "declaration": {
            "name": "default",
            "module": "./components/expansion-panel/expansion-panel.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcIconComponent",
          "declaration": {
            "name": "default",
            "module": "./components/icon/icon.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcIconButtonComponent",
          "declaration": {
            "name": "default",
            "module": "./components/button/icon-button.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcInputComponent",
          "declaration": {
            "name": "default",
            "module": "./components/input/input.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcFormComponent",
          "declaration": {
            "name": "default",
            "module": "./components/form/form.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcLinearProgressComponent",
          "declaration": {
            "name": "default",
            "module": "./components/progress/linear-progress.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcListComponent",
          "declaration": {
            "name": "default",
            "module": "./components/list/list.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcListHeaderComponent",
          "declaration": {
            "name": "default",
            "module": "./components/list/list-header.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcListItemComponent",
          "declaration": {
            "name": "default",
            "module": "./components/list/list-item.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcMaskInputComponent",
          "declaration": {
            "name": "default",
            "module": "./components/mask-input/mask-input.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcNavDrawerComponent",
          "declaration": {
            "name": "default",
            "module": "./components/nav-drawer/nav-drawer.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcNavDrawerHeaderItemComponent",
          "declaration": {
            "name": "default",
            "module": "./components/nav-drawer/nav-drawer-header-item.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcNavDrawerItemComponent",
          "declaration": {
            "name": "default",
            "module": "./components/nav-drawer/nav-drawer-item.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcNavbarComponent",
          "declaration": {
            "name": "default",
            "module": "./components/navbar/navbar.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRadioGroupComponent",
          "declaration": {
            "name": "default",
            "module": "./components/radio-group/radio-group.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRadioComponent",
          "declaration": {
            "name": "default",
            "module": "./components/radio/radio.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRatingComponent",
          "declaration": {
            "name": "default",
            "module": "./components/rating/rating.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRatingSymbolComponent",
          "declaration": {
            "name": "default",
            "module": "./components/rating/rating-symbol.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRippleComponent",
          "declaration": {
            "name": "default",
            "module": "./components/ripple/ripple.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRangeSliderComponent",
          "declaration": {
            "name": "default",
            "module": "./components/slider/range-slider.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSnackbarComponent",
          "declaration": {
            "name": "default",
            "module": "./components/snackbar/snackbar.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSliderComponent",
          "declaration": {
            "name": "default",
            "module": "./components/slider/slider.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSliderLabelComponent",
          "declaration": {
            "name": "default",
            "module": "./components/slider/slider-label.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTabsComponent",
          "declaration": {
            "name": "default",
            "module": "./components/tabs/tabs.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTabComponent",
          "declaration": {
            "name": "default",
            "module": "./components/tabs/tab.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTabPanelComponent",
          "declaration": {
            "name": "default",
            "module": "./components/tabs/tab-panel.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcToastComponent",
          "declaration": {
            "name": "default",
            "module": "./components/toast/toast.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcToggleButtonComponent",
          "declaration": {
            "name": "default",
            "module": "./components/button-group/toggle-button.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSwitchComponent",
          "declaration": {
            "name": "default",
            "module": "./components/checkbox/switch.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTextareaComponent",
          "declaration": {
            "name": "default",
            "module": "./components/textarea/textarea.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTreeComponent",
          "declaration": {
            "name": "default",
            "module": "./components/tree/tree.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTreeItemComponent",
          "declaration": {
            "name": "default",
            "module": "./components/tree/tree-item.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcStepperComponent",
          "declaration": {
            "name": "default",
            "module": "./components/stepper/stepper.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcStepComponent",
          "declaration": {
            "name": "default",
            "module": "./components/stepper/step.js"
          }
        },
        {
          "kind": "js",
          "name": "defineComponents",
          "declaration": {
            "name": "defineComponents",
            "module": "./components/common/definitions/defineComponents.js"
          }
        },
        {
          "kind": "js",
          "name": "defineAllComponents",
          "declaration": {
            "name": "defineAllComponents",
            "module": "./components/common/definitions/defineAllComponents.js"
          }
        },
        {
          "kind": "js",
          "name": "registerIcon",
          "declaration": {
            "name": "registerIcon",
            "module": "./components/icon/icon.registry.js"
          }
        },
        {
          "kind": "js",
          "name": "registerIconFromText",
          "declaration": {
            "name": "registerIconFromText",
            "module": "./components/icon/icon.registry.js"
          }
        },
        {
          "kind": "js",
          "name": "configureTheme",
          "declaration": {
            "name": "configureTheme",
            "module": "./theming/config.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCalendarResourceStringEN",
          "declaration": {
            "name": "IgcCalendarResourceStringEN",
            "module": "./components/common/i18n/calendar.resources.js"
          }
        },
        {
          "kind": "js",
          "name": "DateRangeDescriptor",
          "declaration": {
            "name": "DateRangeDescriptor",
            "module": "./components/calendar/common/calendar.model.js"
          }
        },
        {
          "kind": "js",
          "name": "DateRangeType",
          "declaration": {
            "name": "DateRangeType",
            "module": "./components/calendar/common/calendar.model.js"
          }
        },
        {
          "kind": "js",
          "name": "DatePart",
          "declaration": {
            "name": "DatePart",
            "module": "./components/date-time-input/date-util.js"
          }
        },
        {
          "kind": "js",
          "name": "DatePartDeltas",
          "declaration": {
            "name": "DatePartDeltas",
            "module": "./components/date-time-input/date-util.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRangeSliderValue",
          "declaration": {
            "name": "IgcRangeSliderValue",
            "module": "./components/slider/range-slider.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcActiveStepChangingArgs",
          "declaration": {
            "name": "IgcActiveStepChangingArgs",
            "module": "./components/stepper/stepper.common.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcActiveStepChangedArgs",
          "declaration": {
            "name": "IgcActiveStepChangedArgs",
            "module": "./components/stepper/stepper.common.js"
          }
        },
        {
          "kind": "js",
          "name": "ComboItemTemplate",
          "declaration": {
            "name": "ComboItemTemplate",
            "module": "./components/combo/types.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcComboChangeEventArgs",
          "declaration": {
            "name": "IgcComboChangeEventArgs",
            "module": "./components/combo/types.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/animations/easings.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "EaseIn",
          "declaration": {
            "name": "EaseIn",
            "module": "src/animations/easings.ts"
          }
        },
        {
          "kind": "js",
          "name": "EaseOut",
          "declaration": {
            "name": "EaseOut",
            "module": "src/animations/easings.ts"
          }
        },
        {
          "kind": "js",
          "name": "EaseInOut",
          "declaration": {
            "name": "EaseInOut",
            "module": "src/animations/easings.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/animations/player.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "addAnimationController",
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost & HTMLElement"
              }
            },
            {
              "name": "target",
              "optional": true,
              "type": {
                "text": "Ref<HTMLElement> | HTMLElement"
              }
            }
          ],
          "description": "Creates and attaches an animation player instance to the passed in `host` element.\nThe player will run animations on the passed in `target`, or if `target` is undefined,\nthe host element itself."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addAnimationController",
          "declaration": {
            "name": "addAnimationController",
            "module": "src/animations/player.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/animations/types.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "animation",
          "return": {
            "type": {
              "text": "AnimationReferenceMetadata"
            }
          },
          "parameters": [
            {
              "name": "steps",
              "type": {
                "text": "Keyframe[]"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "KeyframeAnimationOptions"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "animation",
          "declaration": {
            "name": "animation",
            "module": "src/animations/types.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/theming/config.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getTheme"
        },
        {
          "kind": "function",
          "name": "setTheme",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "Theme"
              }
            },
            {
              "name": "variant",
              "type": {
                "text": "ThemeVariant"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "configureTheme",
          "parameters": [
            {
              "name": "t",
              "type": {
                "text": "Theme"
              }
            },
            {
              "name": "v",
              "default": "'light'",
              "type": {
                "text": "ThemeVariant"
              }
            }
          ],
          "description": "Allows the global configuration of the active theme.\n\nUsage:\n ```ts\n import { configureTheme } from 'igniteui-webcomponents';\n\n configureTheme('material', 'light');\n ```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getTheme",
          "declaration": {
            "name": "getTheme",
            "module": "src/theming/config.ts"
          }
        },
        {
          "kind": "js",
          "name": "setTheme",
          "declaration": {
            "name": "setTheme",
            "module": "src/theming/config.ts"
          }
        },
        {
          "kind": "js",
          "name": "configureTheme",
          "declaration": {
            "name": "configureTheme",
            "module": "src/theming/config.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/theming/theming-controller.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "updateWhenThemeChanges",
          "type": {
            "text": "typeof _updateWhenThemeChanges & {\n  _THEMING_CONTROLLER_FN_?: never;\n}"
          },
          "default": "_updateWhenThemeChanges"
        },
        {
          "kind": "variable",
          "name": "themeSymbol"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "updateWhenThemeChanges",
          "declaration": {
            "name": "updateWhenThemeChanges",
            "module": "src/theming/theming-controller.ts"
          }
        },
        {
          "kind": "js",
          "name": "themeSymbol",
          "declaration": {
            "name": "themeSymbol",
            "module": "src/theming/theming-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/theming/theming-decorator.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "themes",
          "parameters": [
            {
              "name": "themes",
              "type": {
                "text": "Themes"
              }
            },
            {
              "name": "exposeTheme",
              "default": "false"
            }
          ],
          "description": "Class decorator to enable multiple theme support for a component.\nThe component will re-render on theme changes.\n\nSee also updateWhenThemeChanges for the same functionality\nwithout the use of this decorator.\n\nUsage:\n ```ts\n import { LitElement, html } from 'lit';\n import { themes } from 'igniteui-webcomponents/themes';\n import { styles } from './themes/my-element.base.css';\n import { styles as material } from './themes/my-element.material.css';\n import { styles as bootstrap } from './themes/my-element.bootstrap.css';\n import { styles as indigo } from './themes/my-element.indigo.css';"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "themes",
          "declaration": {
            "name": "themes",
            "module": "src/theming/theming-decorator.ts"
          }
        },
        {
          "kind": "js",
          "name": "themeSymbol",
          "declaration": {
            "name": "themeSymbol",
            "module": "./theming-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/theming/theming-event.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CHANGE_THEME_EVENT",
          "type": {
            "text": "string"
          },
          "default": "'igc-change-theme'"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CHANGE_THEME_EVENT",
          "declaration": {
            "name": "CHANGE_THEME_EVENT",
            "module": "src/theming/theming-event.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/theming/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/theming/utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getAllCSSVariables",
          "return": {
            "type": {
              "text": "Record<string, string>"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getAllCSSVariables",
          "declaration": {
            "name": "getAllCSSVariables",
            "module": "src/theming/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/accordion/accordion.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The Accordion is a container-based component that can house multiple expansion panels\nand offers keyboard navigation.",
          "name": "IgcAccordionComponent",
          "slots": [
            {
              "description": "Renders the expansion panels inside default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-accordion'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "enabledPanels",
              "type": {
                "text": "Array<IgcExpansionPanelComponent>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "firstEnabled",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "lastEnabled",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "singleExpand",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Allows only one panel to be expanded at a time.",
              "attribute": "single-expand",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "panels",
              "type": {
                "text": "Array<IgcExpansionPanelComponent>"
              },
              "privacy": "public",
              "description": "Returns all of the accordions's direct igc-expansion-panel children."
            },
            {
              "kind": "method",
              "name": "skipKeybinding",
              "privacy": "private",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navigatePrev",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navigateNext",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "collapseAll",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "expandAll",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePanelOpening",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getNextPanel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "IgcExpansionPanelComponent"
                  }
                },
                {
                  "name": "dir",
                  "default": "1",
                  "type": {
                    "text": "1 | -1"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getPanelHeader",
              "privacy": "private",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "IgcExpansionPanelComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "closePanel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "IgcExpansionPanelComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "openPanel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "IgcExpansionPanelComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hideAll",
              "privacy": "public",
              "description": "Hides all of the child expansion panels' contents."
            },
            {
              "kind": "method",
              "name": "showAll",
              "privacy": "public",
              "description": "Shows all of the child expansion panels' contents."
            }
          ],
          "attributes": [
            {
              "name": "single-expand",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows only one panel to be expanded at a time.",
              "fieldName": "singleExpand",
              "attribute": "single-expand"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-accordion",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcAccordionComponent",
            "module": "src/components/accordion/accordion.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/avatar/avatar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An avatar component is used as a representation of a user identity\ntypically in a user profile.",
          "name": "IgcAvatarComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the avatar.",
              "name": "base"
            },
            {
              "description": "The initials wrapper of the avatar.",
              "name": "initials"
            },
            {
              "description": "The image wrapper of the avatar.",
              "name": "image"
            },
            {
              "description": "The icon wrapper of the avatar.",
              "name": "icon"
            }
          ],
          "slots": [
            {
              "description": "Renders an icon inside the default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-avatar'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The image source to use.",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "alt",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Alternative text for the image.",
              "attribute": "alt"
            },
            {
              "kind": "field",
              "name": "initials",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Initials to use as a fallback when no image is available.",
              "attribute": "initials"
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "'circle' | 'rounded' | 'square'"
              },
              "privacy": "public",
              "default": "'square'",
              "description": "The shape of the avatar.",
              "attribute": "shape",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "roleDescriptionChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleErrorState",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleError",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'img'"
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "default": "'avatar'"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "default": "'small'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "The image source to use.",
              "fieldName": "src",
              "attribute": "src"
            },
            {
              "name": "alt",
              "type": {
                "text": "string"
              },
              "description": "Alternative text for the image.",
              "fieldName": "alt",
              "attribute": "alt"
            },
            {
              "name": "initials",
              "type": {
                "text": "string"
              },
              "description": "Initials to use as a fallback when no image is available.",
              "fieldName": "initials",
              "attribute": "initials"
            },
            {
              "name": "shape",
              "type": {
                "text": "'circle' | 'rounded' | 'square'"
              },
              "default": "'square'",
              "description": "The shape of the avatar.",
              "fieldName": "shape",
              "attribute": "shape"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SizableMixin",
              "module": "/src/components/common/mixins/sizable.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-avatar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcAvatarComponent",
            "module": "src/components/avatar/avatar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/badge/badge.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The badge is a component indicating a status on a related item or an area\nwhere some active indication is required.",
          "name": "IgcBadgeComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the badge.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "Default slot for the badge.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-badge'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              },
              "privacy": "public",
              "default": "'primary'",
              "description": "The type of badge.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets whether to draw an outlined version of the badge.",
              "attribute": "outlined",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "'rounded' | 'square'"
              },
              "privacy": "public",
              "default": "'rounded'",
              "description": "The shape of the badge.",
              "attribute": "shape",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "variantChange",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'status'"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              },
              "default": "'primary'",
              "description": "The type of badge.",
              "fieldName": "variant",
              "attribute": "variant"
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets whether to draw an outlined version of the badge.",
              "fieldName": "outlined",
              "attribute": "outlined"
            },
            {
              "name": "shape",
              "type": {
                "text": "'rounded' | 'square'"
              },
              "default": "'rounded'",
              "description": "The shape of the badge.",
              "fieldName": "shape",
              "attribute": "shape"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-badge",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcBadgeComponent",
            "module": "src/components/badge/badge.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/banner/banner.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `igc-banner` component displays important and concise message(s) for a user to address, that is specific to a page or feature.",
          "name": "IgcBannerComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the banner component.",
              "name": "base"
            },
            {
              "description": "The inner wrapper that sets the space around the banner.",
              "name": "spacer"
            },
            {
              "description": "The part that holds the text and the illustration.",
              "name": "message"
            },
            {
              "description": "The part that holds the banner icon/illustration.",
              "name": "illustration"
            },
            {
              "description": "The part that holds the banner text content.",
              "name": "content"
            },
            {
              "description": "The part that holds the banner action buttons.",
              "name": "actions"
            }
          ],
          "slots": [
            {
              "description": "Renders the text content of the banner message.",
              "name": ""
            },
            {
              "description": "Renders additional content at the start of the message block.",
              "name": "prefix"
            },
            {
              "description": "Renders any action elements.",
              "name": "actions"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-banner'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_bannerRef",
              "type": {
                "text": "Ref<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_animationPlayer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the banner is being shown/hidden.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Shows the banner if not already shown. Returns `true` when the animation has completed."
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Hides the banner if not already hidden. Returns `true` when the animation has completed."
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Toggles between shown/hidden state. Returns `true` when the animation has completed."
            },
            {
              "kind": "method",
              "name": "toggleAnimation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "dir",
                  "type": {
                    "text": "'open' | 'close'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'status'"
            },
            {
              "kind": "field",
              "name": "ariaLive",
              "type": {
                "text": "string"
              },
              "default": "'polite'"
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted before closing the banner - when a user interacts (click) with the default action of the banner.",
              "name": "igcClosing"
            },
            {
              "description": "Emitted after the banner is closed - when a user interacts (click) with the default action of the banner.",
              "name": "igcClosed"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the banner is being shown/hidden.",
              "fieldName": "open",
              "attribute": "open"
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-banner",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcBannerComponent",
            "module": "src/components/banner/banner.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button-base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcButtonBaseComponent",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "privacy": "protected",
              "static": true,
              "default": "{\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  }"
            },
            {
              "kind": "field",
              "name": "_kbFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_nativeButton",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "privacy": "public",
              "default": "'button'",
              "description": "The type of the button. Defaults to `button`.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The URL the button points to.",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Prompts to save the linked URL instead of navigating to it.",
              "attribute": "download"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "privacy": "public",
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The relationship of the linked URL.\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types",
              "attribute": "rel"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the component",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus in the button."
            },
            {
              "kind": "method",
              "name": "click",
              "privacy": "public",
              "description": "Simulates a mouse click on the element"
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the button."
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderLinkButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "default": "'medium'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "default": "'button'",
              "description": "The type of the button. Defaults to `button`.",
              "fieldName": "type",
              "attribute": "type"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "The URL the button points to.",
              "fieldName": "href",
              "attribute": "href"
            },
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "Prompts to save the linked URL instead of navigating to it.",
              "fieldName": "download",
              "attribute": "download"
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "fieldName": "target",
              "attribute": "target"
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The relationship of the linked URL.\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types",
              "fieldName": "rel",
              "attribute": "rel"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "The disabled state of the component",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SizableMixin",
              "module": "/src/components/common/mixins/sizable.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common//mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcButtonBaseComponent",
          "declaration": {
            "name": "IgcButtonBaseComponent",
            "module": "src/components/button/button-base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents a clickable button, used to submit forms or anywhere in a\ndocument for accessible, standard button functionality.",
          "name": "IgcButtonComponent",
          "cssParts": [
            {
              "description": "The native button element.",
              "name": "base"
            },
            {
              "description": "The prefix container.",
              "name": "prefix"
            },
            {
              "description": "The suffix container.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "Renders the label of the button.",
              "name": ""
            },
            {
              "description": "Renders content before the label of the button.",
              "name": "prefix"
            },
            {
              "description": "Renders content after the label of the button.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-button'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'flat' | 'contained' | 'outlined' | 'fab'"
              },
              "privacy": "public",
              "default": "'contained'",
              "description": "Sets the variant of the button.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "default": "'medium'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "privacy": "protected",
              "static": true,
              "default": "{\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  }",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_kbFocus",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_nativeButton",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "privacy": "public",
              "default": "'button'",
              "description": "The type of the button. Defaults to `button`.",
              "attribute": "type",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The URL the button points to.",
              "attribute": "href",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Prompts to save the linked URL instead of navigating to it.",
              "attribute": "download",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "privacy": "public",
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "attribute": "target",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The relationship of the linked URL.\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types",
              "attribute": "rel",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the component",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus in the button.",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "click",
              "privacy": "public",
              "description": "Simulates a mouse click on the element",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the button.",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLinkButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the button gains focus.",
              "name": "igcFocus"
            },
            {
              "description": "Emitted when the button loses focus.",
              "name": "igcBlur"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'flat' | 'contained' | 'outlined' | 'fab'"
              },
              "default": "'contained'",
              "description": "Sets the variant of the button.",
              "fieldName": "variant",
              "attribute": "variant"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "default": "'button'",
              "description": "The type of the button. Defaults to `button`.",
              "fieldName": "type",
              "attribute": "type",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "The URL the button points to.",
              "fieldName": "href",
              "attribute": "href",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "Prompts to save the linked URL instead of navigating to it.",
              "fieldName": "download",
              "attribute": "download",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "fieldName": "target",
              "attribute": "target",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The relationship of the linked URL.\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types",
              "fieldName": "rel",
              "attribute": "rel",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "The disabled state of the component",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcButtonBaseComponent",
            "module": "/src/components/button/button-base.js"
          },
          "tagName": "igc-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcButtonComponent",
            "module": "src/components/button/button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/icon-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcIconButtonComponent",
          "cssParts": [
            {
              "description": "The wrapping element.",
              "name": "base"
            },
            {
              "description": "The icon element.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-icon-button'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name of the icon.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "collection",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name of the icon collection.",
              "attribute": "collection"
            },
            {
              "kind": "field",
              "name": "mirrored",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to flip the icon button. Useful for RTL layouts.",
              "attribute": "mirrored"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'flat' | 'contained' | 'outlined'"
              },
              "privacy": "public",
              "default": "'contained'",
              "description": "The visual variant of the icon button.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerIcon",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "url",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "collection",
                  "default": "'default'"
                }
              ]
            },
            {
              "kind": "method",
              "name": "registerIconFromText",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "iconText",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "collection",
                  "default": "'default'"
                }
              ]
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "privacy": "protected",
              "static": true,
              "default": "{\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  }",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_kbFocus",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_nativeButton",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "privacy": "public",
              "default": "'button'",
              "description": "The type of the button. Defaults to `button`.",
              "attribute": "type",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The URL the button points to.",
              "attribute": "href",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Prompts to save the linked URL instead of navigating to it.",
              "attribute": "download",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "privacy": "public",
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "attribute": "target",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The relationship of the linked URL.\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types",
              "attribute": "rel",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the component",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus in the button.",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "click",
              "privacy": "public",
              "description": "Simulates a mouse click on the element",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the button.",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLinkButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the icon.",
              "fieldName": "name",
              "attribute": "name"
            },
            {
              "name": "collection",
              "type": {
                "text": "string"
              },
              "description": "The name of the icon collection.",
              "fieldName": "collection",
              "attribute": "collection"
            },
            {
              "name": "mirrored",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to flip the icon button. Useful for RTL layouts.",
              "fieldName": "mirrored",
              "attribute": "mirrored"
            },
            {
              "name": "variant",
              "type": {
                "text": "'flat' | 'contained' | 'outlined'"
              },
              "default": "'contained'",
              "description": "The visual variant of the icon button.",
              "fieldName": "variant",
              "attribute": "variant"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "default": "'button'",
              "description": "The type of the button. Defaults to `button`.",
              "fieldName": "type",
              "attribute": "type",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "The URL the button points to.",
              "fieldName": "href",
              "attribute": "href",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "Prompts to save the linked URL instead of navigating to it.",
              "fieldName": "download",
              "attribute": "download",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "fieldName": "target",
              "attribute": "target",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The relationship of the linked URL.\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types",
              "fieldName": "rel",
              "attribute": "rel",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "The disabled state of the component",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcButtonBaseComponent",
            "module": "/src/components/button/button-base.js"
          },
          "tagName": "igc-icon-button",
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcIconButtonComponent",
            "module": "src/components/button/icon-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button-group/button-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `igc-button-group` groups a series of `igc-toggle-button`s together, exposing features such as layout and selection.",
          "name": "IgcButtonGroupComponent",
          "cssParts": [
            {
              "description": "The button group container.",
              "name": "group"
            }
          ],
          "slots": [
            {
              "description": "Renders `igc-toggle-button` component.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-button-group'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "isMultiple",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_selectedItems",
              "type": {
                "text": "Set<string>"
              },
              "privacy": "private",
              "default": "new Set()"
            },
            {
              "kind": "method",
              "name": "_observerCallback",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{\n    changes: { added, attributes },\n  }",
                  "type": {
                    "text": "MutationControllerParams<IgcToggleButtonComponent>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_selectedButtons",
              "type": {
                "text": "Array<IgcToggleButtonComponent>"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "toggleButtons",
              "type": {
                "text": "Array<IgcToggleButtonComponent>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Disables all buttons inside the group.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "alignment",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "privacy": "public",
              "default": "'horizontal'",
              "description": "Sets the orientation of the buttons in the group.",
              "attribute": "alignment",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "'single' | 'single-required' | 'multiple'"
              },
              "privacy": "public",
              "default": "'single'",
              "description": "Controls the mode of selection for the button group.",
              "attribute": "selection"
            },
            {
              "kind": "field",
              "name": "selectedItems",
              "type": {
                "text": "string[]"
              },
              "privacy": "public",
              "description": "Gets/Sets the currently selected buttons (their values).",
              "attribute": "selected-items"
            },
            {
              "kind": "method",
              "name": "updateDisabledState",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateSelectionState",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSingleSelection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "button",
                  "type": {
                    "text": "IgcToggleButtonComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMultipleSelection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "button",
                  "type": {
                    "text": "IgcToggleButtonComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitSelectEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "button",
                  "type": {
                    "text": "IgcToggleButtonComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitDeselectEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "button",
                  "type": {
                    "text": "IgcToggleButtonComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSelection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Set<string>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when a button is selected through user interaction.",
              "name": "igcSelect"
            },
            {
              "description": "Emitted when a button is deselected through user interaction.",
              "name": "igcDeselect"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables all buttons inside the group.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "alignment",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "description": "Sets the orientation of the buttons in the group.",
              "fieldName": "alignment",
              "attribute": "alignment"
            },
            {
              "name": "selection",
              "type": {
                "text": "'single' | 'single-required' | 'multiple'"
              },
              "default": "'single'",
              "description": "Controls the mode of selection for the button group.",
              "fieldName": "selection",
              "attribute": "selection"
            },
            {
              "name": "selectedItems",
              "type": {
                "text": "string[]"
              },
              "description": "Gets/Sets the currently selected buttons (their values).",
              "fieldName": "selectedItems"
            },
            {
              "name": "selected-items",
              "type": {
                "text": "string[]"
              },
              "description": "Gets/Sets the currently selected buttons (their values).",
              "attribute": "selectedItems",
              "fieldName": "selectedItems"
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-button-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcButtonGroupComponent",
            "module": "src/components/button-group/button-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button-group/toggle-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `igc-toggle-button` wraps a native button element and exposes additional `value` and `selected` properties.\nIt is used in the context of an `igc-button-group` to facilitate the creation of group/toolbar like UX behaviors.",
          "name": "IgcToggleButtonComponent",
          "cssParts": [
            {
              "description": "The native button element.",
              "name": "toggle"
            }
          ],
          "slots": [
            {
              "description": "the label/content of the button.",
              "name": "Renders"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-toggle-button'"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "privacy": "public",
              "static": true,
              "default": "{\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  }"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_kbFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_nativeButton",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The value attribute of the control.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the button is selected.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the button is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the button."
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the button."
            },
            {
              "kind": "method",
              "name": "click",
              "privacy": "public",
              "description": "Simulates a mouse click on the element."
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value attribute of the control.",
              "fieldName": "value",
              "attribute": "value"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the button is selected.",
              "fieldName": "selected",
              "attribute": "selected"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the button is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-toggle-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcToggleButtonComponent",
            "module": "src/components/button-group/toggle-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/calendar/calendar.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "focusActiveDate"
        },
        {
          "kind": "class",
          "description": "Represents a calendar that lets users\nto select a date value in a variety of different ways.",
          "name": "IgcCalendarComponent",
          "cssParts": [
            {
              "description": "The content container.",
              "name": "content"
            },
            {
              "description": "The days view container.",
              "name": "days-view"
            },
            {
              "description": "The months view container.",
              "name": "months-view"
            },
            {
              "description": "The years view container.",
              "name": "years-view"
            },
            {
              "description": "The header container.",
              "name": "header"
            },
            {
              "description": "The header title container.",
              "name": "header-title"
            },
            {
              "description": "The header date container.",
              "name": "header-date"
            },
            {
              "description": "The navigation container.",
              "name": "navigation"
            },
            {
              "description": "The months navigation container.",
              "name": "months-navigation"
            },
            {
              "description": "The years navigation container.",
              "name": "years-navigation"
            },
            {
              "description": "The years range container.",
              "name": "years-range"
            },
            {
              "description": "The navigation buttons container.",
              "name": "navigation-buttons"
            },
            {
              "description": "The navigation button container.",
              "name": "navigation-button"
            },
            {
              "description": "vertical - The navigation button container when calendar orientation is vertical.",
              "name": "navigation-button"
            },
            {
              "description": "The days view container.",
              "name": "days-view-container"
            }
          ],
          "slots": [
            {
              "description": "The default slot for the calendar.",
              "name": ""
            },
            {
              "description": "Renders the title of the calendar header.",
              "name": "title"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-calendar'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "formatterMonth",
              "type": {
                "text": "Intl.DateTimeFormat"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "formatterWeekday",
              "type": {
                "text": "Intl.DateTimeFormat"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "formatterMonthDay",
              "type": {
                "text": "Intl.DateTimeFormat"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "[themeSymbol]",
              "type": {
                "text": "Theme"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "rangePreviewDate",
              "type": {
                "text": "Date | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "activeDaysViewIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "daysViews",
              "type": {
                "text": "NodeList"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "monthsView",
              "type": {
                "text": "IgcMonthsViewComponent"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "yearsView",
              "type": {
                "text": "IgcYearsViewComponent"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hideOutsideDays",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Controls the visibility of the dates that do not belong to the current month.",
              "attribute": "hide-outside-days"
            },
            {
              "kind": "field",
              "name": "hideHeader",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the calendar hides its header. Even if set to false, the header is not displayed for `multiple` selection.",
              "attribute": "hide-header"
            },
            {
              "kind": "field",
              "name": "headerOrientation",
              "type": {
                "text": "'vertical' | 'horizontal'"
              },
              "privacy": "public",
              "default": "'horizontal'",
              "description": "The orientation of the header.",
              "attribute": "header-orientation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'vertical' | 'horizontal'"
              },
              "privacy": "public",
              "default": "'horizontal'",
              "description": "The orientation of the multiple months displayed in days view.",
              "attribute": "orientation"
            },
            {
              "kind": "field",
              "name": "visibleMonths",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "1",
              "description": "The number of months displayed in days view.",
              "attribute": "visible-months"
            },
            {
              "kind": "field",
              "name": "activeView",
              "type": {
                "text": "'days' | 'months' | 'years'"
              },
              "privacy": "public",
              "default": "'days'",
              "description": "The active view.",
              "attribute": "active-view"
            },
            {
              "kind": "field",
              "name": "formatOptions",
              "type": {
                "text": "Pick<Intl.DateTimeFormatOptions, 'month' | 'weekday'>"
              },
              "privacy": "public",
              "default": "{\n      month: 'long',\n      weekday: 'narrow',\n    }",
              "description": "The options used to format the months and the weekdays in the calendar views."
            },
            {
              "kind": "field",
              "name": "resourceStrings",
              "type": {
                "text": "IgcCalendarResourceStrings"
              },
              "privacy": "public",
              "default": "IgcCalendarResourceStringEN",
              "description": "The resource strings."
            },
            {
              "kind": "method",
              "name": "formattersChange",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "yearPerPage",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "previousButtonLabel",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "nextButtonLabel",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "monthSelectLabel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "activeDate",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "yearSelectLabel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "activeDate",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleKeyDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "[focusActiveDate]",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "initFormatters",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "formattedMonth",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "changeValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<void>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "changeMonth",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<void>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "changeYear",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<void>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "switchToMonths",
              "privacy": "private",
              "parameters": [
                {
                  "name": "daysViewIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "switchToYears",
              "privacy": "private",
              "parameters": [
                {
                  "name": "daysViewIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "activateDaysView",
              "privacy": "private",
              "parameters": [
                {
                  "name": "daysViewIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "activeDateChanged",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<ICalendarDate>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "rangePreviewDateChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<Date>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "nextMonth",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "previousMonth",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "nextYear",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "previousYear",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "nextYearsPage",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "previousYearsPage",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "navigateNext",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "navigatePrevious",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderNavigation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "activeDate",
                  "default": "this.activeDate"
                },
                {
                  "name": "renderButtons",
                  "default": "true"
                },
                {
                  "name": "daysViewIndex",
                  "default": "0"
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderHeaderDate",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "field",
              "name": "_activeDate",
              "privacy": "private",
              "default": "new Date()",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_activeDateSetFlag",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "calendarModel",
              "privacy": "protected",
              "default": "new Calendar()",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "Date | undefined"
              },
              "privacy": "public",
              "description": "The current value of the calendar.\nUsed when selection is set to single.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "values",
              "type": {
                "text": "Date[] | undefined"
              },
              "privacy": "public",
              "description": "The current values of the calendar.\nUsed when selection is set to multiple or range.",
              "attribute": "values",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "'single' | 'multiple' | 'range'"
              },
              "privacy": "public",
              "default": "'single'",
              "description": "Sets the type of date selection.",
              "attribute": "selection",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "showWeekNumbers",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Show/hide the week numbers.",
              "attribute": "show-week-numbers",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "weekStart",
              "type": {
                "text": "| 'sunday'\n    | 'monday'\n    | 'tuesday'\n    | 'wednesday'\n    | 'thursday'\n    | 'friday'\n    | 'saturday'"
              },
              "privacy": "public",
              "default": "'sunday'",
              "description": "Sets the start day of the week.",
              "attribute": "week-start",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeDate",
              "privacy": "public",
              "description": "Sets the date which is shown in view and is highlighted. By default it is the current date.",
              "type": {
                "text": "Date"
              },
              "attribute": "active-date",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "Sets the locale used for formatting and displaying the dates in the calendar.",
              "attribute": "locale",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabledDates",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "public",
              "description": "Gets/sets disabled dates.",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "specialDates",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "public",
              "description": "Gets/sets special dates.",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "weekStartChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectionChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when calendar changes its value.",
              "name": "igcChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "hide-outside-days",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the visibility of the dates that do not belong to the current month.",
              "fieldName": "hideOutsideDays"
            },
            {
              "name": "hide-header",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the calendar hides its header. Even if set to false, the header is not displayed for `multiple` selection.",
              "fieldName": "hideHeader"
            },
            {
              "name": "header-orientation",
              "type": {
                "text": "'vertical' | 'horizontal'"
              },
              "default": "'horizontal'",
              "description": "The orientation of the header.",
              "fieldName": "headerOrientation"
            },
            {
              "name": "orientation",
              "type": {
                "text": "'vertical' | 'horizontal'"
              },
              "default": "'horizontal'",
              "description": "The orientation of the multiple months displayed in days view.",
              "fieldName": "orientation"
            },
            {
              "name": "visible-months",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The number of months displayed in days view.",
              "fieldName": "visibleMonths"
            },
            {
              "name": "active-view",
              "type": {
                "text": "'days' | 'months' | 'years'"
              },
              "default": "'days'",
              "description": "The active view.",
              "fieldName": "activeView"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "Date | undefined"
              },
              "description": "The current value of the calendar.\nUsed when selection is set to single.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "name": "values",
              "type": {
                "text": "Date[] | undefined"
              },
              "description": "The current values of the calendar.\nUsed when selection is set to multiple or range.",
              "fieldName": "values",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "name": "selection",
              "type": {
                "text": "'single' | 'multiple' | 'range'"
              },
              "default": "'single'",
              "description": "Sets the type of date selection.",
              "fieldName": "selection",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "name": "show-week-numbers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show/hide the week numbers.",
              "fieldName": "showWeekNumbers",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "name": "week-start",
              "type": {
                "text": "| 'sunday'\n    | 'monday'\n    | 'tuesday'\n    | 'wednesday'\n    | 'thursday'\n    | 'friday'\n    | 'saturday'"
              },
              "default": "'sunday'",
              "description": "Sets the start day of the week.",
              "fieldName": "weekStart",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "name": "active-date",
              "description": "Sets the date which is shown in view and is highlighted. By default it is the current date.",
              "type": {
                "text": "Date"
              },
              "fieldName": "activeDate",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "Sets the locale used for formatting and displaying the dates in the calendar.",
              "fieldName": "locale",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SizableMixin",
              "module": "/src/components/common/mixins/sizable.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcCalendarBaseComponent",
            "module": "/src/components/calendar/common/calendar-base.js"
          },
          "tagName": "igc-calendar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "focusActiveDate",
          "declaration": {
            "name": "focusActiveDate",
            "module": "src/components/calendar/calendar.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCalendarComponent",
            "module": "src/components/calendar/calendar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.actions.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A container for card action items like buttons",
          "name": "IgcCardActionsComponent",
          "slots": [
            {
              "description": "Renders items at the beginning of actions area",
              "name": "start"
            },
            {
              "description": "Renders items at the middle of actions area",
              "name": ""
            },
            {
              "description": "Renders items at the end of actions area",
              "name": "end"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-card-actions'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'vertical' | 'horizontal'"
              },
              "privacy": "public",
              "default": "'horizontal'",
              "description": "The orientation of the actions.",
              "attribute": "orientation",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "orientation",
              "type": {
                "text": "'vertical' | 'horizontal'"
              },
              "default": "'horizontal'",
              "description": "The orientation of the actions.",
              "fieldName": "orientation",
              "attribute": "orientation"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-card-actions",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCardActionsComponent",
            "module": "src/components/card/card.actions.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.content.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A container for card's text content",
          "name": "IgcCardContentComponent",
          "slots": [
            {
              "description": "Renders the card text content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-card-content'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-card-content",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCardContentComponent",
            "module": "src/components/card/card.content.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A container for card's header",
          "name": "IgcCardHeaderComponent",
          "cssParts": [
            {
              "description": "The card header container",
              "name": "header"
            }
          ],
          "slots": [
            {
              "description": "Renders header media like icon",
              "name": "thumbnail"
            },
            {
              "description": "Renders the card title",
              "name": "title"
            },
            {
              "description": "Renders the card subtitle",
              "name": "subtitle"
            },
            {
              "description": "Renders content next to the card title",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-card-header'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-card-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCardHeaderComponent",
            "module": "src/components/card/card.header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.media.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A container for card's media - could be an image, gif, video",
          "name": "IgcCardMediaComponent",
          "slots": [
            {
              "description": "Renders the card media content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-card-media'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-card-media",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCardMediaComponent",
            "module": "src/components/card/card.media.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A container which wraps different elements related to a single subject",
          "name": "IgcCardComponent",
          "slots": [
            {
              "description": "Renders card content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-card'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "elevated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets card elevated style, otherwise card looks outlined.",
              "attribute": "elevated",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "elevated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets card elevated style, otherwise card looks outlined.",
              "fieldName": "elevated",
              "attribute": "elevated"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCardComponent",
            "module": "src/components/card/card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox-base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcCheckboxBaseComponent",
          "members": [
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[requiredBooleanValidator]",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_kbFocus",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_checked",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "Array<Node>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value attribute of the control.",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "privacy": "public",
              "description": "The checked state of the control.",
              "attribute": "checked",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "labelPosition",
              "type": {
                "text": "'before' | 'after'"
              },
              "privacy": "public",
              "default": "'after'",
              "description": "The label position of the control.",
              "attribute": "label-position",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "click",
              "privacy": "public",
              "description": "Simulates a click on the control."
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control."
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the control."
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "description": "The value attribute of the control.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "checked",
              "description": "The checked state of the control.",
              "fieldName": "checked",
              "attribute": "checked",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "label-position",
              "type": {
                "text": "'before' | 'after'"
              },
              "default": "'after'",
              "description": "The label position of the control.",
              "fieldName": "labelPosition",
              "attribute": "label-position"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "fieldName": "required",
              "attribute": "required",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedRequiredMixin",
              "module": "/src/components/common/mixins/form-associated-required.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcCheckboxBaseComponent",
          "declaration": {
            "name": "IgcCheckboxBaseComponent",
            "module": "src/components/checkbox/checkbox-base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A check box allowing single values to be selected/deselected.",
          "name": "IgcCheckboxComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the checkbox.",
              "name": "base"
            },
            {
              "description": "The checkbox control.",
              "name": "control"
            },
            {
              "description": "The checkbox label.",
              "name": "label"
            },
            {
              "description": "The checkbox icon.",
              "name": "indicator"
            }
          ],
          "slots": [
            {
              "description": "The checkbox label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-checkbox'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "private",
              "default": "`checkbox-${IgcCheckboxComponent.increment()}`"
            },
            {
              "kind": "field",
              "name": "labelId",
              "privacy": "private",
              "default": "`checkbox-label-${this.inputId}`"
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Draws the checkbox in indeterminate state.",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_kbFocus",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_checked",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "Array<Node>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value attribute of the control.",
              "attribute": "value",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "privacy": "public",
              "description": "The checked state of the control.",
              "attribute": "checked",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelPosition",
              "type": {
                "text": "'before' | 'after'"
              },
              "privacy": "public",
              "default": "'after'",
              "description": "The label position of the control.",
              "attribute": "label-position",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "click",
              "privacy": "public",
              "description": "Simulates a click on the control.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the control.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "igcChange"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "igcFocus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "igcBlur"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in indeterminate state.",
              "fieldName": "indeterminate",
              "attribute": "indeterminate"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "fieldName": "required",
              "attribute": "required",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "value",
              "description": "The value attribute of the control.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "checked",
              "description": "The checked state of the control.",
              "fieldName": "checked",
              "attribute": "checked",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "label-position",
              "type": {
                "text": "'before' | 'after'"
              },
              "default": "'after'",
              "description": "The label position of the control.",
              "fieldName": "labelPosition",
              "attribute": "label-position",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcCheckboxBaseComponent",
            "module": "/src/components/checkbox/checkbox-base.js"
          },
          "tagName": "igc-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCheckboxComponent",
            "module": "src/components/checkbox/checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/switch.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Similar to a checkbox, a switch controls the state of a single setting on or off.",
          "name": "IgcSwitchComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the switch.",
              "name": "base"
            },
            {
              "description": "The switch control.",
              "name": "control"
            },
            {
              "description": "The position indicator of the switch.",
              "name": "thumb"
            },
            {
              "description": "The switch label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The switch label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-switch'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "private",
              "default": "`switch-${IgcSwitchComponent.increment()}`"
            },
            {
              "kind": "field",
              "name": "labelId",
              "privacy": "private",
              "default": "`switch-label-${this.inputId}`"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_kbFocus",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_checked",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "Array<Node>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value attribute of the control.",
              "attribute": "value",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "privacy": "public",
              "description": "The checked state of the control.",
              "attribute": "checked",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelPosition",
              "type": {
                "text": "'before' | 'after'"
              },
              "privacy": "public",
              "default": "'after'",
              "description": "The label position of the control.",
              "attribute": "label-position",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "click",
              "privacy": "public",
              "description": "Simulates a click on the control.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the control.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "igcChange"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "igcFocus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "igcBlur"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcCheckboxBaseComponent",
            "module": "/src/components/checkbox/checkbox-base.js"
          },
          "tagName": "igc-switch",
          "customElement": true,
          "attributes": [
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "fieldName": "required",
              "attribute": "required",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "value",
              "description": "The value attribute of the control.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "checked",
              "description": "The checked state of the control.",
              "fieldName": "checked",
              "attribute": "checked",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "label-position",
              "type": {
                "text": "'before' | 'after'"
              },
              "default": "'after'",
              "description": "The label position of the control.",
              "fieldName": "labelPosition",
              "attribute": "label-position",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcSwitchComponent",
            "module": "src/components/checkbox/switch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/chip/chip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Chips help people enter information, make selections, filter content, or trigger actions.",
          "name": "IgcChipComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the chip.",
              "name": "base"
            },
            {
              "description": "The prefix container of the chip.",
              "name": "prefix"
            },
            {
              "description": "The suffix container of the chip.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "Renders the chip data.",
              "name": ""
            },
            {
              "description": "Renders content before the data of the chip.",
              "name": "prefix"
            },
            {
              "description": "Renders content after the data of the chip.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-chip'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_removePartRef",
              "type": {
                "text": "Ref<HTMLSlotElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets the disabled state for the chip.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "removable",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Defines if the chip is removable or not.",
              "attribute": "removable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectable",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Defines if the chip is selectable or not.",
              "attribute": "selectable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Defines if the chip is selected or not.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'primary' | 'success' | 'danger' | 'warning' | 'info'"
              },
              "privacy": "public",
              "description": "A property that sets the color variant of the chip component.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleSelect",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleRemove",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "slotChanges",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "default": "'medium'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emits an event when the chip component is removed. Returns the removed chip component.",
              "name": "igcRemove"
            },
            {
              "description": "Emits event when the chip component is selected/deselected and any related animations and transitions also end.",
              "name": "igcSelect"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the disabled state for the chip.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "removable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the chip is removable or not.",
              "fieldName": "removable",
              "attribute": "removable"
            },
            {
              "name": "selectable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the chip is selectable or not.",
              "fieldName": "selectable",
              "attribute": "selectable"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the chip is selected or not.",
              "fieldName": "selected",
              "attribute": "selected"
            },
            {
              "name": "variant",
              "type": {
                "text": "'primary' | 'success' | 'danger' | 'warning' | 'info'"
              },
              "description": "A property that sets the color variant of the chip component.",
              "fieldName": "variant",
              "attribute": "variant"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SizableMixin",
              "module": "/src/components/common/mixins/sizable.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-chip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcChipComponent",
            "module": "src/components/chip/chip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/combo-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcComboHeaderComponent",
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-combo-header'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcComboHeaderComponent",
            "module": "src/components/combo/combo-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/combo-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcComboItemComponent",
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-combo-item'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "index",
              "type": {
                "text": "number"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the item is selected.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the item is active.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideCheckbox",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the item is active.",
              "attribute": "hide-checkbox"
            },
            {
              "kind": "method",
              "name": "selectedChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderCheckbox",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'option'"
            }
          ],
          "attributes": [
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the item is selected.",
              "fieldName": "selected",
              "attribute": "selected"
            },
            {
              "name": "hide-checkbox",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the item is active.",
              "fieldName": "hideCheckbox",
              "attribute": "hide-checkbox"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the item is active.",
              "fieldName": "active"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcComboItemComponent",
            "module": "src/components/combo/combo-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/combo-list.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcComboListComponent",
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-combo-list'"
            },
            {
              "kind": "field",
              "name": "scroller",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitVirtualizer",
            "package": "@lit-labs/virtualizer/LitVirtualizer.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcComboListComponent",
            "module": "src/components/combo/combo-list.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/combo.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The Combo component is similar to the Select component in that it provides a list of options from which the user can make a selection.\nIn contrast to the Select component, the Combo component displays all options in a virtualized list of items,\nmeaning the combo box can simultaneously show thousands of options, where one or more options can be selected.\nAdditionally, users can create custom item templates, allowing for robust data visualization.\nThe Combo component features case-sensitive filtering, grouping, complex data binding, dynamic addition of values and more.",
          "name": "IgcComboComponent",
          "cssParts": [
            {
              "description": "The encapsulated text label.",
              "name": "label"
            },
            {
              "description": "The main input field.",
              "name": "input"
            },
            {
              "description": "The native input of the main input field.",
              "name": "native-input"
            },
            {
              "description": "The prefix wrapper.",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper.",
              "name": "suffix"
            },
            {
              "description": "The toggle icon wrapper.",
              "name": "toggle-icon"
            },
            {
              "description": "The clear icon wrapper.",
              "name": "clear-icon"
            },
            {
              "description": "The case icon wrapper.",
              "name": "case-icon"
            },
            {
              "description": "The helper text wrapper.",
              "name": "helper-text"
            },
            {
              "description": "The search input field.",
              "name": "search-input"
            },
            {
              "description": "The list of options wrapper.",
              "name": "list-wrapper"
            },
            {
              "description": "The list of options box.",
              "name": "list"
            },
            {
              "description": "Represents each item in the list of options.",
              "name": "item"
            },
            {
              "description": "Represents each header in the list of options.",
              "name": "group-header"
            },
            {
              "description": "Appended to the item parts list when the item is active.",
              "name": "active"
            },
            {
              "description": "Appended to the item parts list when the item is selected.",
              "name": "selected"
            },
            {
              "description": "Represents each checkbox of each list item.",
              "name": "checkbox"
            },
            {
              "description": "Represents the checkbox indicator of each list item.",
              "name": "checkbox-indicator"
            },
            {
              "description": "Appended to checkbox parts list when checkbox is checked.",
              "name": "checked"
            },
            {
              "description": "The container holding the header content.",
              "name": "header"
            },
            {
              "description": "The container holding the footer content.",
              "name": "footer"
            },
            {
              "description": "The container holding the empty content.",
              "name": "empty"
            }
          ],
          "slots": [
            {
              "description": "Renders content before the input.",
              "name": "prefix"
            },
            {
              "description": "Renders content after input.",
              "name": "suffix"
            },
            {
              "description": "Renders a container before the list of options.",
              "name": "header"
            },
            {
              "description": "Renders a container after the list of options.",
              "name": "footer"
            },
            {
              "description": "Renders content below the input.",
              "name": "helper-text"
            },
            {
              "description": "Renders content inside the suffix container.",
              "name": "toggle-icon"
            },
            {
              "description": "Renders content inside the suffix container.",
              "name": "clear-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-combo'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "ComboValue<T>[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_activeDescendant",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_displayValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_filteringOptions",
              "type": {
                "text": "FilteringOptions<T>"
              },
              "privacy": "private",
              "default": "{\n    filterKey: this.displayKey,\n    caseSensitive: false,\n    matchDiacritics: false,\n  }"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[\n    {\n      key: 'valueMissing',\n      message: messages.required,\n      isValid: () =>\n        this.required\n          ? Array.isArray(this.value) && this.value.length > 0\n          : true,\n    },\n  ]",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "navigationController",
              "privacy": "protected",
              "default": "new NavigationController<T>(this)"
            },
            {
              "kind": "field",
              "name": "selectionController",
              "privacy": "protected",
              "default": "new SelectionController<T>(this)"
            },
            {
              "kind": "field",
              "name": "dataController",
              "privacy": "protected",
              "default": "new DataController<T>(this)"
            },
            {
              "kind": "field",
              "name": "[themeSymbol]",
              "type": {
                "text": "Theme"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "inputSuffix",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "inputPrefix",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "IgcInputComponent"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "IgcInputComponent"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "list",
              "type": {
                "text": "IgcComboListComponent"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Array<T>"
              },
              "privacy": "public",
              "default": "[]",
              "description": "The data source used to generate the list of options."
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The outlined attribute of the control.",
              "attribute": "outlined",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "singleSelect",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Enables single selection mode and moves item filtering to the main input.",
              "attribute": "single-select",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The autofocus attribute of the control.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "autofocusList",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Focuses the list of options when the menu opens.",
              "attribute": "autofocus-list"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label attribute of the control.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "placeholderSearch",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'Search'",
              "description": "The placeholder attribute of the search input.",
              "attribute": "placeholder-search"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets the open state of the component.",
              "attribute": "open"
            },
            {
              "kind": "field",
              "name": "valueKey",
              "type": {
                "text": "Keys<T> | undefined"
              },
              "privacy": "public",
              "description": "The key in the data source used when selecting items.",
              "attribute": "value-key"
            },
            {
              "kind": "field",
              "name": "displayKey",
              "type": {
                "text": "Keys<T> | undefined"
              },
              "privacy": "public",
              "description": "The key in the data source used to display items in the list.",
              "attribute": "display-key"
            },
            {
              "kind": "field",
              "name": "groupKey",
              "type": {
                "text": "Keys<T> | undefined"
              },
              "privacy": "public",
              "description": "The key in the data source used to group items in the list.",
              "attribute": "group-key"
            },
            {
              "kind": "field",
              "name": "groupSorting",
              "type": {
                "text": "\"asc\" | \"desc\" | \"none\""
              },
              "privacy": "public",
              "default": "'asc'",
              "description": "Sorts the items in each group by ascending or descending order.",
              "attribute": "group-sorting"
            },
            {
              "kind": "field",
              "name": "filteringOptions",
              "type": {
                "text": "FilteringOptions<T>"
              },
              "privacy": "public",
              "description": "An object that configures the filtering of the combo.",
              "parameters": [
                {
                  "description": "The key in the data source used when filtering the list of options.",
                  "name": "filterKey"
                },
                {
                  "description": "Determines whether the filtering operation should be case sensitive.",
                  "name": "caseSensitive"
                },
                {
                  "description": "-If true, the filter distinguishes between accented letters and their base letters.",
                  "name": "matchDiacritics"
                }
              ],
              "attribute": "filtering-options"
            },
            {
              "kind": "field",
              "name": "caseSensitiveIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Enables the case sensitive search icon in the filtering input.",
              "attribute": "case-sensitive-icon"
            },
            {
              "kind": "field",
              "name": "disableFiltering",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Disables the filtering of the list of options.",
              "attribute": "disable-filtering"
            },
            {
              "kind": "field",
              "name": "itemTemplate",
              "type": {
                "text": "ComboItemTemplate<T>"
              },
              "privacy": "public",
              "description": "The template used for the content of each combo item."
            },
            {
              "kind": "field",
              "name": "groupHeaderTemplate",
              "type": {
                "text": "ComboItemTemplate<T>"
              },
              "privacy": "public",
              "description": "The template used for the content of each combo group header."
            },
            {
              "kind": "field",
              "name": "dataState",
              "type": {
                "text": "Array<ComboRecord<T>>"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "dataChanged",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateDisplayKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateFilterKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "pipeline",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "toggleDirectiveChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateOnDisableFiltering",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_rootClickController",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "resetSearchTerm",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "resetState",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "requiredChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectItems",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "Returns the current selection as a list of comma separated values,\nrepresented by the value key, when provided.",
              "attribute": "value",
              "type": {
                "text": "ComboValue<T>[]"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValue",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the component."
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the component."
            },
            {
              "kind": "method",
              "name": "normalizeSelection",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Item<T>[]"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "default": "[]",
                  "type": {
                    "text": "Item<T> | Item<T>[]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "Array<T>"
              },
              "privacy": "public",
              "description": "Returns the current selection as an array of objects as provided in the `data` source.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "Item<T> | Items<T>"
                  },
                  "description": "One or more items to be selected. Multiple items should be passed as an array.\nWhen valueKey is specified, the corresponding value should be used in place of the item reference."
                }
              ],
              "description": "Selects option(s) in the list by either reference or valueKey.\nIf not argument is provided all items will be selected."
            },
            {
              "kind": "method",
              "name": "deselect",
              "privacy": "public",
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "Item<T> | Items<T>"
                  },
                  "description": "One or more items to be deselected. Multiple items should be passed as an array.\nWhen valueKey is specified, the corresponding value should be used in place of the item reference."
                }
              ],
              "description": "Deselects option(s) in the list by either reference or valueKey.\nIf not argument is provided all items will be deselected."
            },
            {
              "kind": "method",
              "name": "handleMainInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSearchInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOpening",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleClosing",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_show",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emit",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "description": "Shows the list of options."
            },
            {
              "kind": "method",
              "name": "_hide",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emit",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "description": "Hides the list of options."
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "description": "Toggles the list of options."
            },
            {
              "kind": "field",
              "name": "itemRenderer",
              "type": {
                "text": "ComboRenderFunction<T>"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "listKeydownHandler",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "itemClickHandler",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleSelect",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectByIndex",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clearSingleSelection",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleClearIconClick",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMainInputKeydown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSearchInputKeydown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleCaseSensitivity",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "hasPrefixes",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "hasSuffixes",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_stopPropagation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderToggleIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderClearIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderMainInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderSearchInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderEmptyTemplate",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderList",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderHelperText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the select gains focus.",
              "name": "igcFocus"
            },
            {
              "description": "Emitted when the select loses focus.",
              "name": "igcBlur"
            },
            {
              "description": "Emitted when the control's selection has changed.",
              "name": "igcChange"
            },
            {
              "description": "Emitted just before the list of options is opened.",
              "name": "igcOpening"
            },
            {
              "description": "Emitted after the list of options is opened.",
              "name": "igcOpened"
            },
            {
              "description": "Emitter just before the list of options is closed.",
              "name": "igcClosing"
            },
            {
              "description": "Emitted after the list of options is closed.",
              "name": "igcClosed"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The outlined attribute of the control.",
              "fieldName": "outlined",
              "attribute": "outlined"
            },
            {
              "name": "single-select",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables single selection mode and moves item filtering to the main input.",
              "fieldName": "singleSelect",
              "attribute": "single-select"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "The autofocus attribute of the control.",
              "fieldName": "autofocus",
              "attribute": "autofocus"
            },
            {
              "name": "autofocus-list",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Focuses the list of options when the menu opens.",
              "fieldName": "autofocusList",
              "attribute": "autofocus-list"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label attribute of the control.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder"
            },
            {
              "name": "placeholder-search",
              "type": {
                "text": "string"
              },
              "default": "'Search'",
              "description": "The placeholder attribute of the search input.",
              "fieldName": "placeholderSearch",
              "attribute": "placeholder-search"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the open state of the component.",
              "fieldName": "open",
              "attribute": "open"
            },
            {
              "name": "value-key",
              "type": {
                "text": "Keys<T> | undefined"
              },
              "description": "The key in the data source used when selecting items.",
              "fieldName": "valueKey",
              "attribute": "value-key"
            },
            {
              "name": "display-key",
              "type": {
                "text": "Keys<T> | undefined"
              },
              "description": "The key in the data source used to display items in the list.",
              "fieldName": "displayKey",
              "attribute": "display-key"
            },
            {
              "name": "group-key",
              "type": {
                "text": "Keys<T> | undefined"
              },
              "description": "The key in the data source used to group items in the list.",
              "fieldName": "groupKey",
              "attribute": "group-key"
            },
            {
              "name": "group-sorting",
              "type": {
                "text": "\"asc\" | \"desc\" | \"none\""
              },
              "default": "'asc'",
              "description": "Sorts the items in each group by ascending or descending order.",
              "fieldName": "groupSorting",
              "attribute": "group-sorting"
            },
            {
              "name": "filtering-options",
              "type": {
                "text": "FilteringOptions<T>"
              },
              "description": "An object that configures the filtering of the combo.",
              "parameters": [
                {
                  "description": "The key in the data source used when filtering the list of options.",
                  "name": "filterKey"
                },
                {
                  "description": "Determines whether the filtering operation should be case sensitive.",
                  "name": "caseSensitive"
                },
                {
                  "description": "-If true, the filter distinguishes between accented letters and their base letters.",
                  "name": "matchDiacritics"
                }
              ],
              "fieldName": "filteringOptions",
              "attribute": "filtering-options"
            },
            {
              "name": "case-sensitive-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables the case sensitive search icon in the filtering input.",
              "fieldName": "caseSensitiveIcon",
              "attribute": "case-sensitive-icon"
            },
            {
              "name": "disable-filtering",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the filtering of the list of options.",
              "fieldName": "disableFiltering",
              "attribute": "disable-filtering"
            },
            {
              "name": "value",
              "description": "Returns the current selection as a list of comma separated values,\nrepresented by the value key, when provided.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "ComboValue<T>[]"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "fieldName": "required",
              "attribute": "required",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedRequiredMixin",
              "module": "/src/components/common/mixins/form-associated-required.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-combo",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcComboComponent",
            "module": "src/components/combo/combo.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/util.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "partNameMap",
          "parameters": [
            {
              "name": "partNameInfo",
              "type": {
                "text": "PartNameInfo"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "noop"
        },
        {
          "kind": "function",
          "name": "asPercent",
          "parameters": [
            {
              "name": "part",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "whole",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "clamp",
          "parameters": [
            {
              "name": "number",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "min",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getOffset",
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "parent",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "description": "\nReturns an element's offset relative to its parent. Similar to element.offsetTop and element.offsetLeft, except the\nparent doesn't have to be positioned relative or absolute.\n\nWork around for the following issues in Chromium based browsers:\n\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=1330819\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=1334556"
        },
        {
          "kind": "function",
          "name": "createCounter"
        },
        {
          "kind": "function",
          "name": "isLTR",
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "description": "Returns whether an element has a Left-to-Right directionality."
        },
        {
          "kind": "function",
          "name": "formatString",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "template",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "params",
              "type": {
                "text": "unknown[]"
              }
            }
          ],
          "description": "Builds a string from format specifiers and replacement parameters.\nWill coerce non-string parameters to their string representations."
        },
        {
          "kind": "function",
          "name": "asNumber",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "unknown"
              }
            },
            {
              "name": "fallback",
              "default": "0"
            }
          ],
          "description": "Parse the passed `value` as a number or return the `fallback` if it can't be done."
        },
        {
          "kind": "function",
          "name": "wrap",
          "parameters": [
            {
              "name": "min",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "Returns the value wrapped between the min and max bounds.\n\nIf the value is greater than max, returns the min and vice-versa.\nIf the value is between the bounds, it is returned unchanged."
        },
        {
          "kind": "function",
          "name": "isDefined",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "T"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "iterNodes",
          "return": {
            "type": {
              "text": "Generator<T>"
            }
          },
          "parameters": [
            {
              "name": "root",
              "type": {
                "text": "Node"
              }
            },
            {
              "name": "whatToShow",
              "optional": true,
              "type": {
                "text": "keyof typeof NodeFilter"
              }
            },
            {
              "name": "filter",
              "optional": true,
              "type": {
                "text": "(node: T) => boolean"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getElementByIdFromRoot",
          "parameters": [
            {
              "name": "root",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "id",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isElement",
          "return": {
            "type": {
              "text": "node is Element"
            }
          },
          "parameters": [
            {
              "name": "node",
              "type": {
                "text": "unknown"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getElementsFromEventPath",
          "parameters": [
            {
              "name": "event",
              "type": {
                "text": "Event"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "findElementFromEventPath",
          "parameters": [
            {
              "name": "predicate",
              "type": {
                "text": "string | ((element: Element) => boolean)"
              }
            },
            {
              "name": "event",
              "type": {
                "text": "Event"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "groupBy",
          "parameters": [
            {
              "name": "array",
              "type": {
                "text": "T[]"
              }
            },
            {
              "name": "key",
              "type": {
                "text": "keyof T | ((item: T) => any)"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "partNameMap",
          "declaration": {
            "name": "partNameMap",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "noop",
          "declaration": {
            "name": "noop",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "asPercent",
          "declaration": {
            "name": "asPercent",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "clamp",
          "declaration": {
            "name": "clamp",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "getOffset",
          "declaration": {
            "name": "getOffset",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "createCounter",
          "declaration": {
            "name": "createCounter",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "isLTR",
          "declaration": {
            "name": "isLTR",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "formatString",
          "declaration": {
            "name": "formatString",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "asNumber",
          "declaration": {
            "name": "asNumber",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "wrap",
          "declaration": {
            "name": "wrap",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "isDefined",
          "declaration": {
            "name": "isDefined",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "iterNodes",
          "declaration": {
            "name": "iterNodes",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "getElementByIdFromRoot",
          "declaration": {
            "name": "getElementByIdFromRoot",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "isElement",
          "declaration": {
            "name": "isElement",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "getElementsFromEventPath",
          "declaration": {
            "name": "getElementsFromEventPath",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "findElementFromEventPath",
          "declaration": {
            "name": "findElementFromEventPath",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "groupBy",
          "declaration": {
            "name": "groupBy",
            "module": "src/components/common/util.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/validators.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "requiredValidator",
          "type": {
            "text": "Validator<{\n  required: boolean;\n  value?: unknown;\n}>"
          },
          "default": "{\n  key: 'valueMissing',\n  message: validatorMessages.required,\n  isValid: ({ required, value }) => (required ? !!value : true),\n}"
        },
        {
          "kind": "variable",
          "name": "requiredNumberValidator",
          "type": {
            "text": "Validator<{\n  required: boolean;\n  value?: number | string;\n}>"
          },
          "default": "{\n  key: 'valueMissing',\n  message: validatorMessages.required,\n  isValid: ({ required, value }) => (required ? isDefined(value) : true),\n}"
        },
        {
          "kind": "variable",
          "name": "requiredBooleanValidator",
          "type": {
            "text": "Validator<{\n  required: boolean;\n  checked: boolean;\n}>"
          },
          "default": "{\n  key: 'valueMissing',\n  message: validatorMessages.required,\n  isValid: ({ required, checked }) => (required ? checked : true),\n}"
        },
        {
          "kind": "variable",
          "name": "minLengthValidator",
          "type": {
            "text": "Validator<{\n  minLength: number;\n  value: string;\n}>"
          },
          "default": "{\n  key: 'tooShort',\n  message: ({ minLength }) =>\n    formatString(validatorMessages.minLength, minLength),\n  isValid: ({ minLength, value }) =>\n    minLength ? value.length >= minLength : true,\n}"
        },
        {
          "kind": "variable",
          "name": "maxLengthValidator",
          "type": {
            "text": "Validator<{\n  maxLength: number;\n  value: string;\n}>"
          },
          "default": "{\n  key: 'tooLong',\n  message: ({ maxLength }) =>\n    formatString(validatorMessages.maxLength, maxLength),\n  isValid: ({ maxLength, value }) =>\n    maxLength ? value.length <= maxLength : true,\n}"
        },
        {
          "kind": "variable",
          "name": "patternValidator",
          "type": {
            "text": "Validator<{ pattern: string; value: string }>"
          },
          "default": "{\n  key: 'patternMismatch',\n  message: validatorMessages.pattern,\n  isValid: ({ pattern, value }) =>\n    pattern ? new RegExp(pattern, 'u').test(value) : true,\n}"
        },
        {
          "kind": "variable",
          "name": "minValidator",
          "type": {
            "text": "Validator<{\n  min: number | string;\n  value: number | string;\n}>"
          },
          "default": "{\n  key: 'rangeUnderflow',\n  message: ({ min }) => formatString(validatorMessages.min, min),\n  isValid: ({ min, value }) =>\n    isDefined(min)\n      ? isDefined(value) && asNumber(value) >= asNumber(min)\n      : true,\n}"
        },
        {
          "kind": "variable",
          "name": "maxValidator",
          "type": {
            "text": "Validator<{\n  max: number | string;\n  value: number | string;\n}>"
          },
          "default": "{\n  key: 'rangeOverflow',\n  message: ({ max }) => formatString(validatorMessages.max, max),\n  isValid: ({ max, value }) =>\n    isDefined(max)\n      ? isDefined(value) && asNumber(value) <= asNumber(max)\n      : true,\n}"
        },
        {
          "kind": "variable",
          "name": "stepValidator",
          "type": {
            "text": "Validator<{\n  min: number | string;\n  step: number | string;\n  value: number | string;\n}>"
          },
          "default": "{\n  key: 'stepMismatch',\n  message: 'Value does not conform to step constraint',\n  isValid: ({ min, step, value }) =>\n    isDefined(step)\n      ? (asNumber(value) - asNumber(min)) % asNumber(step, 1) === 0\n      : true,\n}"
        },
        {
          "kind": "variable",
          "name": "emailValidator",
          "type": {
            "text": "Validator<{ value: string }>"
          },
          "default": "{\n  key: 'typeMismatch',\n  message: validatorMessages.email,\n  isValid: ({ value }) => emailRegex.test(value),\n}"
        },
        {
          "kind": "variable",
          "name": "urlValidator",
          "type": {
            "text": "Validator<{ value: string }>"
          },
          "default": "{\n  key: 'typeMismatch',\n  message: validatorMessages.url,\n  isValid: ({ value }) => URL.canParse(value),\n}"
        },
        {
          "kind": "variable",
          "name": "minDateValidator",
          "type": {
            "text": "Validator<{\n  value?: Date | null;\n  min?: Date | null;\n}>"
          },
          "default": "{\n  key: 'rangeUnderflow',\n  message: ({ min }) => formatString(validatorMessages.min, min),\n  isValid: ({ value, min }) =>\n    min\n      ? !DateTimeUtil.lessThanMinValue(value ?? new Date(), min, false, true)\n      : true,\n}"
        },
        {
          "kind": "variable",
          "name": "maxDateValidator",
          "type": {
            "text": "Validator<{\n  value?: Date | null;\n  max?: Date | null;\n}>"
          },
          "default": "{\n  key: 'rangeOverflow',\n  message: ({ max }) => formatString(validatorMessages.max, max),\n  isValid: ({ value, max }) =>\n    max\n      ? !DateTimeUtil.greaterThanMaxValue(value ?? new Date(), max, false, true)\n      : true,\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "requiredValidator",
          "declaration": {
            "name": "requiredValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "requiredNumberValidator",
          "declaration": {
            "name": "requiredNumberValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "requiredBooleanValidator",
          "declaration": {
            "name": "requiredBooleanValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "minLengthValidator",
          "declaration": {
            "name": "minLengthValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "maxLengthValidator",
          "declaration": {
            "name": "maxLengthValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "patternValidator",
          "declaration": {
            "name": "patternValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "minValidator",
          "declaration": {
            "name": "minValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "maxValidator",
          "declaration": {
            "name": "maxValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "stepValidator",
          "declaration": {
            "name": "stepValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "emailValidator",
          "declaration": {
            "name": "emailValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "urlValidator",
          "declaration": {
            "name": "urlValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "minDateValidator",
          "declaration": {
            "name": "minDateValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "maxDateValidator",
          "declaration": {
            "name": "maxDateValidator",
            "module": "src/components/common/validators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/date-picker.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "igc-date-picker is a feature rich component used for entering a date through manual text input or\nchoosing date values from a calendar dialog that pops up.",
          "name": "IgcDatePickerComponent",
          "cssParts": [
            {
              "description": "The label wrapper that renders content above the target input.",
              "name": "label"
            },
            {
              "description": "The main wrapper that holds all main input elements.",
              "name": "container"
            },
            {
              "description": "The native input element.",
              "name": "input"
            },
            {
              "description": "The prefix wrapper.",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper.",
              "name": "suffix"
            },
            {
              "description": "The calendar icon wrapper for closed state.",
              "name": "calendar-icon"
            },
            {
              "description": "The calendar icon wrapper for opened state.",
              "name": "calendar-icon-open"
            },
            {
              "description": "The clear icon wrapper.",
              "name": "clear-icon"
            },
            {
              "description": "The actions wrapper.",
              "name": "actions"
            },
            {
              "description": "The helper-text wrapper that renders content below the target input.",
              "name": "helper-text"
            },
            {
              "description": "The calendar header element.",
              "name": "header"
            },
            {
              "description": "The calendar header title element.",
              "name": "header-title"
            },
            {
              "description": "The calendar header date element.",
              "name": "header-date"
            },
            {
              "description": "The calendar content element which contains the views and navigation elements.",
              "name": "calendar-content"
            },
            {
              "description": "The calendar navigation container element.",
              "name": "navigation"
            },
            {
              "description": "The calendar months navigation button element.",
              "name": "months-navigation"
            },
            {
              "description": "The calendar years navigation button element.",
              "name": "years-navigation"
            },
            {
              "description": "The calendar years range element.",
              "name": "years-range"
            },
            {
              "description": "The calendar navigation buttons container.",
              "name": "navigation-buttons"
            },
            {
              "description": "The calendar previous/next navigation button.",
              "name": "navigation-button"
            },
            {
              "description": "The calendar days view container element.",
              "name": "days-view-container"
            },
            {
              "description": "The calendar days view element.",
              "name": "days-view"
            },
            {
              "description": "The calendar months view element.",
              "name": "months-view"
            },
            {
              "description": "The calendar years view element.",
              "name": "years-view"
            },
            {
              "description": "The calendar days row element.",
              "name": "days-row"
            },
            {
              "description": "The calendar week header label element.",
              "name": "calendar-label"
            },
            {
              "description": "The calendar week number element.",
              "name": "week-number"
            },
            {
              "description": "The calendar week number inner element.",
              "name": "week-number-inner"
            },
            {
              "description": "The calendar date element.",
              "name": "date"
            },
            {
              "description": "The calendar date inner element.",
              "name": "date-inner"
            },
            {
              "description": "The calendar first selected date element in range selection.",
              "name": "first"
            },
            {
              "description": "The calendar last selected date element in range selection.",
              "name": "last"
            },
            {
              "description": "The calendar inactive date element.",
              "name": "inactive"
            },
            {
              "description": "The calendar hidden date element.",
              "name": "hidden"
            },
            {
              "description": "The calendar weekend date element.",
              "name": "weekend"
            },
            {
              "description": "The calendar range selected element.",
              "name": "range"
            },
            {
              "description": "The calendar special date element.",
              "name": "special"
            },
            {
              "description": "The calendar disabled date element.",
              "name": "disabled"
            },
            {
              "description": "The calendar single selected date element.",
              "name": "single"
            },
            {
              "description": "The calendar range selection preview date element.",
              "name": "preview"
            },
            {
              "description": "The calendar month element.",
              "name": "month"
            },
            {
              "description": "The calendar month inner element.",
              "name": "month-inner"
            },
            {
              "description": "The calendar year element.",
              "name": "year"
            },
            {
              "description": "The calendar year inner element.",
              "name": "year-inner"
            },
            {
              "description": "The calendar selected state for element(s). Applies to date, month and year elements.",
              "name": "selected"
            },
            {
              "description": "The calendar current state for element(s). Applies to date, month and year elements.",
              "name": "current"
            }
          ],
          "slots": [
            {
              "description": "Renders content before the input.",
              "name": "prefix"
            },
            {
              "description": "Renders content after the input.",
              "name": "suffix"
            },
            {
              "description": "Renders content below the input.",
              "name": "helper-text"
            },
            {
              "description": "Renders content in the calendar title.",
              "name": "title"
            },
            {
              "description": "Renders a clear icon template.",
              "name": "clear-icon"
            },
            {
              "description": "Renders the icon/content for the calendar picker.",
              "name": "calendar-icon"
            },
            {
              "description": "Renders the icon/content for the picker in open state.",
              "name": "calendar-icon-open"
            },
            {
              "description": "Renders content in the action part of the picker in open state.",
              "name": "actions"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-date-picker'"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "privacy": "protected",
              "static": true,
              "default": "{\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  }"
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "protected",
              "default": "`date-picker-${IgcDatePickerComponent.increment()}`"
            },
            {
              "kind": "field",
              "name": "[themeSymbol]",
              "type": {
                "text": "Theme"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[\n    requiredValidator,\n    minDateValidator,\n    maxDateValidator,\n    {\n      key: 'badInput',\n      message: () => formatString(messages.disabledDate, this.value),\n      isValid: () =>\n        this.value\n          ? !isDateInRanges(this.value, this.disabledDates ?? [])\n          : true,\n    },\n  ]",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "Date | null | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_activeDate",
              "type": {
                "text": "Date | null | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_min",
              "type": {
                "text": "Date | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_max",
              "type": {
                "text": "Date | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_disabledDates",
              "type": {
                "text": "DateRangeDescriptor[] | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_dateConstraints",
              "type": {
                "text": "DateRangeDescriptor[] | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_displayFormat",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputFormat",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_rootClickController",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isDropDown",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isMaterialTheme",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_input",
              "type": {
                "text": "IgcDateTimeInputComponent"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_calendar",
              "type": {
                "text": "IgcCalendarComponent"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "prefixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "suffixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "actions",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets the state of the datepicker dropdown.",
              "attribute": "open",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label of the datepicker.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "'dropdown' | 'dialog'"
              },
              "privacy": "public",
              "default": "'dropdown'",
              "description": "Determines whether the calendar is opened in a dropdown or a modal dialog",
              "attribute": "mode"
            },
            {
              "kind": "field",
              "name": "nonEditable",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to allow typing in the input.",
              "attribute": "non-editable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value of the picker",
              "attribute": "value",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "kind": "field",
              "name": "activeDate",
              "privacy": "public",
              "description": "Gets/Sets the date which is shown in the calendar picker and is highlighted.\nBy default it is the current date.",
              "type": {
                "text": "Date"
              },
              "attribute": "active-date"
            },
            {
              "kind": "field",
              "name": "min",
              "privacy": "public",
              "description": "The minimum value required for the date picker to remain valid.",
              "attribute": "min",
              "type": {
                "text": "Date"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "privacy": "public",
              "description": "The maximum value required for the date picker to remain valid.",
              "attribute": "max",
              "type": {
                "text": "Date"
              }
            },
            {
              "kind": "field",
              "name": "headerOrientation",
              "type": {
                "text": "'vertical' | 'horizontal'"
              },
              "privacy": "public",
              "default": "'horizontal'",
              "description": "The orientation of the calendar header.",
              "attribute": "header-orientation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'vertical' | 'horizontal'"
              },
              "privacy": "public",
              "default": "'horizontal'",
              "description": "The orientation of the multiple months displayed in the calendar's days view.",
              "attribute": "orientation"
            },
            {
              "kind": "field",
              "name": "hideHeader",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the calendar hides its header.",
              "attribute": "hide-header",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideOutsideDays",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Controls the visibility of the dates that do not belong to the current month.",
              "attribute": "hide-outside-days",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabledDates",
              "privacy": "public",
              "description": "Gets/sets disabled dates."
            },
            {
              "kind": "field",
              "name": "specialDates",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "public",
              "description": "Gets/sets special dates."
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "attribute": "outlined",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "visibleMonths",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "1",
              "description": "The number of months displayed in the calendar.",
              "attribute": "visible-months"
            },
            {
              "kind": "field",
              "name": "showWeekNumbers",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to show the number of the week in the calendar.",
              "attribute": "show-week-numbers",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "displayFormat",
              "privacy": "public",
              "description": "Format to display the value in when not editing.\nDefaults to the input format if not set.",
              "attribute": "display-format",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "inputFormat",
              "privacy": "public",
              "description": "The date format to apply on the input.\nDefaults to the current locale Intl.DateTimeFormat",
              "attribute": "input-format",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "The locale settings used to display the value.",
              "attribute": "locale"
            },
            {
              "kind": "field",
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'_'",
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "attribute": "prompt"
            },
            {
              "kind": "field",
              "name": "resourceStrings",
              "type": {
                "text": "IgcCalendarResourceStrings"
              },
              "privacy": "public",
              "default": "IgcCalendarResourceStringEN",
              "description": "The resource strings of the calendar."
            },
            {
              "kind": "method",
              "name": "openChange",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "weekStart",
              "type": {
                "text": "| 'sunday'\n    | 'monday'\n    | 'tuesday'\n    | 'wednesday'\n    | 'thursday'\n    | 'friday'\n    | 'saturday'"
              },
              "privacy": "public",
              "default": "'sunday'",
              "description": "Sets the start day of the week for the calendar.",
              "attribute": "week-start"
            },
            {
              "kind": "method",
              "name": "clear",
              "privacy": "public",
              "description": "Clears the input part of the component of any user input"
            },
            {
              "kind": "method",
              "name": "stepUp",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "datePart",
                  "optional": true,
                  "type": {
                    "text": "DatePart"
                  }
                },
                {
                  "name": "delta",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Increments the passed in date part"
            },
            {
              "kind": "method",
              "name": "stepDown",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "datePart",
                  "optional": true,
                  "type": {
                    "text": "DatePart"
                  }
                },
                {
                  "name": "delta",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Decrements the passed in date part"
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Selects the text in the input of the component"
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "'none' | 'backward' | 'forward'"
                  }
                }
              ],
              "description": "Sets the text selection range in the input of the component"
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "mode",
                  "optional": true,
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onEscapeKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleFocusIn",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleFocusOut",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ relatedTarget }",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlerCalendarIconSlotPointerDown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInputClick",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleAnchorClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_shouldCloseCalendarDropdown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInputChangeEvent",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<Date>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleCalendarChangeEvent",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<Date>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInputEvent",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<Date>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClosing",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleDialogClosing",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDialogClosed",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setDateConstraints",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderClearIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderCalendarIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderCalendar",
              "privacy": "private",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderActions",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderPicker",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderHelperText",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "type": {
                "text": "<\n    K extends keyof IgcBaseComboBoxEventMap,\n    D extends UnpackCustomEvent<IgcBaseComboBoxEventMap[K]>,\n  >(\n    event: K,\n    eventInitDict?: CustomEventInit<D>\n  ) => boolean"
              },
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpenOnSelect",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "attribute": "keep-open-on-select",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpenOnOutsideClick",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "attribute": "keep-open-on-outside-click",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitClosing",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitClosed",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitOpening",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitOpened",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_hide",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_show",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "description": "Shows the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "description": "Hides the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "description": "Toggles the open state of the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted just before the calendar dropdown is shown.",
              "name": "igcOpening"
            },
            {
              "description": "Emitted after the calendar dropdown is shown.",
              "name": "igcOpened"
            },
            {
              "description": "Emitted just before the calendar dropdown is hidden.",
              "name": "igcClosing"
            },
            {
              "description": "Emitted after the calendar dropdown is hidden.",
              "name": "igcClosed"
            },
            {
              "description": "Emitted when the user modifies and commits the elements's value.",
              "name": "igcChange"
            },
            {
              "description": "Emitted when when the user types in the element.",
              "name": "igcInput"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the state of the datepicker dropdown.",
              "fieldName": "open",
              "attribute": "open",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label of the datepicker.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "mode",
              "type": {
                "text": "'dropdown' | 'dialog'"
              },
              "default": "'dropdown'",
              "description": "Determines whether the calendar is opened in a dropdown or a modal dialog",
              "fieldName": "mode",
              "attribute": "mode"
            },
            {
              "name": "non-editable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to allow typing in the input.",
              "fieldName": "nonEditable",
              "attribute": "non-editable"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly"
            },
            {
              "name": "value",
              "description": "The value of the picker",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "name": "min",
              "description": "The minimum value required for the date picker to remain valid.",
              "fieldName": "min",
              "attribute": "min",
              "type": {
                "text": "Date"
              }
            },
            {
              "name": "max",
              "description": "The maximum value required for the date picker to remain valid.",
              "fieldName": "max",
              "attribute": "max",
              "type": {
                "text": "Date"
              }
            },
            {
              "name": "header-orientation",
              "type": {
                "text": "'vertical' | 'horizontal'"
              },
              "default": "'horizontal'",
              "description": "The orientation of the calendar header.",
              "fieldName": "headerOrientation",
              "attribute": "header-orientation"
            },
            {
              "name": "orientation",
              "type": {
                "text": "'vertical' | 'horizontal'"
              },
              "default": "'horizontal'",
              "description": "The orientation of the multiple months displayed in the calendar's days view.",
              "fieldName": "orientation",
              "attribute": "orientation"
            },
            {
              "name": "hide-header",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the calendar hides its header.",
              "fieldName": "hideHeader",
              "attribute": "hide-header"
            },
            {
              "name": "hide-outside-days",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the visibility of the dates that do not belong to the current month.",
              "fieldName": "hideOutsideDays",
              "attribute": "hide-outside-days"
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "fieldName": "outlined",
              "attribute": "outlined"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder"
            },
            {
              "name": "visible-months",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The number of months displayed in the calendar.",
              "fieldName": "visibleMonths",
              "attribute": "visible-months"
            },
            {
              "name": "show-week-numbers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show the number of the week in the calendar.",
              "fieldName": "showWeekNumbers",
              "attribute": "show-week-numbers"
            },
            {
              "name": "display-format",
              "description": "Format to display the value in when not editing.\nDefaults to the input format if not set.",
              "fieldName": "displayFormat",
              "attribute": "display-format",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "input-format",
              "description": "The date format to apply on the input.\nDefaults to the current locale Intl.DateTimeFormat",
              "fieldName": "inputFormat",
              "attribute": "input-format",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "The locale settings used to display the value.",
              "fieldName": "locale",
              "attribute": "locale"
            },
            {
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "default": "'_'",
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "fieldName": "prompt",
              "attribute": "prompt"
            },
            {
              "name": "active-date",
              "description": "Gets/Sets the date which is shown in the calendar picker and is highlighted.\nBy default it is the current date.",
              "type": {
                "text": "Date"
              },
              "fieldName": "activeDate"
            },
            {
              "name": "week-start",
              "type": {
                "text": "| 'sunday'\n    | 'monday'\n    | 'tuesday'\n    | 'wednesday'\n    | 'thursday'\n    | 'friday'\n    | 'saturday'"
              },
              "default": "'sunday'",
              "description": "Sets the start day of the week for the calendar.",
              "fieldName": "weekStart"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "fieldName": "required",
              "attribute": "required",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "keep-open-on-select",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "fieldName": "keepOpenOnSelect",
              "attribute": "keep-open-on-select",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "name": "keep-open-on-outside-click",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "fieldName": "keepOpenOnOutsideClick",
              "attribute": "keep-open-on-outside-click",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedRequiredMixin",
              "module": "/src/components/common/mixins/form-associated-required.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcBaseComboBoxLikeComponent",
            "module": "/src/components/common/mixins/combo-box.js"
          },
          "tagName": "igc-date-picker",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDatePickerComponent",
            "module": "src/components/date-picker/date-picker.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-time-input/date-time-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A date time input is an input field that lets you set and edit the date and time in a chosen input element\nusing customizable display and input formats.",
          "name": "IgcDateTimeInputComponent",
          "cssParts": [
            {
              "description": "The main wrapper that holds all main input elements.",
              "name": "container"
            },
            {
              "description": "The native input element.",
              "name": "input"
            },
            {
              "description": "The native label element.",
              "name": "label"
            },
            {
              "description": "The prefix wrapper.",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper.",
              "name": "suffix"
            },
            {
              "description": "The helper text wrapper.",
              "name": "helper-text"
            }
          ],
          "slots": [
            {
              "description": "Renders content before the input.",
              "name": "prefix"
            },
            {
              "description": "Renders content after input.",
              "name": "suffix"
            },
            {
              "description": "Renders content below the input.",
              "name": "helper-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-date-time-input'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[\n    requiredValidator,\n\n    {\n      ...minDateValidator,\n      isValid: () =>\n        this.min\n          ? !DateTimeUtil.lessThanMinValue(\n              this.value || new Date(),\n              this.min,\n              this.hasTimeParts,\n              this.hasDateParts\n            )\n          : true,\n    },\n    {\n      ...maxDateValidator,\n      isValid: () =>\n        this.max\n          ? !DateTimeUtil.greaterThanMaxValue(\n              this.value || new Date(),\n              this.max,\n              this.hasTimeParts,\n              this.hasDateParts\n            )\n          : true,\n    },\n  ]",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultMask",
              "type": {
                "text": "string"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "Date | null"
              },
              "privacy": "protected",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_oldValue",
              "type": {
                "text": "Date | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_inputDateParts",
              "type": {
                "text": "DatePartInfo[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputFormat",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_datePartDeltas",
              "type": {
                "text": "DatePartDeltas"
              },
              "privacy": "private",
              "default": "{\n    date: 1,\n    month: 1,\n    year: 1,\n    hours: 1,\n    minutes: 1,\n    seconds: 1,\n  }"
            },
            {
              "kind": "field",
              "name": "inputFormat",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The date format to apply on the input.",
              "attribute": "input-format"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | Date | null"
              },
              "privacy": "public",
              "description": "The value of the input.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateFormValue",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "Date"
              },
              "privacy": "public",
              "description": "The minimum value required for the input to remain valid.",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "Date"
              },
              "privacy": "public",
              "description": "The maximum value required for the input to remain valid.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "minValue",
              "privacy": "public",
              "description": "The minimum value required for the input to remain valid.",
              "deprecated": "since v4.4.0. Use the `min` property instead.",
              "attribute": "min-value"
            },
            {
              "kind": "field",
              "name": "maxValue",
              "privacy": "public",
              "description": "The maximum value required for the input to remain valid.",
              "deprecated": "since v4.4.0. Use the `max` property instead.",
              "attribute": "max-value"
            },
            {
              "kind": "field",
              "name": "displayFormat",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Format to display the value in when not editing.\nDefaults to the input format if not set.",
              "attribute": "display-format"
            },
            {
              "kind": "field",
              "name": "spinDelta",
              "type": {
                "text": "DatePartDeltas"
              },
              "privacy": "public",
              "description": "Delta values used to increment or decrement each date part on step actions.\nAll values default to `1`."
            },
            {
              "kind": "field",
              "name": "spinLoop",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true",
              "description": "Sets whether to loop over the currently spun segment.",
              "attribute": "spin-loop"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "The locale settings used to display the value.",
              "attribute": "locale"
            },
            {
              "kind": "method",
              "name": "setDefaultMask",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setDisplayFormat",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "promptChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "constraintChange",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "hasDateParts",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "hasTimeParts",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "targetDatePart",
              "type": {
                "text": "DatePart | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "datePartDeltas",
              "type": {
                "text": "DatePartDeltas"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "stepUp",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "datePart",
                  "optional": true,
                  "type": {
                    "text": "DatePart"
                  }
                },
                {
                  "name": "delta",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Increments a date/time portion."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "datePart",
                  "optional": true,
                  "type": {
                    "text": "DatePart"
                  }
                },
                {
                  "name": "delta",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Decrements a date/time portion."
            },
            {
              "kind": "method",
              "name": "clear",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Clears the input element of user input."
            },
            {
              "kind": "method",
              "name": "setToday",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateMask",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ inputType, isComposing }",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleDragLeave",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleDragEnter",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "range",
                  "type": {
                    "text": "MaskRange"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "trySpinValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "parameters": [
                {
                  "name": "datePart",
                  "type": {
                    "text": "DatePart"
                  }
                },
                {
                  "name": "delta",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "negative",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "spinValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "parameters": [
                {
                  "name": "datePart",
                  "type": {
                    "text": "DatePart"
                  }
                },
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onWheel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "WheelEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateDefaultMask",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setMask",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "parseDate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getMaskedValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "isComplete",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateSetRangeTextValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getNewPosition",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "direction",
                  "default": "0"
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "navigateParts",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "keyboardSpin",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "'up' | 'down'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "field",
              "name": "parser",
              "privacy": "protected",
              "default": "new MaskParser()",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "MaskRange"
              },
              "privacy": "protected",
              "default": "{ start: 0, end: 0 }",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "compositionStart",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "maskedValue",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_mask",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "attribute": "prompt",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputSelection",
              "type": {
                "text": "MaskRange"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "emptyMask",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "description": "Selects all text within the input.",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ key }",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCut",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleDragStart",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCompositionStart",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCompositionEnd",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ data }",
                  "type": {
                    "text": "CompositionEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "privacy": "public",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "'backward' | 'forward' | 'none'"
                  }
                }
              ],
              "description": "Sets the text selection range of the control",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "privacy": "public",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "optional": true,
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces the selected text in the control and re-applies the mask",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "default": "'large'",
              "privacy": "public",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "field",
              "name": "[themeSymbol]",
              "type": {
                "text": "Theme"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "privacy": "protected",
              "static": true,
              "default": "{\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  }",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "protected",
              "default": "`input-${IgcInputBaseComponent.increment()}`",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "prefixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "suffixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "privacy": "public",
              "description": "Makes the control a readonly field.",
              "deprecated": "since v4.4.0. Use the `readOnly` property instead.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label for the control.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleSlotChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "resolvePartNames",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "base",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderMaterial",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStandard",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control input receives user input.",
              "name": "igcInput"
            },
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "igcChange"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "igcFocus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "igcBlur"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "input-format",
              "type": {
                "text": "string"
              },
              "description": "The date format to apply on the input.",
              "fieldName": "inputFormat",
              "attribute": "input-format"
            },
            {
              "name": "value",
              "description": "The value of the input.",
              "fieldName": "value",
              "type": {
                "text": "Date | null"
              },
              "attribute": "value"
            },
            {
              "name": "min",
              "type": {
                "text": "Date"
              },
              "description": "The minimum value required for the input to remain valid.",
              "fieldName": "min",
              "attribute": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "Date"
              },
              "description": "The maximum value required for the input to remain valid.",
              "fieldName": "max",
              "attribute": "max"
            },
            {
              "name": "min-value",
              "description": "The minimum value required for the input to remain valid.",
              "deprecated": "since v4.4.0. Use the `min` property instead.",
              "fieldName": "minValue",
              "attribute": "min-value"
            },
            {
              "name": "max-value",
              "description": "The maximum value required for the input to remain valid.",
              "deprecated": "since v4.4.0. Use the `max` property instead.",
              "fieldName": "maxValue",
              "attribute": "max-value"
            },
            {
              "name": "display-format",
              "type": {
                "text": "string"
              },
              "description": "Format to display the value in when not editing.\nDefaults to the input format if not set.",
              "fieldName": "displayFormat",
              "attribute": "display-format"
            },
            {
              "name": "spin-loop",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Sets whether to loop over the currently spun segment.",
              "fieldName": "spinLoop",
              "attribute": "spin-loop"
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "The locale settings used to display the value.",
              "fieldName": "locale",
              "attribute": "locale"
            },
            {
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "fieldName": "prompt",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "fieldName": "required",
              "attribute": "required",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "fieldName": "outlined",
              "attribute": "outlined",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label for the control.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcMaskInputBaseComponent",
            "module": "/src/components/mask-input/mask-input-base.js"
          },
          "tagName": "igc-date-time-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDateTimeInputComponent",
            "module": "src/components/date-time-input/date-time-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-time-input/date-util.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DateTimeUtil",
          "members": [
            {
              "kind": "field",
              "name": "DEFAULT_INPUT_FORMAT",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'MM/dd/yyyy'"
            },
            {
              "kind": "field",
              "name": "DEFAULT_TIME_INPUT_FORMAT",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'hh:mm tt'"
            },
            {
              "kind": "field",
              "name": "SEPARATOR",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "readonly": true,
              "default": "'literal'"
            },
            {
              "kind": "field",
              "name": "DEFAULT_LOCALE",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "readonly": true,
              "default": "'en'"
            },
            {
              "kind": "field",
              "name": "_parser",
              "privacy": "private",
              "static": true,
              "default": "new MaskParser()"
            },
            {
              "kind": "method",
              "name": "parseValueFromMask",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "Date | null"
                }
              },
              "parameters": [
                {
                  "name": "inputData",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "dateTimeParts",
                  "type": {
                    "text": "DatePartInfo[]"
                  }
                },
                {
                  "name": "promptChar",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getDefaultMask",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "parseDateTimeFormat",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "DatePartInfo[]"
                }
              },
              "parameters": [
                {
                  "name": "mask",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "locale",
                  "default": "DateTimeUtil.DEFAULT_LOCALE",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "noLeadingZero",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "parseIsoDate",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "Date | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isValidDate",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "value is Date"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formatDate",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "format",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "noLeadingZero",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getPartValue",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "datePartInfo",
                  "type": {
                    "text": "DatePartInfo"
                  }
                },
                {
                  "name": "partLength",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "_dateValue",
                  "type": {
                    "text": "Date | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "spinYear",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "newDate",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "spinMonth",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "newDate",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "spinLoop",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "spinDate",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "newDate",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "spinLoop",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "spinHours",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "newDate",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "spinLoop",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "spinMinutes",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "newDate",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "spinLoop",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "spinSeconds",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "newDate",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "spinLoop",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "spinAmPm",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "parameters": [
                {
                  "name": "newDate",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "currentDate",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "amPmFromMask",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "greaterThanMaxValue",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "maxValue",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "includeTime",
                  "default": "true"
                },
                {
                  "name": "includeDate",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "lessThanMinValue",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "minValue",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "includeTime",
                  "default": "true",
                  "description": "set to false if you want to exclude time portion of the two dates"
                },
                {
                  "name": "includeDate",
                  "default": "true",
                  "description": "set to false if you want to exclude the date portion of the two dates"
                }
              ],
              "description": "Determines whether the provided value is less than the provided min value."
            },
            {
              "kind": "method",
              "name": "validateMinMax",
              "privacy": "public",
              "static": true,
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  },
                  "description": "The value to validate"
                },
                {
                  "name": "minValue",
                  "type": {
                    "text": "Date | string"
                  },
                  "description": "The lowest possible value that `value` can take"
                },
                {
                  "name": "maxValue",
                  "type": {
                    "text": "Date | string"
                  },
                  "description": "The largest possible value that `value` can take"
                },
                {
                  "name": "includeTime",
                  "default": "true"
                },
                {
                  "name": "includeDate",
                  "default": "true"
                }
              ],
              "description": "Validates a value within a given min and max value range."
            },
            {
              "kind": "method",
              "name": "setDisplayFormatOptions",
              "privacy": "private",
              "static": true,
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "format",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "noLeadingZero",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getMask",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "dateStruct",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addCurrentPart",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "currentPart",
                  "type": {
                    "text": "DatePartInfo"
                  }
                },
                {
                  "name": "dateTimeParts",
                  "type": {
                    "text": "DatePartInfo[]"
                  }
                },
                {
                  "name": "noLeadingZero",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "ensureLeadingZero",
              "privacy": "private",
              "static": true,
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "DatePartInfo"
                  }
                },
                {
                  "name": "noLeadingZero",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "determineDatePart",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "DateParts"
                }
              },
              "parameters": [
                {
                  "name": "char",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getDefaultLocaleMask",
              "privacy": "private",
              "static": true,
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "fillDatePartsPositions",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "dateArray",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getCleanVal",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "inputData",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "datePart",
                  "type": {
                    "text": "DatePartInfo"
                  }
                },
                {
                  "name": "prompt",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "escapeRegExp",
              "privacy": "private",
              "static": true,
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "trimEmptyPlaceholders",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "prompt",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "daysInMonth",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "fullYear",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "month",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependValue",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "partLength",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "prependChar",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toTwelveHourFormat",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DateTimeUtil",
          "declaration": {
            "name": "DateTimeUtil",
            "module": "src/components/date-time-input/date-util.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dialog/dialog.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents a Dialog component.",
          "name": "IgcDialogComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the dialog.",
              "name": "base"
            },
            {
              "description": "The title container.",
              "name": "title"
            },
            {
              "description": "The footer container.",
              "name": "footer"
            },
            {
              "description": "The overlay.",
              "name": "overlay"
            }
          ],
          "slots": [
            {
              "description": "Renders content inside the default slot.",
              "name": ""
            },
            {
              "description": "Renders the title of the dialog header.",
              "name": "title"
            },
            {
              "description": "Renders the dialog footer.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-dialog'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "titleId",
              "privacy": "private",
              "default": "`title-${IgcDialogComponent.increment()}`"
            },
            {
              "kind": "field",
              "name": "dialogRef",
              "type": {
                "text": "Ref<HTMLDialogElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "animationPlayer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "dialog",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "titleElements",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "footerElements",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "closeOnEscape",
              "privacy": "public",
              "description": "Whether the dialog should be closed when pressing the 'ESCAPE' button.",
              "deprecated": "since version 4.2.3. Use `keepOpenOnEscape` instead.",
              "attribute": "close-on-escape",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "keepOpenOnEscape",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the dialog should be kept open when pressing the 'ESCAPE' button.",
              "attribute": "keep-open-on-escape"
            },
            {
              "kind": "field",
              "name": "closeOnOutsideClick",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the dialog should be closed when clicking outside of it.",
              "attribute": "close-on-outside-click"
            },
            {
              "kind": "field",
              "name": "hideDefaultAction",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to hide the default action button for the dialog.\n\nWhen there is projected content in the `footer` slot this property\nhas no effect.",
              "attribute": "hide-default-action"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the dialog is opened.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Sets the title of the dialog.",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "returnValue",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Sets the return value for the dialog."
            },
            {
              "kind": "method",
              "name": "resolvePartNames",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "base",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOpenState",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "toggleAnimation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "dir",
                  "type": {
                    "text": "'open' | 'close'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "description": "Opens the dialog."
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "description": "Closes the dialog."
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "description": "Toggles the open state of the dialog."
            },
            {
              "kind": "method",
              "name": "hideWithEvent",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleCancel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ clientX, clientY, target }",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClosing",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "formSubmitHandler",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "slotChanged",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleContentChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitter just before the dialog is closed.",
              "name": "igcClosing"
            },
            {
              "description": "Emitted after closing the dialog.",
              "name": "igcClosed"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "close-on-escape",
              "description": "Whether the dialog should be closed when pressing the 'ESCAPE' button.",
              "deprecated": "since version 4.2.3. Use `keepOpenOnEscape` instead.",
              "fieldName": "closeOnEscape",
              "attribute": "close-on-escape",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "keep-open-on-escape",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the dialog should be kept open when pressing the 'ESCAPE' button.",
              "fieldName": "keepOpenOnEscape",
              "attribute": "keep-open-on-escape"
            },
            {
              "name": "close-on-outside-click",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the dialog should be closed when clicking outside of it.",
              "fieldName": "closeOnOutsideClick",
              "attribute": "close-on-outside-click"
            },
            {
              "name": "hide-default-action",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to hide the default action button for the dialog.\n\nWhen there is projected content in the `footer` slot this property\nhas no effect.",
              "fieldName": "hideDefaultAction",
              "attribute": "hide-default-action"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the dialog is opened.",
              "fieldName": "open",
              "attribute": "open"
            },
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "description": "Sets the title of the dialog.",
              "fieldName": "title",
              "attribute": "title"
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-dialog",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDialogComponent",
            "module": "src/components/dialog/dialog.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/divider/divider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The igc-divider allows the content author to easily create a horizontal/vertical rule as a break between content to better organize information on a page.",
          "name": "IgcDividerComponent",
          "cssProperties": [
            {
              "description": "Sets the color of the divider.",
              "name": "--color"
            },
            {
              "description": "Shrinks the divider by the given amount from the start. If `middle` is set it will shrink from both sides.",
              "name": "--inset"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-divider'"
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_vertical",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "vertical",
              "privacy": "public",
              "description": "Whether to render a vertical divider line.",
              "attribute": "vertical",
              "type": {
                "text": "boolean"
              },
              "reflects": true
            },
            {
              "kind": "field",
              "name": "middle",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "When set and inset is provided, it will shrink the divider line from both sides.",
              "attribute": "middle",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'solid' | 'dashed'"
              },
              "privacy": "public",
              "default": "'solid'",
              "description": "Whether to render a solid or a dashed divider line.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'separator'"
            },
            {
              "kind": "field",
              "name": "ariaOrientation"
            }
          ],
          "attributes": [
            {
              "name": "vertical",
              "description": "Whether to render a vertical divider line.",
              "fieldName": "vertical",
              "attribute": "vertical",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "middle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set and inset is provided, it will shrink the divider line from both sides.",
              "fieldName": "middle",
              "attribute": "middle"
            },
            {
              "name": "type",
              "type": {
                "text": "'solid' | 'dashed'"
              },
              "default": "'solid'",
              "description": "Whether to render a solid or a dashed divider line.",
              "fieldName": "type",
              "attribute": "type"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-divider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDividerComponent",
            "module": "src/components/divider/divider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A container for a group of `igc-dropdown-item` components.",
          "name": "IgcDropdownGroupComponent",
          "cssParts": [
            {
              "description": "The native label element.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "Contains the group's label.",
              "name": "label"
            },
            {
              "description": "Intended to contain the items belonging to this group.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-dropdown-group'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "Array<IgcDropdownItemComponent>"
              },
              "privacy": "public",
              "description": "All child `igc-dropdown-item`s."
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'group'"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-dropdown-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDropdownGroupComponent",
            "module": "src/components/dropdown/dropdown-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents a header item in a igc-dropdown list.",
          "name": "IgcDropdownHeaderComponent",
          "slots": [
            {
              "description": "Renders the header.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-dropdown-header'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-dropdown-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDropdownHeaderComponent",
            "module": "src/components/dropdown/dropdown-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents an item in a dropdown list.",
          "name": "IgcDropdownItemComponent",
          "cssParts": [
            {
              "description": "The prefix wrapper of the igc-dropdown-item.",
              "name": "prefix"
            },
            {
              "description": "The main content wrapper of the igc-dropdown-item.",
              "name": "content"
            },
            {
              "description": "The suffix wrapper of the igc-dropdown-item.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "Renders content before the item's main content.",
              "name": "prefix"
            },
            {
              "description": "Renders the item's main content.",
              "name": ""
            },
            {
              "description": "Renders content after the item's main content.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-dropdown-item'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_active",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_content",
              "type": {
                "text": "Array<Element>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_contentSlotText",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "privacy": "public",
              "description": "Whether the item is active.",
              "attribute": "active",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "Whether the item is disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "privacy": "public",
              "description": "Whether the item is selected.",
              "attribute": "selected",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The current value of the item.\nIf not specified, the element's text content is used.",
              "attribute": "value",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'option'",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcBaseOptionLikeComponent",
            "module": "/src/components/common/mixins/option.js"
          },
          "tagName": "igc-dropdown-item",
          "customElement": true,
          "attributes": [
            {
              "name": "active",
              "description": "Whether the item is active.",
              "fieldName": "active",
              "attribute": "active",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "name": "disabled",
              "description": "Whether the item is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "name": "selected",
              "description": "Whether the item is selected.",
              "fieldName": "selected",
              "attribute": "selected",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "name": "value",
              "description": "The current value of the item.\nIf not specified, the element's text content is used.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDropdownItemComponent",
            "module": "src/components/dropdown/dropdown-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents a DropDown component.",
          "name": "IgcDropdownComponent",
          "cssParts": [
            {
              "description": "The dropdown list wrapper container.",
              "name": "base"
            },
            {
              "description": "The dropdown list element.",
              "name": "list"
            }
          ],
          "slots": [
            {
              "description": "Renders the dropdown's target element.",
              "name": "target"
            },
            {
              "description": "Renders the dropdown list items.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-dropdown'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_keyBindings",
              "type": {
                "text": "ReturnType<typeof addKeybindings>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_rootScrollController",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_rootClickController",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_selectedItem",
              "type": {
                "text": "IgcDropdownItemComponent | null"
              },
              "privacy": "protected",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_activeItem",
              "type": {
                "text": "IgcDropdownItemComponent"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_activeItems",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_targetListeners",
              "type": {
                "text": "KeyBindingObserverCleanup"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_target",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'"
              },
              "privacy": "public",
              "default": "'bottom-start'",
              "description": "The preferred placement of the component around the target element.",
              "attribute": "placement"
            },
            {
              "kind": "field",
              "name": "positionStrategy",
              "type": {
                "text": "'absolute' | 'fixed'"
              },
              "privacy": "public",
              "default": "'absolute'",
              "description": "Sets the component's positioning strategy.",
              "deprecated": "since v4.9.0. Stacking context is now handled through the popover API.",
              "attribute": "position-strategy"
            },
            {
              "kind": "field",
              "name": "scrollStrategy",
              "type": {
                "text": "'scroll' | 'block' | 'close'"
              },
              "privacy": "public",
              "default": "'scroll'",
              "description": "Determines the behavior of the component during scrolling of the parent container.",
              "attribute": "scroll-strategy"
            },
            {
              "kind": "field",
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component should be flipped to the opposite side of the target once it's about to overflow the visible area.\nWhen true, once enough space is detected on its preferred side, it will flip back.",
              "attribute": "flip"
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The distance from the target element.",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "sameWidth",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the dropdown's width should be the same as the target's one.",
              "attribute": "same-width"
            },
            {
              "kind": "field",
              "name": "items",
              "privacy": "public",
              "description": "Returns the items of the dropdown.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "groups",
              "privacy": "public",
              "description": "Returns the group items of the dropdown.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectedItem",
              "privacy": "public",
              "description": "Returns the selected item from the dropdown or null.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "scrollStrategyChanged",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "openStateChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleListBoxClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcDropdownItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onArrowUp",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onArrowDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onHomeKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "onEndKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "onTabKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "onEscapeKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "onEnterKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "activateItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcDropdownItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_navigateToActiveItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "IgcDropdownItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_selectItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcDropdownItemComponent"
                  }
                },
                {
                  "name": "emit",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateAnchorAccessibility",
              "privacy": "private",
              "parameters": [
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setTarget",
              "privacy": "private",
              "parameters": [
                {
                  "name": "anchor",
                  "type": {
                    "text": "HTMLElement | string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "description": "Shows the component.",
              "parameters": [
                {
                  "name": "target",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "description": "Toggles the open state of the component.",
              "parameters": [
                {
                  "name": "target",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcDropdownItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Navigates to the item with the specified value. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcDropdownItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Navigates to the item at the specified index. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcDropdownItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | number"
                  }
                }
              ],
              "description": "Navigates to the specified item. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcDropdownItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Selects the item with the specified value. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcDropdownItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Selects the item at the specified index. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcDropdownItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | number"
                  }
                }
              ],
              "description": "Selects the specified item. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "clearSelection",
              "privacy": "public",
              "description": "Clears the current selection of the dropdown."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "default": "'medium'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "type": {
                "text": "<\n    K extends keyof IgcBaseComboBoxEventMap,\n    D extends UnpackCustomEvent<IgcBaseComboBoxEventMap[K]>,\n  >(\n    event: K,\n    eventInitDict?: CustomEventInit<D>\n  ) => boolean"
              },
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpenOnSelect",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "attribute": "keep-open-on-select",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpenOnOutsideClick",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "attribute": "keep-open-on-outside-click",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets the open state of the component.",
              "attribute": "open",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitClosing",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitClosed",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitOpening",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitOpened",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleAnchorClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_hide",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_show",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "description": "Hides the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the selected item changes.",
              "name": "igcChange"
            },
            {
              "description": "Emitted just before the dropdown is open.",
              "name": "igcOpening"
            },
            {
              "description": "Emitted after the dropdown is open.",
              "name": "igcOpened"
            },
            {
              "description": "Emitter just before the dropdown is closed.",
              "name": "igcClosing"
            },
            {
              "description": "Emitted after closing the dropdown.",
              "name": "igcClosed"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'"
              },
              "default": "'bottom-start'",
              "description": "The preferred placement of the component around the target element.",
              "fieldName": "placement",
              "attribute": "placement"
            },
            {
              "name": "position-strategy",
              "type": {
                "text": "'absolute' | 'fixed'"
              },
              "default": "'absolute'",
              "description": "Sets the component's positioning strategy.",
              "deprecated": "since v4.9.0. Stacking context is now handled through the popover API.",
              "fieldName": "positionStrategy",
              "attribute": "position-strategy"
            },
            {
              "name": "scroll-strategy",
              "type": {
                "text": "'scroll' | 'block' | 'close'"
              },
              "default": "'scroll'",
              "description": "Determines the behavior of the component during scrolling of the parent container.",
              "fieldName": "scrollStrategy",
              "attribute": "scroll-strategy"
            },
            {
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component should be flipped to the opposite side of the target once it's about to overflow the visible area.\nWhen true, once enough space is detected on its preferred side, it will flip back.",
              "fieldName": "flip",
              "attribute": "flip"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance from the target element.",
              "fieldName": "distance",
              "attribute": "distance"
            },
            {
              "name": "same-width",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the dropdown's width should be the same as the target's one.",
              "fieldName": "sameWidth",
              "attribute": "same-width"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "name": "keep-open-on-select",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "fieldName": "keepOpenOnSelect",
              "attribute": "keep-open-on-select",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "name": "keep-open-on-outside-click",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "fieldName": "keepOpenOnOutsideClick",
              "attribute": "keep-open-on-outside-click",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the open state of the component.",
              "fieldName": "open",
              "attribute": "open",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SizableMixin",
              "module": "/src/components/common/mixins/sizable.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcBaseComboBoxLikeComponent",
            "module": "/src/components/common/mixins/combo-box.js"
          },
          "tagName": "igc-dropdown",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDropdownComponent",
            "module": "src/components/dropdown/dropdown.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/expansion-panel/expansion-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The Expansion Panel Component provides a way to display information in a toggleable way -\ncompact summary view containing title and description and expanded detail view containing\nadditional content to the summary header.",
          "name": "IgcExpansionPanelComponent",
          "cssParts": [
            {
              "description": "The container of the expansion indicator, title and subtitle.",
              "name": "header"
            },
            {
              "description": " The title container.",
              "name": "title"
            },
            {
              "description": "The subtitle container.",
              "name": "subtitle"
            },
            {
              "description": "The indicator container.",
              "name": "indicator"
            },
            {
              "description": "The expansion panel's content wrapper.",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "renders the default content of the panel",
              "name": ""
            },
            {
              "description": "renders the title of the panel's header",
              "name": "title"
            },
            {
              "description": "renders the subtitle of the panel's header",
              "name": "subtitle"
            },
            {
              "description": "renders the expand/collapsed indicator",
              "name": "indicator"
            },
            {
              "description": "renders the expanded state of the indicator",
              "name": "indicator-expanded"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-expansion-panel'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "headerRef",
              "type": {
                "text": "Ref<HTMLDivElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "contentRef",
              "type": {
                "text": "Ref<HTMLDivElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "animationPlayer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_indicatorExpandedElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Indicates whether the contents of the control should be visible.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Get/Set whether the expansion panel is disabled. Disabled panels are ignored for user interactions.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indicatorPosition",
              "type": {
                "text": "'start' | 'end' | 'none'"
              },
              "privacy": "public",
              "default": "'start'",
              "description": "The indicator position of the expansion panel.",
              "attribute": "indicator-position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "panelId",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClicked",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggleWithEvent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggleAnimation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "dir",
                  "type": {
                    "text": "'open' | 'close'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "openWithEvent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "closeWithEvent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggles panel open state."
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Hides the panel content."
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Shows the panel content."
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "indicatorTemplate",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "headerTemplate",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "contentTemplate",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted before opening the expansion panel.",
              "name": "igcOpening"
            },
            {
              "description": "Emitted after the expansion panel is opened.",
              "name": "igcOpened"
            },
            {
              "description": "Emitted before closing the expansion panel.",
              "name": "igcClosing"
            },
            {
              "description": "Emitted after the expansion panel is closed.",
              "name": "igcClosed"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether the contents of the control should be visible.",
              "fieldName": "open",
              "attribute": "open"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Get/Set whether the expansion panel is disabled. Disabled panels are ignored for user interactions.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "indicator-position",
              "type": {
                "text": "'start' | 'end' | 'none'"
              },
              "default": "'start'",
              "description": "The indicator position of the expansion panel.",
              "fieldName": "indicatorPosition",
              "attribute": "indicator-position"
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-expansion-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcExpansionPanelComponent",
            "module": "src/components/expansion-panel/expansion-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/focus-trap/focus-trap.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcFocusTrapComponent",
          "slots": [
            {
              "description": "The content of the focus trap component",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-focus-trap'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to manage focus state for the slotted children.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "focused",
              "privacy": "public",
              "description": "Whether focus in currently inside the trap component.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "focusableElements",
              "privacy": "public",
              "description": "An array of focusable elements including elements in Shadow roots",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "onFocusIn",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onFocusOut",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focusFirstElement",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "focusLastElement",
              "privacy": "public"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to manage focus state for the slotted children.",
              "fieldName": "disabled",
              "attribute": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-focus-trap",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcFocusTrapComponent",
            "module": "src/components/focus-trap/focus-trap.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/form/form.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The form is a component used to collect user input from\ninteractive controls.",
          "name": "IgcFormComponent",
          "slots": [
            {
              "description": "Default slot for the form.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-form'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_controlsWithChecked",
              "type": {
                "text": "array"
              },
              "privacy": "private",
              "default": "[\n    'input',\n    'radio',\n    'igc-radio',\n    'igc-switch',\n    'igc-checkbox',\n  ]"
            },
            {
              "kind": "field",
              "name": "_controlsWithValue",
              "type": {
                "text": "array"
              },
              "privacy": "private",
              "default": "[\n    'input',\n    'igc-input',\n    'igc-mask-input',\n    'textarea',\n    'igc-rating',\n    'igc-select',\n    'igc-combo',\n    'igc-date-time-input',\n  ]"
            },
            {
              "kind": "field",
              "name": "_controlsThatSubmit",
              "type": {
                "text": "array"
              },
              "privacy": "private",
              "default": "[\n    'input',\n    'button',\n    'igc-button',\n    'igc-icon-button',\n  ]"
            },
            {
              "kind": "field",
              "name": "novalidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Specifies if form data validation should be skipped on submit.",
              "attribute": "novalidate",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "submit",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Submits the form."
            },
            {
              "kind": "method",
              "name": "reset",
              "privacy": "public",
              "description": "Resets the form."
            },
            {
              "kind": "method",
              "name": "getFormElements",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "any[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "getFormData",
              "privacy": "public",
              "description": "Retrieves the data from the form in the format of a FormData object."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Checks for validity of the form."
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the form is submitted.",
              "name": "igcSubmit"
            },
            {
              "description": "Emitted when the form is reset.",
              "name": "igcReset"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "novalidate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies if form data validation should be skipped on submit.",
              "fieldName": "novalidate"
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-form",
          "deprecated": "since version 4.4.0. Use the native `<form>` element instead.",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcFormComponent",
            "module": "src/components/form/form.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/icon.registry.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IconsRegistry",
          "members": [
            {
              "kind": "field",
              "name": "_parser",
              "type": {
                "text": "DOMParser"
              },
              "privacy": "private",
              "default": "new DOMParser()"
            },
            {
              "kind": "field",
              "name": "collections",
              "privacy": "private",
              "default": "new Map<string, IconCollection>()"
            },
            {
              "kind": "field",
              "name": "listeners",
              "privacy": "private",
              "default": "new Set<IconCallback>()"
            },
            {
              "kind": "method",
              "name": "subscribe",
              "privacy": "public",
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "IconCallback"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "unsubscribe",
              "privacy": "public",
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "IconCallback"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "parseSVG",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "ParsedIcon"
                }
              },
              "parameters": [
                {
                  "name": "svgString",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "iconText",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "collection",
                  "default": "'default'"
                }
              ]
            },
            {
              "kind": "method",
              "name": "get",
              "privacy": "public",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "collection",
                  "default": "'default'"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getOrCreateCollection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "function",
          "name": "getIconRegistry"
        },
        {
          "kind": "function",
          "name": "registerIcon",
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "url",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "collection",
              "default": "'default'"
            }
          ]
        },
        {
          "kind": "function",
          "name": "registerIconFromText",
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "iconText",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "collection",
              "default": "'default'"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IconsRegistry",
          "declaration": {
            "name": "IconsRegistry",
            "module": "src/components/icon/icon.registry.ts"
          }
        },
        {
          "kind": "js",
          "name": "getIconRegistry",
          "declaration": {
            "name": "getIconRegistry",
            "module": "src/components/icon/icon.registry.ts"
          }
        },
        {
          "kind": "js",
          "name": "registerIcon",
          "declaration": {
            "name": "registerIcon",
            "module": "src/components/icon/icon.registry.ts"
          }
        },
        {
          "kind": "js",
          "name": "registerIconFromText",
          "declaration": {
            "name": "registerIconFromText",
            "module": "src/components/icon/icon.registry.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The icon component allows visualizing collections of pre-registered SVG icons.",
          "name": "IgcIconComponent",
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-icon'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "svg",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "description": "The name of the icon glyph to draw.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "collection",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'default'",
              "description": "The name of the registered collection for look up of icons.\nDefaults to `default`.",
              "attribute": "collection"
            },
            {
              "kind": "field",
              "name": "mirrored",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to flip the icon. Useful for RTL layouts.",
              "attribute": "mirrored",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "iconChanged",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "curr",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "iconLoaded",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "registerIcon",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "url",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "collection",
                  "default": "'default'"
                }
              ]
            },
            {
              "kind": "method",
              "name": "registerIconFromText",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "iconText",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "collection",
                  "default": "'default'"
                }
              ]
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'img'"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "default": "'medium'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the icon glyph to draw.",
              "fieldName": "name",
              "attribute": "name"
            },
            {
              "name": "collection",
              "type": {
                "text": "string"
              },
              "default": "'default'",
              "description": "The name of the registered collection for look up of icons.\nDefaults to `default`.",
              "fieldName": "collection",
              "attribute": "collection"
            },
            {
              "name": "mirrored",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to flip the icon. Useful for RTL layouts.",
              "fieldName": "mirrored",
              "attribute": "mirrored"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SizableMixin",
              "module": "/src/components/common/mixins/sizable.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcIconComponent",
            "module": "src/components/icon/icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/internal-icons-lib.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "internalIcons",
          "type": {
            "text": "IconCollection"
          },
          "default": "{\n  navigate_before: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M15.61 7.41L14.2 6l-6 6 6 6 1.41-1.41L11.03 12l4.58-4.59z\"/></svg>`,\n  },\n  navigate_next: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M10.02 6L8.61 7.41 13.19 12l-4.58 4.59L10.02 18l6-6-6-6z\"/></svg>`,\n  },\n  keyboard_arrow_up: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\"/></svg>`,\n  },\n  keyboard_arrow_down: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"/></svg>`,\n  },\n  keyboard_arrow_right: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\"/></svg>`,\n  },\n  chip_cancel: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"/></svg>`,\n  },\n  chip_select: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/></svg>`,\n  },\n  star: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\"/></svg>`,\n  },\n  star_border: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z\"/></svg>`,\n  },\n  case_sensitive: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\"><path d=\"M21.2 16.5c0-.2-.1-.5-.1-.7v-4.4c0-.4-.1-.8-.3-1.2-.2-.3-.5-.6-.8-.7-.3-.2-.7-.3-1.1-.3-.4-.1-.8-.1-1.2-.1-.5 0-.9 0-1.4.1-.4.1-.8.3-1.2.5-.3.2-.6.5-.8.9s-.3.9-.3 1.3h1.4c0-.5.2-1 .7-1.3.5-.2 1-.4 1.5-.3.2 0 .5 0 .7.1.2 0 .4.1.6.2.2.1.3.2.5.4.1.2.2.5.2.7s-.1.4-.2.6c-.2.2-.4.3-.6.3-.3.1-.6.1-.9.2-.4 0-.7.1-1.1.2-.4.1-.7.1-1.1.2-.3.1-.7.2-1 .4s-.5.5-.7.8c-.2.4-.3.8-.3 1.2s.1.8.2 1.1c.1.3.4.5.6.7.3.2.6.3.9.4.9.2 1.9.2 2.8-.2.5-.2 1-.6 1.4-1 0 .4.1.7.3 1 .2.2.6.3.9.3.4 0 .7-.1 1-.2v-1.1c-.1 0-.3.1-.4.1-.1.1-.2 0-.2-.2zm-1.5-1.7c0 .2-.1.4-.2.6-.1.2-.3.5-.5.6-.2.2-.5.4-.8.5-.4.1-.8.2-1.2.2-.2 0-.4 0-.6-.1-.2 0-.4-.1-.5-.2-.2-.1-.3-.2-.4-.4-.1-.2-.2-.4-.1-.6 0-.3.1-.6.2-.8.2-.2.4-.4.6-.5.3-.1.6-.2.9-.2s.7-.1 1-.1.6-.1.9-.1.5-.1.7-.3v1.4zm-9.6-.4l1.3 3.6h1.8L8.5 6H6.7L2 18h1.7L5 14.4h5.1zm-2.5-7l2.1 5.5H5.5l2.1-5.5z\"></path></svg>`,\n  },\n  clear: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/></svg>`,\n  },\n  arrow_drop_up: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M7 14l5-5 5 5z\"/></svg>`,\n  },\n  arrow_drop_down: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M7 10l5 5 5-5z\"/></svg>`,\n  },\n  arrow_downward: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\"/></svg>`,\n  },\n  arrow_upward: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z\"/></svg>`,\n  },\n  calendar: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 -960 960 960\" width=\"24\"><path d=\"M200-80q-33 0-56.5-23.5T120-160v-560q0-33 23.5-56.5T200-800h40v-80h80v80h320v-80h80v80h40q33 0 56.5 23.5T840-720v560q0 33-23.5 56.5T760-80H200Zm0-80h560v-400H200v400Zm0-480h560v-80H200v80Zm0 0v-80 80Z\"/></svg>`,\n  },\n  calendar_today: {\n    svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M20 3h-1V1h-2v2H7V1H5v2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 18H4V8h16v13z\"/></svg>`,\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "internalIcons",
          "declaration": {
            "name": "internalIcons",
            "module": "src/components/icon/internal-icons-lib.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input/input-base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcInputBaseComponent",
          "members": [
            {
              "kind": "field",
              "name": "[themeSymbol]",
              "type": {
                "text": "Theme"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "privacy": "protected",
              "static": true,
              "default": "{\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  }"
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "protected",
              "default": "`input-${IgcInputBaseComponent.increment()}`"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | Date | null"
              },
              "privacy": "public",
              "description": "The value attribute of the control."
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "prefixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "suffixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "attribute": "outlined",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "privacy": "public",
              "description": "Makes the control a readonly field.",
              "deprecated": "since v4.4.0. Use the `readOnly` property instead."
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label for the control.",
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control."
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the control."
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "field",
              "name": "handleSlotChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "resolvePartNames",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "base",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "privacy": "public",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "default": "'none'",
                  "type": {
                    "text": "'backward' | 'forward' | 'none'"
                  }
                }
              ],
              "description": "Sets the text selection range of the control"
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "privacy": "public",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces the selected text in the input."
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderMaterial",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderStandard",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "default": "'medium'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "fieldName": "outlined",
              "attribute": "outlined"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label for the control.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "fieldName": "required",
              "attribute": "required",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedRequiredMixin",
              "module": "/src/components/common/mixins/form-associated-required.js"
            },
            {
              "name": "SizableMixin",
              "module": "/src/components/common/mixins/sizable.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcInputBaseComponent",
          "declaration": {
            "name": "IgcInputBaseComponent",
            "module": "src/components/input/input-base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input/input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcInputComponent",
          "cssParts": [
            {
              "description": "The main wrapper that holds all main input elements.",
              "name": "container"
            },
            {
              "description": "The native input element.",
              "name": "input"
            },
            {
              "description": "The native label element.",
              "name": "label"
            },
            {
              "description": "The prefix wrapper.",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper.",
              "name": "suffix"
            },
            {
              "description": "The helper text wrapper.",
              "name": "helper-text"
            }
          ],
          "slots": [
            {
              "description": "Renders content before the input.",
              "name": "prefix"
            },
            {
              "description": "Renders content after input.",
              "name": "suffix"
            },
            {
              "description": "Renders content below the input.",
              "name": "helper-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-input'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "isStringType",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[\n    {\n      ...requiredValidator,\n      isValid: () =>\n        this.isStringType\n          ? requiredValidator.isValid(this)\n          : requiredNumberValidator.isValid(this),\n    },\n    {\n      ...minLengthValidator,\n      isValid: () =>\n        this.isStringType ? minLengthValidator.isValid(this) : true,\n    },\n    {\n      ...maxLengthValidator,\n      isValid: () =>\n        this.isStringType ? maxLengthValidator.isValid(this) : true,\n    },\n    {\n      ...minValidator,\n      isValid: () => (this.isStringType ? true : minValidator.isValid(this)),\n    },\n    {\n      ...maxValidator,\n      isValid: () => (this.isStringType ? true : maxValidator.isValid(this)),\n    },\n    {\n      ...stepValidator,\n      isValid: () => (this.isStringType ? true : stepValidator.isValid(this)),\n    },\n    {\n      ...patternValidator,\n      isValid: () =>\n        this.isStringType ? patternValidator.isValid(this) : true,\n    },\n    {\n      key: 'typeMismatch',\n      isValid: () => {\n        switch (this.type) {\n          case 'email':\n            return emailValidator.isValid(this);\n          case 'url':\n            return urlValidator.isValid(this);\n          default:\n            return true;\n        }\n      },\n      message: () =>\n        (this.type === 'email'\n          ? emailValidator.message\n          : urlValidator.message) as string,\n    },\n  ]",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | Date | null"
              },
              "privacy": "public",
              "description": "The value of the control.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "| 'email'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'url'"
              },
              "privacy": "public",
              "default": "'text'",
              "description": "The type attribute of the control.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inputmode",
              "privacy": "public",
              "description": "The input mode attribute of the control.",
              "deprecated": "since v4.10.0. Use `inputMode` property instead.",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "inputMode",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The input mode attribute of the control.\nSee [relevant MDN article](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)",
              "attribute": "inputmode"
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The pattern attribute of the control.",
              "attribute": "pattern"
            },
            {
              "kind": "field",
              "name": "minLength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The minimum string length required by the control.",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "minlength",
              "privacy": "public",
              "description": "The minlength attribute of the control.",
              "deprecated": "since v4.4.0. Use the `minLength` property instead."
            },
            {
              "kind": "field",
              "name": "maxLength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum string length of the control.",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "maxlength",
              "privacy": "public",
              "description": "The maxlength attribute of the control.",
              "deprecated": "since v4.4.0. Use the `maxLength` property instead."
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number | string"
              },
              "privacy": "public",
              "description": "The min attribute of the control.",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number | string"
              },
              "privacy": "public",
              "description": "The max attribute of the control.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The step attribute of the control.",
              "attribute": "step"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The autofocus attribute of the control.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The autocomplete attribute of the control.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "validateOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Enables validation rules to be evaluated without restricting user input. This applies to the `maxLength` property for\nstring-type inputs or allows spin buttons to exceed the predefined `min/max` limits for number-type inputs.",
              "attribute": "validate-only",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "constraintsChanged",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "privacy": "public",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces the selected text in the input.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "description": "Selects all text within the input."
            },
            {
              "kind": "method",
              "name": "stepUp",
              "privacy": "public",
              "parameters": [
                {
                  "name": "n",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Increments the numeric value of the input by one or more steps."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "privacy": "public",
              "parameters": [
                {
                  "name": "n",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Decrements the numeric value of the input by one or more steps."
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "[themeSymbol]",
              "type": {
                "text": "Theme"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "privacy": "protected",
              "static": true,
              "default": "{\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  }",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "protected",
              "default": "`input-${IgcInputBaseComponent.increment()}`",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "prefixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "suffixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "privacy": "public",
              "description": "Makes the control a readonly field.",
              "deprecated": "since v4.4.0. Use the `readOnly` property instead.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label for the control.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleSlotChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "resolvePartNames",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "base",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "privacy": "public",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "default": "'none'",
                  "type": {
                    "text": "'backward' | 'forward' | 'none'"
                  }
                }
              ],
              "description": "Sets the text selection range of the control",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderMaterial",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStandard",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control input receives user input.",
              "name": "igcInput"
            },
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "igcChange"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "igcFocus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "igcBlur"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "description": "The value of the control.",
              "fieldName": "value",
              "attribute": "value"
            },
            {
              "name": "type",
              "type": {
                "text": "| 'email'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'url'"
              },
              "default": "'text'",
              "description": "The type attribute of the control.",
              "fieldName": "type",
              "attribute": "type"
            },
            {
              "name": "inputmode",
              "type": {
                "text": "string"
              },
              "description": "The input mode attribute of the control.\nSee [relevant MDN article](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)",
              "fieldName": "inputMode",
              "attribute": "inputmode"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "The pattern attribute of the control.",
              "fieldName": "pattern",
              "attribute": "pattern"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum string length required by the control.",
              "fieldName": "minLength",
              "attribute": "minlength"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum string length of the control.",
              "fieldName": "maxLength",
              "attribute": "maxlength"
            },
            {
              "name": "min",
              "type": {
                "text": "number | string"
              },
              "description": "The min attribute of the control.",
              "fieldName": "min",
              "attribute": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number | string"
              },
              "description": "The max attribute of the control.",
              "fieldName": "max",
              "attribute": "max"
            },
            {
              "name": "step",
              "type": {
                "text": "number"
              },
              "description": "The step attribute of the control.",
              "fieldName": "step",
              "attribute": "step"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "The autofocus attribute of the control.",
              "fieldName": "autofocus",
              "attribute": "autofocus"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "The autocomplete attribute of the control.",
              "fieldName": "autocomplete",
              "attribute": "autocomplete"
            },
            {
              "name": "validate-only",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables validation rules to be evaluated without restricting user input. This applies to the `maxLength` property for\nstring-type inputs or allows spin buttons to exceed the predefined `min/max` limits for number-type inputs.",
              "fieldName": "validateOnly",
              "attribute": "validate-only"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "fieldName": "required",
              "attribute": "required",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "fieldName": "outlined",
              "attribute": "outlined",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label for the control.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcInputBaseComponent",
            "module": "/src/components/input/input-base.js"
          },
          "tagName": "igc-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcInputComponent",
            "module": "src/components/input/input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/list-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Header list item.",
          "name": "IgcListHeaderComponent",
          "slots": [
            {
              "description": "Renders header list item's content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-list-header'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'separator'"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-list-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcListHeaderComponent",
            "module": "src/components/list/list-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/list-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The list-item component is a container\nintended for row items in the list component.",
          "name": "IgcListItemComponent",
          "cssParts": [
            {
              "description": "The start container.",
              "name": "start"
            },
            {
              "description": "The end container.",
              "name": "end"
            },
            {
              "description": "The header and custom content container.",
              "name": "content"
            },
            {
              "description": "The title and subtitle container.",
              "name": "header"
            },
            {
              "description": "The title container.",
              "name": "title"
            },
            {
              "description": "The subtitle container.",
              "name": "subtitle"
            }
          ],
          "slots": [
            {
              "description": "Renders custom content.",
              "name": ""
            },
            {
              "description": "Renders content before all other content.",
              "name": "start"
            },
            {
              "description": "Renders content after all other content.",
              "name": "end"
            },
            {
              "description": "Renders the title.",
              "name": "title"
            },
            {
              "description": "Renders the subtitle.",
              "name": "subtitle"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-list-item'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'listitem'"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-list-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcListItemComponent",
            "module": "src/components/list/list-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/list.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Displays a collection of data items in a templatable list format.",
          "name": "IgcListComponent",
          "slots": [
            {
              "description": "Renders the list items and list headers inside default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-list'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'list'"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SizableMixin",
              "module": "/src/components/common/mixins/sizable.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-list",
          "customElement": true,
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcListComponent",
            "module": "src/components/list/list.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/mask-input/mask-input-base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcMaskInputBaseComponent",
          "members": [
            {
              "kind": "field",
              "name": "parser",
              "privacy": "protected",
              "default": "new MaskParser()"
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "MaskRange"
              },
              "privacy": "protected",
              "default": "{ start: 0, end: 0 }"
            },
            {
              "kind": "field",
              "name": "compositionStart",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "maskedValue",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_mask",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "attribute": "prompt"
            },
            {
              "kind": "field",
              "name": "inputSelection",
              "type": {
                "text": "MaskRange"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "emptyMask",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "description": "Selects all text within the input."
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ inputType, isComposing }",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ key }",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleCut",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleDragStart",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleCompositionStart",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleCompositionEnd",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ data }",
                  "type": {
                    "text": "CompositionEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "privacy": "public",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "'backward' | 'forward' | 'none'"
                  }
                }
              ],
              "description": "Sets the text selection range of the control",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "privacy": "public",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "optional": true,
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces the selected text in the control and re-applies the mask",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateSetRangeTextValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "range",
                  "type": {
                    "text": "MaskRange"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "[themeSymbol]",
              "type": {
                "text": "Theme"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "privacy": "protected",
              "static": true,
              "default": "{\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  }",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "protected",
              "default": "`input-${IgcInputBaseComponent.increment()}`",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | Date | null"
              },
              "privacy": "public",
              "description": "The value attribute of the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "prefixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "suffixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "privacy": "public",
              "description": "Makes the control a readonly field.",
              "deprecated": "since v4.4.0. Use the `readOnly` property instead.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label for the control.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleSlotChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "resolvePartNames",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "base",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderMaterial",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStandard",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "fieldName": "prompt"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "fieldName": "required",
              "attribute": "required",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "fieldName": "outlined",
              "attribute": "outlined",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label for the control.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcInputBaseComponent",
            "module": "/src/components/input/input-base.js"
          },
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcMaskInputBaseComponent",
          "declaration": {
            "name": "IgcMaskInputBaseComponent",
            "module": "src/components/mask-input/mask-input-base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/mask-input/mask-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A masked input is an input field where a developer can control user input and format the visible value,\nbased on configurable rules",
          "name": "IgcMaskInputComponent",
          "cssParts": [
            {
              "description": "The main wrapper that holds all main input elements",
              "name": "container"
            },
            {
              "description": "The native input element",
              "name": "input"
            },
            {
              "description": "The native label element",
              "name": "label"
            },
            {
              "description": "The prefix wrapper",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper",
              "name": "suffix"
            },
            {
              "description": "The helper text wrapper",
              "name": "helper-text"
            }
          ],
          "slots": [
            {
              "description": "Renders content before the input",
              "name": "prefix"
            },
            {
              "description": "Renders content after the input",
              "name": "suffix"
            },
            {
              "description": "Renders content below the input",
              "name": "helper-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-mask-input'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[\n    requiredValidator,\n    {\n      key: 'badInput',\n      message: messages.mask,\n      isValid: () => this.parser.isValidString(this.maskedValue),\n    },\n  ]",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "valueMode",
              "type": {
                "text": "'raw' | 'withFormatting'"
              },
              "privacy": "public",
              "default": "'raw'",
              "description": "Dictates the behavior when retrieving the value of the control:\n\n- `raw` will return the clean user input.\n- `withFormatting` will return the value with all literals and prompts.",
              "attribute": "value-mode"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | Date | null"
              },
              "privacy": "public",
              "description": "The value of the input.\n\nRegardless of the currently set `value-mode`, an empty value will return an empty string.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "mask",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The mask pattern to apply on the input.",
              "attribute": "mask"
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              },
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateFormValue",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "promptChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "range",
                  "type": {
                    "text": "MaskRange"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleDragEnter",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleDragLeave",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateMaskedValue",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_updateSetRangeTextValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "parser",
              "privacy": "protected",
              "default": "new MaskParser()",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "MaskRange"
              },
              "privacy": "protected",
              "default": "{ start: 0, end: 0 }",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "compositionStart",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "maskedValue",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_mask",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "attribute": "prompt",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputSelection",
              "type": {
                "text": "MaskRange"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "emptyMask",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "description": "Selects all text within the input.",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ inputType, isComposing }",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ key }",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCut",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleDragStart",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCompositionStart",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCompositionEnd",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ data }",
                  "type": {
                    "text": "CompositionEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "privacy": "public",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "'backward' | 'forward' | 'none'"
                  }
                }
              ],
              "description": "Sets the text selection range of the control",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "privacy": "public",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "optional": true,
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces the selected text in the control and re-applies the mask",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "[themeSymbol]",
              "type": {
                "text": "Theme"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "privacy": "protected",
              "static": true,
              "default": "{\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  }",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "protected",
              "default": "`input-${IgcInputBaseComponent.increment()}`",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "prefixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "suffixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "privacy": "public",
              "description": "Makes the control a readonly field.",
              "deprecated": "since v4.4.0. Use the `readOnly` property instead.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label for the control.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleSlotChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "resolvePartNames",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "base",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderMaterial",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStandard",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control receives user input",
              "name": "igcInput"
            },
            {
              "description": "Emitted when an alteration of the control's value is committed by the user",
              "name": "igcChange"
            },
            {
              "description": "Emitted when the control gains focus",
              "name": "igcFocus"
            },
            {
              "description": "Emitted when the control loses focus",
              "name": "igcBlur"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value-mode",
              "type": {
                "text": "'raw' | 'withFormatting'"
              },
              "default": "'raw'",
              "description": "Dictates the behavior when retrieving the value of the control:\n\n- `raw` will return the clean user input.\n- `withFormatting` will return the value with all literals and prompts.",
              "fieldName": "valueMode",
              "attribute": "value-mode"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value of the input.\n\nRegardless of the currently set `value-mode`, an empty value will return an empty string.",
              "fieldName": "value",
              "attribute": "value"
            },
            {
              "name": "mask",
              "type": {
                "text": "string"
              },
              "description": "The mask pattern to apply on the input.",
              "fieldName": "mask",
              "attribute": "mask"
            },
            {
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "fieldName": "prompt",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "fieldName": "required",
              "attribute": "required",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "fieldName": "outlined",
              "attribute": "outlined",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label for the control.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcMaskInputBaseComponent",
            "module": "/src/components/mask-input/mask-input-base.js"
          },
          "tagName": "igc-mask-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcMaskInputComponent",
            "module": "src/components/mask-input/mask-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/mask-input/mask-parser.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MaskParser",
          "members": [
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "MaskOptions"
              },
              "privacy": "protected",
              "default": "options"
            },
            {
              "kind": "field",
              "name": "literals",
              "privacy": "protected",
              "default": "new Map<number, string>()"
            },
            {
              "kind": "field",
              "name": "_escapedMask",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "literalPositions",
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "escapedMask",
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "mask",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "prompt",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "parseMaskLiterals",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "isPromptChar",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "char",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "replaceCharAt",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "pos",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "char",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "validate",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "char",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "maskedChar",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getNonLiteralPositions",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "mask",
                  "default": "''"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getRequiredNonLiteralPositions",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "mask",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getPreviousNonLiteralPosition",
              "privacy": "public",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getNextNonLiteralPosition",
              "privacy": "public",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "replace",
              "privacy": "public",
              "parameters": [
                {
                  "name": "maskString",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "parse",
              "privacy": "public",
              "parameters": [
                {
                  "name": "masked",
                  "default": "''"
                }
              ]
            },
            {
              "kind": "method",
              "name": "isValidString",
              "privacy": "public",
              "parameters": [
                {
                  "name": "input",
                  "default": "''"
                }
              ]
            },
            {
              "kind": "method",
              "name": "apply",
              "privacy": "public",
              "parameters": [
                {
                  "name": "input",
                  "default": "''"
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MaskParser",
          "declaration": {
            "name": "MaskParser",
            "module": "src/components/mask-input/mask-parser.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/nav-drawer/nav-drawer-header-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A wrapper for navigation drawer's header.",
          "name": "IgcNavDrawerHeaderItemComponent",
          "slots": [
            {
              "description": "Renders the header content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-nav-drawer-header-item'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-nav-drawer-header-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcNavDrawerHeaderItemComponent",
            "module": "src/components/nav-drawer/nav-drawer-header-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/nav-drawer/nav-drawer-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents a navigation drawer item.",
          "name": "IgcNavDrawerItemComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the drawer item.",
              "name": "base"
            },
            {
              "description": "The icon container.",
              "name": "icon"
            },
            {
              "description": "The content container.",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "The content slot for the drawer item.",
              "name": "content"
            },
            {
              "description": "The slot for the icon of the drawer item.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-nav-drawer-item'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the drawer is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the drawer is active.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_textLength",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_text",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "navdrawerIcon",
              "type": {
                "text": "Array<Node>"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "resolvePartNames",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "base",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the drawer is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the drawer is active.",
              "fieldName": "active",
              "attribute": "active"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-nav-drawer-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcNavDrawerItemComponent",
            "module": "src/components/nav-drawer/nav-drawer-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/nav-drawer/nav-drawer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents a side navigation container that provides\nquick access between views.",
          "name": "IgcNavDrawerComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the igc-navigation-drawer.",
              "name": "base"
            },
            {
              "description": "The main container of the igc-navigation-drawer.",
              "name": "main"
            },
            {
              "description": "The mini container of the igc-navigation-drawer.",
              "name": "mini"
            }
          ],
          "slots": [
            {
              "description": "The default slot for the igc-navigation-drawer.",
              "name": ""
            },
            {
              "description": "The slot for the mini variant of the igc-navigation-drawer.",
              "name": "mini"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-nav-drawer'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_miniSlotElements",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "'start' | 'end' | 'top' | 'bottom' | 'relative'"
              },
              "privacy": "public",
              "default": "'start'",
              "description": "The position of the drawer.",
              "attribute": "position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the drawer is opened.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "description": "Opens the drawer."
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "description": "Closes the drawer."
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "description": "Toggles the open state of the drawer."
            }
          ],
          "attributes": [
            {
              "name": "position",
              "type": {
                "text": "'start' | 'end' | 'top' | 'bottom' | 'relative'"
              },
              "default": "'start'",
              "description": "The position of the drawer.",
              "fieldName": "position",
              "attribute": "position"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the drawer is opened.",
              "fieldName": "open",
              "attribute": "open"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-nav-drawer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcNavDrawerComponent",
            "module": "src/components/nav-drawer/nav-drawer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/navbar/navbar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A navigation bar component is used to facilitate navigation through\na series of hierarchical screens within an app.",
          "name": "IgcNavbarComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the navigation bar.",
              "name": "base"
            },
            {
              "description": "The left aligned icon container.",
              "name": "start"
            },
            {
              "description": "The navigation bar title container.",
              "name": "middle"
            },
            {
              "description": "The right aligned action icons container.",
              "name": "end"
            }
          ],
          "slots": [
            {
              "description": "Renders a title inside the default slot.",
              "name": ""
            },
            {
              "description": "Renders left aligned icons.",
              "name": "start"
            },
            {
              "description": "Renders right aligned action icons.",
              "name": "end"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-navbar'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-navbar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcNavbarComponent",
            "module": "src/components/navbar/navbar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/popover/popover.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcPopoverComponent",
          "cssParts": [
            {
              "description": "The container wrapping the slotted content in the popover.",
              "name": "container"
            }
          ],
          "slots": [
            {
              "description": "Content of the popover.",
              "name": ""
            },
            {
              "description": "The element the popover will be anchored to.",
              "name": "anchor"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-popover'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "dispose",
              "type": {
                "text": "ReturnType<typeof autoUpdate> | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "Element | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_container",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_anchors",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "Element | string | undefined"
              },
              "privacy": "public",
              "description": "Pass an IDREF or an DOM element reference to use as the\nanchor target for the floating element.",
              "attribute": "anchor"
            },
            {
              "kind": "field",
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "When enabled this changes the placement of the floating element in order to keep it\nin view along the main axis.",
              "attribute": "flip",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "Placement modifier which translates the floating element along the main axis.",
              "attribute": "offset"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The visibility state of the popover component.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "IgcPlacement"
              },
              "privacy": "public",
              "default": "'bottom-start'",
              "description": "Where to place the floating element relative to the parent anchor element.",
              "attribute": "placement"
            },
            {
              "kind": "field",
              "name": "sameWidth",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "When enabled the floating element will match the width of its parent anchor element.",
              "attribute": "same-width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "shift",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "When enabled this tries to shift the floating element along the main axis\nkeeping it in view, preventing overflow while maintaining the desired placement.",
              "attribute": "shift",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "anchorChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "openChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "floatingPropChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_showPopover",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_hidePopover",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_createMiddleware",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Middleware[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateState",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updatePosition",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_anchorSlotChange",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "anchor",
              "type": {
                "text": "Element | string | undefined"
              },
              "description": "Pass an IDREF or an DOM element reference to use as the\nanchor target for the floating element.",
              "fieldName": "anchor"
            },
            {
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When enabled this changes the placement of the floating element in order to keep it\nin view along the main axis.",
              "fieldName": "flip"
            },
            {
              "name": "offset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Placement modifier which translates the floating element along the main axis.",
              "fieldName": "offset"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The visibility state of the popover component.",
              "fieldName": "open"
            },
            {
              "name": "placement",
              "type": {
                "text": "IgcPlacement"
              },
              "default": "'bottom-start'",
              "description": "Where to place the floating element relative to the parent anchor element.",
              "fieldName": "placement"
            },
            {
              "name": "same-width",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When enabled the floating element will match the width of its parent anchor element.",
              "fieldName": "sameWidth"
            },
            {
              "name": "shift",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When enabled this tries to shift the floating element along the main axis\nkeeping it in view, preventing overflow while maintaining the desired placement.",
              "fieldName": "shift"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-popover",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcPopoverComponent",
            "module": "src/components/popover/popover.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress/base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcProgressBaseComponent",
          "members": [
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_ticker",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "assignedElements",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "progressIndicator",
              "type": {
                "text": "Element"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "percentage",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "progress",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "100",
              "description": "Maximum value of the control.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The value of the control.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              },
              "privacy": "public",
              "default": "'primary'",
              "description": "The variant of the control.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "animationDuration",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "500",
              "description": "Animation duration in milliseconds.",
              "attribute": "animation-duration"
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The indeterminate state of the control.",
              "attribute": "indeterminate"
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Shows/hides the label of the control.",
              "attribute": "hide-label"
            },
            {
              "kind": "field",
              "name": "labelFormat",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Format string for the default label of the control.\nPlaceholders:\n {0} - current value of the control.\n {1} - max value of the control.",
              "attribute": "label-format"
            },
            {
              "kind": "method",
              "name": "indeterminateChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "maxChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "valueChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "previous",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateARIA",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setProgress",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "cancelAnimations",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "animateLabelTo",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderLabelFormat",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderDefaultSlot",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderLabelText",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'progressbar'"
            },
            {
              "kind": "field",
              "name": "ariaValueMin",
              "type": {
                "text": "string"
              },
              "default": "'0'"
            }
          ],
          "attributes": [
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Maximum value of the control.",
              "fieldName": "max",
              "attribute": "max"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The value of the control.",
              "fieldName": "value",
              "attribute": "value"
            },
            {
              "name": "variant",
              "type": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              },
              "default": "'primary'",
              "description": "The variant of the control.",
              "fieldName": "variant",
              "attribute": "variant"
            },
            {
              "name": "animation-duration",
              "type": {
                "text": "number"
              },
              "default": "500",
              "description": "Animation duration in milliseconds.",
              "fieldName": "animationDuration",
              "attribute": "animation-duration"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The indeterminate state of the control.",
              "fieldName": "indeterminate",
              "attribute": "indeterminate"
            },
            {
              "name": "hide-label",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows/hides the label of the control.",
              "fieldName": "hideLabel",
              "attribute": "hide-label"
            },
            {
              "name": "label-format",
              "type": {
                "text": "string"
              },
              "description": "Format string for the default label of the control.\nPlaceholders:\n {0} - current value of the control.\n {1} - max value of the control.",
              "fieldName": "labelFormat",
              "attribute": "label-format"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcProgressBaseComponent",
          "declaration": {
            "name": "IgcProgressBaseComponent",
            "module": "src/components/progress/base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress/circular-gradient.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Used for defining gradient stops in the igc-circular-progress.\nFor each `igc-circular-gradient` defined as `gradient` slot of `igc-circular-progress` element would be created a SVG stop element.\nThe values passed as `color`, `offset` and `opacity` would be set as\n`stop-color`, `offset` and `stop-opacity` of the SVG element without further validations.",
          "name": "IgcCircularGradientComponent",
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-circular-gradient'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'0%'",
              "description": "Defines where the gradient stop is placed along the gradient vector",
              "attribute": "offset"
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'black'",
              "description": "Defines the color of the gradient stop",
              "attribute": "color"
            },
            {
              "kind": "field",
              "name": "opacity",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "1",
              "description": "Defines the opacity of the gradient stop",
              "attribute": "opacity"
            }
          ],
          "attributes": [
            {
              "name": "offset",
              "type": {
                "text": "string"
              },
              "default": "'0%'",
              "description": "Defines where the gradient stop is placed along the gradient vector",
              "fieldName": "offset",
              "attribute": "offset"
            },
            {
              "name": "color",
              "type": {
                "text": "string"
              },
              "default": "'black'",
              "description": "Defines the color of the gradient stop",
              "fieldName": "color",
              "attribute": "color"
            },
            {
              "name": "opacity",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Defines the opacity of the gradient stop",
              "fieldName": "opacity",
              "attribute": "opacity"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-circular-gradient",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCircularGradientComponent",
            "module": "src/components/progress/circular-gradient.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress/circular-progress.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A circular progress indicator used to express unspecified wait time or display\nthe length of a process.",
          "name": "IgcCircularProgressComponent",
          "cssParts": [
            {
              "description": "The igc-circular-progress SVG element.",
              "name": "svg"
            },
            {
              "description": "The igc-circular-progress linear-gradient start color.",
              "name": "gradient_start"
            },
            {
              "description": "The igc-circular-progress linear-gradient end color.",
              "name": "gradient_end"
            },
            {
              "description": "The igc-circular-progress ring track area.",
              "name": "track"
            },
            {
              "description": "The igc-circular-progress indicator area.",
              "name": "fill"
            },
            {
              "description": "The igc-circular-progress label.",
              "name": "label"
            },
            {
              "description": "The igc-circular-progress label value.",
              "name": "value"
            },
            {
              "description": "The igc-circular-progress indeterminate state.",
              "name": "indeterminate"
            },
            {
              "description": "The igc-circular-progress primary state.",
              "name": "primary"
            },
            {
              "description": "The igc-circular-progress error state.",
              "name": "danger"
            },
            {
              "description": "The igc-circular-progress warning state.",
              "name": "warning"
            },
            {
              "description": "The igc-circular-progress info state.",
              "name": "info"
            },
            {
              "description": "The igc-circular-progress success state.",
              "name": "success"
            }
          ],
          "slots": [
            {
              "description": "The text area container.",
              "name": ""
            },
            {
              "description": "Customize the progress bar in order to use a color gradient instead of a solid color. Accepts `igc-circular-gradient` elements.",
              "name": "gradient"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-circular-progress'"
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_gradientId",
              "privacy": "private",
              "default": "`circular-progress-${IgcCircularProgressComponent.increment()}`"
            },
            {
              "kind": "field",
              "name": "_assignedGradients",
              "type": {
                "text": "Array<IgcCircularGradientComponent>"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderSvg",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderWrapper",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_ticker",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "assignedElements",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "progressIndicator",
              "type": {
                "text": "Element"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "percentage",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "progress",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "100",
              "description": "Maximum value of the control.",
              "attribute": "max",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The value of the control.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              },
              "privacy": "public",
              "default": "'primary'",
              "description": "The variant of the control.",
              "attribute": "variant",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "animationDuration",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "500",
              "description": "Animation duration in milliseconds.",
              "attribute": "animation-duration",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The indeterminate state of the control.",
              "attribute": "indeterminate",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Shows/hides the label of the control.",
              "attribute": "hide-label",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelFormat",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Format string for the default label of the control.\nPlaceholders:\n {0} - current value of the control.\n {1} - max value of the control.",
              "attribute": "label-format",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "indeterminateChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "maxChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "valueChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "previous",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateARIA",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setProgress",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "cancelAnimations",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "animateLabelTo",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabelFormat",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderDefaultSlot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabelText",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'progressbar'",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaValueMin",
              "type": {
                "text": "string"
              },
              "default": "'0'",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcProgressBaseComponent",
            "module": "/src/components/progress/base.js"
          },
          "tagName": "igc-circular-progress",
          "customElement": true,
          "attributes": [
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Maximum value of the control.",
              "fieldName": "max",
              "attribute": "max",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The value of the control.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "variant",
              "type": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              },
              "default": "'primary'",
              "description": "The variant of the control.",
              "fieldName": "variant",
              "attribute": "variant",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "animation-duration",
              "type": {
                "text": "number"
              },
              "default": "500",
              "description": "Animation duration in milliseconds.",
              "fieldName": "animationDuration",
              "attribute": "animation-duration",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The indeterminate state of the control.",
              "fieldName": "indeterminate",
              "attribute": "indeterminate",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "hide-label",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows/hides the label of the control.",
              "fieldName": "hideLabel",
              "attribute": "hide-label",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "label-format",
              "type": {
                "text": "string"
              },
              "description": "Format string for the default label of the control.\nPlaceholders:\n {0} - current value of the control.\n {1} - max value of the control.",
              "fieldName": "labelFormat",
              "attribute": "label-format",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCircularProgressComponent",
            "module": "src/components/progress/circular-progress.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress/linear-progress.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A linear progress indicator used to express unspecified wait time or display\nthe length of a process.",
          "name": "IgcLinearProgressComponent",
          "cssParts": [
            {
              "description": "The igc-linear-progress track area.",
              "name": "track"
            },
            {
              "description": "The igc-linear-progress indicator area.",
              "name": "fill"
            },
            {
              "description": "The igc-linear-progress striped indicator.",
              "name": "striped"
            },
            {
              "description": "The igc-linear-progress label.",
              "name": "label"
            },
            {
              "description": "The igc-linear-progress label value.",
              "name": "value"
            },
            {
              "description": "The igc-linear-progress indeterminate state.",
              "name": "indeterminate"
            },
            {
              "description": "The igc-linear-progress indicator primary state.",
              "name": "primary"
            },
            {
              "description": "The igc-linear-progress indicator error state.",
              "name": "danger"
            },
            {
              "description": "The igc-linear-progress indicator warning state.",
              "name": "warning"
            },
            {
              "description": "The igc-linear-progress indicator info state.",
              "name": "info"
            },
            {
              "description": "The igc-linear-progress indicator success state.",
              "name": "success"
            }
          ],
          "slots": [
            {
              "description": "The text area container.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-linear-progress'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "striped",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets the striped look of the control.",
              "attribute": "striped",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labelAlign",
              "type": {
                "text": "| 'top-start'\n    | 'top'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom'\n    | 'bottom-end'"
              },
              "privacy": "public",
              "default": "'top-start'",
              "description": "The position for the default label of the control.",
              "attribute": "label-align",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_ticker",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "assignedElements",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "progressIndicator",
              "type": {
                "text": "Element"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "percentage",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "progress",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "100",
              "description": "Maximum value of the control.",
              "attribute": "max",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The value of the control.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              },
              "privacy": "public",
              "default": "'primary'",
              "description": "The variant of the control.",
              "attribute": "variant",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "animationDuration",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "500",
              "description": "Animation duration in milliseconds.",
              "attribute": "animation-duration",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The indeterminate state of the control.",
              "attribute": "indeterminate",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Shows/hides the label of the control.",
              "attribute": "hide-label",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelFormat",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Format string for the default label of the control.\nPlaceholders:\n {0} - current value of the control.\n {1} - max value of the control.",
              "attribute": "label-format",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "indeterminateChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "maxChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "valueChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "previous",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateARIA",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setProgress",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "cancelAnimations",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "animateLabelTo",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabelFormat",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderDefaultSlot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabelText",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'progressbar'",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaValueMin",
              "type": {
                "text": "string"
              },
              "default": "'0'",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "striped",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the striped look of the control.",
              "fieldName": "striped",
              "attribute": "striped"
            },
            {
              "name": "label-align",
              "type": {
                "text": "| 'top-start'\n    | 'top'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom'\n    | 'bottom-end'"
              },
              "default": "'top-start'",
              "description": "The position for the default label of the control.",
              "fieldName": "labelAlign",
              "attribute": "label-align"
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Maximum value of the control.",
              "fieldName": "max",
              "attribute": "max",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The value of the control.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "variant",
              "type": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              },
              "default": "'primary'",
              "description": "The variant of the control.",
              "fieldName": "variant",
              "attribute": "variant",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "animation-duration",
              "type": {
                "text": "number"
              },
              "default": "500",
              "description": "Animation duration in milliseconds.",
              "fieldName": "animationDuration",
              "attribute": "animation-duration",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The indeterminate state of the control.",
              "fieldName": "indeterminate",
              "attribute": "indeterminate",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "hide-label",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows/hides the label of the control.",
              "fieldName": "hideLabel",
              "attribute": "hide-label",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "label-format",
              "type": {
                "text": "string"
              },
              "description": "Format string for the default label of the control.\nPlaceholders:\n {0} - current value of the control.\n {1} - max value of the control.",
              "fieldName": "labelFormat",
              "attribute": "label-format",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcProgressBaseComponent",
            "module": "/src/components/progress/base.js"
          },
          "tagName": "igc-linear-progress",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcLinearProgressComponent",
            "module": "src/components/progress/linear-progress.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio/radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcRadioComponent",
          "cssParts": [
            {
              "description": "The radio control base wrapper.",
              "name": "base"
            },
            {
              "description": "The radio control.",
              "name": "control"
            },
            {
              "description": "The radio control label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The radio label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-radio'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[\n    {\n      key: 'valueMissing',\n      message: messages.required,\n      isValid: () => {\n        const radios = this._radios;\n        const checked = this._checkedRadios;\n        return radios.some((radio) => radio.required)\n          ? checked.length > 0\n          : true;\n      },\n    },\n  ]",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "private",
              "default": "`radio-${IgcRadioComponent.increment()}`"
            },
            {
              "kind": "field",
              "name": "labelId",
              "privacy": "private",
              "default": "`radio-label-${this.inputId}`"
            },
            {
              "kind": "field",
              "name": "_kbFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_checked",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "Array<Node>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_tabIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_radios",
              "privacy": "private",
              "description": "Returns all radio elements from the group, that is having the same name property.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_siblings",
              "privacy": "private",
              "description": "All sibling radio elements of the one invoking the getter.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_active",
              "privacy": "private",
              "description": "All non-disabled radio elements from the group.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_checkedRadios",
              "privacy": "private",
              "description": "All checked radio elements from the group.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback.",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value attribute of the control.",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "privacy": "public",
              "description": "The checked state of the control.",
              "attribute": "checked",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "labelPosition",
              "type": {
                "text": "'before' | 'after'"
              },
              "privacy": "public",
              "default": "'after'",
              "description": "The label position of the radio control.",
              "attribute": "label-position",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "click",
              "privacy": "public",
              "description": "Simulates a click on the radio control."
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the radio control."
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the radio control."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateCheckedState",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateUncheckedState",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_resetTabIndexes",
              "privacy": "private",
              "description": "Called after a form reset callback to restore default keyboard navigation."
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "navigate",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "igcChange"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "igcFocus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "igcBlur"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "description": "The value attribute of the control.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "checked",
              "description": "The checked state of the control.",
              "fieldName": "checked",
              "attribute": "checked",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "label-position",
              "type": {
                "text": "'before' | 'after'"
              },
              "default": "'after'",
              "description": "The label position of the radio control.",
              "fieldName": "labelPosition",
              "attribute": "label-position"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "fieldName": "required",
              "attribute": "required",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedRequiredMixin",
              "module": "/src/components/common/mixins/form-associated-required.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-radio",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcRadioComponent",
            "module": "src/components/radio/radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio/utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getGroup",
          "parameters": [
            {
              "name": "member",
              "type": {
                "text": "IgcRadioComponent"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getGroup",
          "declaration": {
            "name": "getGroup",
            "module": "src/components/radio/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-group/radio-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The igc-radio-group component unifies one or more igc-radio buttons.",
          "name": "IgcRadioGroupComponent",
          "slots": [
            {
              "description": "Default slot",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-radio-group'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_name",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_radios",
              "type": {
                "text": "NodeListOf<IgcRadioComponent>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "alignment",
              "type": {
                "text": "'vertical' | 'horizontal'"
              },
              "privacy": "public",
              "default": "'vertical'",
              "description": "Alignment of the radio controls inside this group.",
              "attribute": "alignment",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "privacy": "public",
              "description": "Gets/Sets the name for all child igc-radio components.",
              "attribute": "name",
              "type": {
                "text": "string"
              },
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "Gets/Sets the checked igc-radio element that matches `value`",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "_setRadiosName",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setSelectedRadio",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'radiogroup'"
            }
          ],
          "attributes": [
            {
              "name": "alignment",
              "type": {
                "text": "'vertical' | 'horizontal'"
              },
              "default": "'vertical'",
              "description": "Alignment of the radio controls inside this group.",
              "fieldName": "alignment",
              "attribute": "alignment"
            },
            {
              "name": "name",
              "description": "Gets/Sets the name for all child igc-radio components.",
              "fieldName": "name",
              "attribute": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "value",
              "description": "Gets/Sets the checked igc-radio element that matches `value`",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-radio-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcRadioGroupComponent",
            "module": "src/components/radio-group/radio-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/rating/rating-symbol.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "\nUsed when a custom icon/symbol/element needs to be passed to the igc-rating component.",
          "name": "IgcRatingSymbolComponent",
          "cssParts": [
            {
              "description": "The symbol wrapping container.",
              "name": "symbol"
            },
            {
              "description": "The full symbol wrapping container.",
              "name": "full"
            },
            {
              "description": "The empty symbol wrapping container.",
              "name": "empty"
            }
          ],
          "slots": [
            {
              "description": "Default slot for projected full symbols/icons.",
              "name": ""
            },
            {
              "description": "Default slot for projected empty symbols/icons.",
              "name": "empty"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-rating-symbol'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-rating-symbol",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcRatingSymbolComponent",
            "module": "src/components/rating/rating-symbol.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/rating/rating.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Rating provides insight regarding others' opinions and experiences,\nand can allow the user to submit a rating of their own",
          "name": "IgcRatingComponent",
          "cssProperties": [
            {
              "description": "The size of the symbols.",
              "name": "--symbol-size"
            },
            {
              "description": "The color of the filled symbol.",
              "name": "--symbol-full-color"
            },
            {
              "description": "The color of the empty symbol.",
              "name": "--symbol-empty-color"
            },
            {
              "description": "The filter(s) used for the filled symbol.",
              "name": "--symbol-full-filter"
            },
            {
              "description": "The filter(s) used for the empty symbol.",
              "name": "--symbol-empty-filter"
            }
          ],
          "cssParts": [
            {
              "description": "The main wrapper which holds all of the rating elements.",
              "name": "base"
            },
            {
              "description": "The label part.",
              "name": "label"
            },
            {
              "description": "The value label part.",
              "name": "value-label"
            },
            {
              "description": "A wrapper for all rating symbols.",
              "name": "symbols"
            },
            {
              "description": "The part of the encapsulated default symbol.",
              "name": "symbol"
            },
            {
              "description": "The part of the encapsulated full symbols.",
              "name": "full"
            },
            {
              "description": "The part of the encapsulated empty symbols.",
              "name": "empty"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-rating'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "ratingSymbols",
              "type": {
                "text": "Array<IgcRatingSymbolComponent>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "container",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "valueLabel",
              "type": {
                "text": "Array<Node>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "hoverValue",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "-1"
            },
            {
              "kind": "field",
              "name": "hoverState",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isInteractive",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "hasProjectedSymbols",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "valueText",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "5",
              "description": "The maximum value for the rating.\n\nIf there are projected symbols, the maximum value will be resolved\nbased on the number of symbols.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "1",
              "description": "The minimum value change allowed.\n\nValid values are in the interval between 0 and 1 inclusive.",
              "attribute": "step"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label of the control.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "valueFormat",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A format string which sets aria-valuetext. Instances of '{0}' will be replaced\nwith the current value of the control and instances of '{1}' with the maximum value for the control.\n\nImportant for screen-readers and useful for localization.",
              "attribute": "value-format"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The current value of the component",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "hoverPreview",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets hover preview behavior for the component",
              "attribute": "hover-preview",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "privacy": "public",
              "description": "Sets the readonly state of the component",
              "deprecated": "since v4.4.0. Use the `readOnly` property instead."
            },
            {
              "kind": "field",
              "name": "single",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Toggles single selection visual mode.",
              "attribute": "single"
            },
            {
              "kind": "field",
              "name": "allowReset",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to reset the rating when the user selects the same value.",
              "attribute": "allow-reset",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleMaxChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleValueChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handlePrecisionChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleSelectionChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ clientX }",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseMove",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ clientX }",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitValueUpdate",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleHoverEnabled",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleHoverDisabled",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "calcNewValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "x",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getPrecision",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "num",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "round",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clipSymbol",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "isLTR",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "stepUp",
              "privacy": "public",
              "parameters": [
                {
                  "name": "n",
                  "default": "1"
                }
              ],
              "description": "Increments the value of the control by `n` steps multiplied by the\nstep factor."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "privacy": "public",
              "parameters": [
                {
                  "name": "n",
                  "default": "1"
                }
              ],
              "description": "Decrements the value of the control by `n` steps multiplied by\nthe step factor."
            },
            {
              "kind": "method",
              "name": "renderSymbols",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "clipProjected",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the value of the control changes.",
              "name": "igcChange"
            },
            {
              "description": "Emitted when hover is enabled and the user mouses over a symbol of the rating.",
              "name": "igcHover"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "5",
              "description": "The maximum value for the rating.\n\nIf there are projected symbols, the maximum value will be resolved\nbased on the number of symbols.",
              "fieldName": "max",
              "attribute": "max"
            },
            {
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The minimum value change allowed.\n\nValid values are in the interval between 0 and 1 inclusive.",
              "fieldName": "step",
              "attribute": "step"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label of the control.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "value-format",
              "type": {
                "text": "string"
              },
              "description": "A format string which sets aria-valuetext. Instances of '{0}' will be replaced\nwith the current value of the control and instances of '{1}' with the maximum value for the control.\n\nImportant for screen-readers and useful for localization.",
              "fieldName": "valueFormat",
              "attribute": "value-format"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current value of the component",
              "fieldName": "value",
              "attribute": "value"
            },
            {
              "name": "hover-preview",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets hover preview behavior for the component",
              "fieldName": "hoverPreview",
              "attribute": "hover-preview"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly"
            },
            {
              "name": "single",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles single selection visual mode.",
              "fieldName": "single",
              "attribute": "single"
            },
            {
              "name": "allow-reset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to reset the rating when the user selects the same value.",
              "fieldName": "allowReset",
              "attribute": "allow-reset"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedMixin",
              "module": "/src/components/common/mixins/form-associated.js"
            },
            {
              "name": "SizableMixin",
              "module": "/src/components/common/mixins/sizable.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-rating",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcRatingComponent",
            "module": "src/components/rating/rating.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ripple/ripple.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A ripple can be applied to an element to represent\ninteractive surface.",
          "name": "IgcRippleComponent",
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-ripple'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "handler",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getDimensions",
              "privacy": "private",
              "parameters": [
                {
                  "name": "x",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "y",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-ripple",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcRippleComponent",
            "module": "src/components/ripple/ripple.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcSelectGroupComponent",
          "cssParts": [
            {
              "description": "The native label element.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "Contains the group's label.",
              "name": "label"
            },
            {
              "description": "Intended to contain the items belonging to this group.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-select-group'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "controlledItems",
              "type": {
                "text": "Array<IgcSelectItemComponent>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "Array<IgcSelectItemComponent>"
              },
              "privacy": "public",
              "description": "All child `igc-select-item`s."
            },
            {
              "kind": "field",
              "name": "activeItems",
              "type": {
                "text": "Array<IgcSelectItemComponent>"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_observerCallback",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{\n    changes: { attributes },\n  }",
                  "type": {
                    "text": "MutationControllerParams<IgcSelectItemComponent>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the group item and all its children are disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "disabledChange",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'group'"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the group item and all its children are disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-select-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcSelectGroupComponent",
            "module": "src/components/select/select-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents a header item in an igc-select component.",
          "name": "IgcSelectHeaderComponent",
          "slots": [
            {
              "description": "Renders the header.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-select-header'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-select-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcSelectHeaderComponent",
            "module": "src/components/select/select-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents an item in a select list.",
          "name": "IgcSelectItemComponent",
          "cssParts": [
            {
              "description": "The prefix wrapper of the igc-select-item.",
              "name": "prefix"
            },
            {
              "description": "The main content wrapper of the igc-select-item.",
              "name": "content"
            },
            {
              "description": "The suffix wrapper of the igc-select-item.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "Renders the all content bar the prefix and suffix.",
              "name": ""
            },
            {
              "description": "Renders content before the main content area.",
              "name": "prefix"
            },
            {
              "description": "Renders content after the main content area.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-select-item'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "active",
              "privacy": "public",
              "description": "Whether the item is disabled.",
              "attribute": "active",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_active",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_content",
              "type": {
                "text": "Array<Element>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_contentSlotText",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "Whether the item is disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "privacy": "public",
              "description": "Whether the item is selected.",
              "attribute": "selected",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The current value of the item.\nIf not specified, the element's text content is used.",
              "attribute": "value",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'option'",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "active",
              "description": "Whether the item is disabled.",
              "fieldName": "active",
              "attribute": "active",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "name": "disabled",
              "description": "Whether the item is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "name": "selected",
              "description": "Whether the item is selected.",
              "fieldName": "selected",
              "attribute": "selected",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "name": "value",
              "description": "The current value of the item.\nIf not specified, the element's text content is used.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcBaseOptionLikeComponent",
            "module": "/src/components/common/mixins/option.js"
          },
          "tagName": "igc-select-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcSelectItemComponent",
            "module": "src/components/select/select-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents a control that provides a menu of options.",
          "name": "IgcSelectComponent",
          "cssParts": [
            {
              "description": "The list wrapping container for the items of the igc-select.",
              "name": "list"
            },
            {
              "description": "The encapsulated igc-input of the igc-select.",
              "name": "input"
            },
            {
              "description": "The encapsulated text label of the igc-select.",
              "name": "label"
            },
            {
              "description": "The prefix wrapper of the input of the igc-select.",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper of the input of the igc-select.",
              "name": "suffix"
            },
            {
              "description": "The toggle icon wrapper of the igc-select.",
              "name": "toggle-icon"
            },
            {
              "description": "The helper text wrapper of the igc-select.",
              "name": "helper-text"
            }
          ],
          "slots": [
            {
              "description": "Renders the list of select items.",
              "name": ""
            },
            {
              "description": "Renders content before the input.",
              "name": "prefix"
            },
            {
              "description": "Renders content after input.",
              "name": "suffix"
            },
            {
              "description": "Renders a container before the list of options.",
              "name": "header"
            },
            {
              "description": "Renders a container after the list of options.",
              "name": "footer"
            },
            {
              "description": "Renders content below the input.",
              "name": "helper-text"
            },
            {
              "description": "Renders content inside the suffix container.",
              "name": "toggle-icon"
            },
            {
              "description": "Renders content for the toggle icon when the component is in open state.",
              "name": "toggle-icon-expanded"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-select'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "[themeSymbol]",
              "type": {
                "text": "Theme"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_searchTerm",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_lastKeyTime",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_rootClickController",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_rootScrollController",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isMaterialTheme",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_activeItems",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_selectedItem",
              "type": {
                "text": "IgcSelectItemComponent | null"
              },
              "privacy": "protected",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_activeItem",
              "type": {
                "text": "IgcSelectItemComponent"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[requiredValidator]",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "IgcInputComponent"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "inputSuffix",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "inputPrefix",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_expandedIconSlot",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "hasExpandedIcon",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "hasPrefixes",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "hasSuffixes",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "hasHelperText",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The value attribute of the control.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The outlined attribute of the control.",
              "attribute": "outlined",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The autofocus attribute of the control.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The distance of the select dropdown from its input.",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label attribute of the control.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'"
              },
              "privacy": "public",
              "default": "'bottom-start'",
              "description": "The preferred placement of the select dropdown around its input.",
              "attribute": "placement"
            },
            {
              "kind": "field",
              "name": "scrollStrategy",
              "type": {
                "text": "'scroll' | 'block' | 'close'"
              },
              "privacy": "public",
              "default": "'scroll'",
              "description": "Determines the behavior of the component during scrolling of the parent container.",
              "attribute": "scroll-strategy"
            },
            {
              "kind": "field",
              "name": "items",
              "privacy": "public",
              "description": "Returns the items of the igc-select component.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "groups",
              "privacy": "public",
              "description": "Returns the groups of the igc-select component.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectedItem",
              "privacy": "public",
              "description": "Returns the selected item from the dropdown or null.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "scrollStrategyChanged",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "openChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleFocusIn",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ relatedTarget }",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocusOut",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ relatedTarget }",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcSelectItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSearch",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleAnchorClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "onEnterKey",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onSpaceBarKey",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onArrowDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onArrowUp",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "altArrowDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "altArrowUp",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onEscapeKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "onTabKey",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onHomeKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "onEndKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "inputSlotChanged",
              "privacy": "protected",
              "description": "Monitor input slot changes and request update"
            },
            {
              "kind": "method",
              "name": "activateItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcSelectItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSelectedItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcSelectItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_selectItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "IgcSelectItemComponent"
                  }
                },
                {
                  "name": "emit",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_navigateToActiveItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "IgcSelectItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clearSelectedItem",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focusItemOnOpen",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_stopPropagation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the component."
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the component."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks the validity of the control and moves the focus to it if it is not valid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcSelectItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Navigates to the item with the specified value. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcSelectItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Navigates to the item at the specified index. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcSelectItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | number"
                  }
                }
              ],
              "description": "Navigates to the specified item. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcSelectItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Selects the item with the specified value. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcSelectItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Selects the item at the specified index. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcSelectItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | number"
                  }
                }
              ],
              "description": "Selects the specified item. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "clearSelection",
              "privacy": "public",
              "description": "Resets the current value and selection of the component."
            },
            {
              "kind": "method",
              "name": "renderInputSlots",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderToggleIcon",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderHelperText",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderInputAnchor",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderDropdown",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "type": {
                "text": "<\n    K extends keyof IgcBaseComboBoxEventMap,\n    D extends UnpackCustomEvent<IgcBaseComboBoxEventMap[K]>,\n  >(\n    event: K,\n    eventInitDict?: CustomEventInit<D>\n  ) => boolean"
              },
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpenOnSelect",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "attribute": "keep-open-on-select",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpenOnOutsideClick",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "attribute": "keep-open-on-outside-click",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets the open state of the component.",
              "attribute": "open",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitClosing",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitClosed",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitOpening",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitOpened",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_hide",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_show",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "description": "Shows the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "description": "Hides the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "description": "Toggles the open state of the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the select gains focus.",
              "name": "igcFocus"
            },
            {
              "description": "Emitted when the select loses focus.",
              "name": "igcBlur"
            },
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "igcChange"
            },
            {
              "description": "Emitted just before the list of options is opened.",
              "name": "igcOpening"
            },
            {
              "description": "Emitted after the list of options is opened.",
              "name": "igcOpened"
            },
            {
              "description": "Emitter just before the list of options is closed.",
              "name": "igcClosing"
            },
            {
              "description": "Emitted after the list of options is closed.",
              "name": "igcClosed"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value attribute of the control.",
              "fieldName": "value",
              "attribute": "value"
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The outlined attribute of the control.",
              "fieldName": "outlined",
              "attribute": "outlined"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "The autofocus attribute of the control.",
              "fieldName": "autofocus",
              "attribute": "autofocus"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance of the select dropdown from its input.",
              "fieldName": "distance",
              "attribute": "distance"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label attribute of the control.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder"
            },
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'"
              },
              "default": "'bottom-start'",
              "description": "The preferred placement of the select dropdown around its input.",
              "fieldName": "placement",
              "attribute": "placement"
            },
            {
              "name": "scroll-strategy",
              "type": {
                "text": "'scroll' | 'block' | 'close'"
              },
              "default": "'scroll'",
              "description": "Determines the behavior of the component during scrolling of the parent container.",
              "fieldName": "scrollStrategy",
              "attribute": "scroll-strategy"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "fieldName": "required",
              "attribute": "required",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "keep-open-on-select",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "fieldName": "keepOpenOnSelect",
              "attribute": "keep-open-on-select",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "name": "keep-open-on-outside-click",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "fieldName": "keepOpenOnOutsideClick",
              "attribute": "keep-open-on-outside-click",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the open state of the component.",
              "fieldName": "open",
              "attribute": "open",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedRequiredMixin",
              "module": "/src/components/common/mixins/form-associated-required.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcBaseComboBoxLikeComponent",
            "module": "/src/components/common/mixins/combo-box.js"
          },
          "tagName": "igc-select",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcSelectComponent",
            "module": "src/components/select/select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/range-slider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A range slider component used to select two numeric values within a range.",
          "name": "IgcRangeSliderComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the slider.",
              "name": "base"
            },
            {
              "description": "The ticks container.",
              "name": "ticks"
            },
            {
              "description": "The tick group container.",
              "name": "tick-group"
            },
            {
              "description": "The tick element.",
              "name": "tick"
            },
            {
              "description": "The tick label element.",
              "name": "tick-label"
            },
            {
              "description": "The inner element of the tick label.",
              "name": "tick-label-inner"
            },
            {
              "description": "The thumbs container.",
              "name": "thumbs"
            },
            {
              "description": "The thumb element.",
              "name": "thumb"
            },
            {
              "description": "The thumb tooltip label container.",
              "name": "thumb-label"
            },
            {
              "description": "The thumb tooltip label inner element.",
              "name": "thumb-label-inner"
            },
            {
              "description": "The track container.",
              "name": "track"
            },
            {
              "description": "The track steps element.",
              "name": "steps"
            },
            {
              "description": "The inactive element of the track.",
              "name": "inactive"
            },
            {
              "description": "The filled part of the track.",
              "name": "fill"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-range-slider'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "thumbFrom",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "thumbTo",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_lower",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_upper",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "lower",
              "privacy": "public",
              "description": "The current value of the lower thumb.",
              "attribute": "lower",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "upper",
              "privacy": "public",
              "description": "The current value of the upper thumb.",
              "attribute": "upper",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "thumbLabelLower",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The aria label for the lower thumb.",
              "attribute": "thumb-label-lower"
            },
            {
              "kind": "field",
              "name": "thumbLabelUpper",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The aria label for the upper thumb.",
              "attribute": "thumb-label-upper"
            },
            {
              "kind": "field",
              "name": "ariaLabelLower",
              "privacy": "public",
              "description": "The aria label of the lower thumb.",
              "deprecated": "since v4.8.0. Use the `thumbLabelLower` property instead.",
              "attribute": "aria-label-lower"
            },
            {
              "kind": "field",
              "name": "ariaLabelUpper",
              "privacy": "public",
              "description": "The aria label of the upper thumb.",
              "deprecated": "since v4.8.0. Use the `thumbLabelUpper` property instead.",
              "attribute": "aria-label-upper"
            },
            {
              "kind": "field",
              "name": "activeValue",
              "privacy": "protected",
              "readonly": true,
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizeValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTrackStyle",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "StyleInfo"
                }
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "closestTo",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "goal",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "positions",
                  "type": {
                    "text": "number[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "closestHandle",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "increment",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitInputEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitChangeEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleActiveThumb",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderThumb",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "ariaLabel",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "thumbId",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderThumbs",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "field",
              "name": "thumb",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "base",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_min",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_max",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "100",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lowerBound",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_upperBound",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_step",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "1",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "startValue",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "pointerCaptured",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "thumbHoverTimer",
              "type": {
                "text": "any"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeThumb",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "thumbLabelsVisible",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "string[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasLabels",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "distance",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "privacy": "public",
              "description": "The minimum value of the slider scale. Defaults to 0.\n\nIf `min` is greater than `max` the call is a no-op.\n\nIf `labels` are provided (projected), then `min` is always set to 0.\n\nIf `lowerBound` ends up being less than than the current `min` value,\nit is automatically assigned the new `min` value.",
              "attribute": "min",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "privacy": "public",
              "description": "The maximum value of the slider scale. Defaults to 100.\n\nIf `max` is less than `min` the call is a no-op.\n\nIf `labels` are provided (projected), then `max` is always set to\nthe number of labels.\n\nIf `upperBound` ends up being greater than than the current `max` value,\nit is automatically assigned the new `max` value.",
              "attribute": "max",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lowerBound",
              "privacy": "public",
              "description": "The lower bound of the slider value. If not set, the `min` value is applied.",
              "attribute": "lower-bound",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "upperBound",
              "privacy": "public",
              "description": "The upper bound of the slider value. If not set, the `max` value is applied.",
              "attribute": "upper-bound",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Disables the UI interactions of the slider.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "discreteTrack",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Marks the slider track as discrete so it displays the steps.\nIf the `step` is 0, the slider will remain continuos even if `discreteTrack` is `true`.",
              "attribute": "discrete-track",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideTooltip",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the thumb tooltip.",
              "attribute": "hide-tooltip",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "step",
              "privacy": "public",
              "description": "Specifies the granularity that the value must adhere to.\n\nIf set to 0 no stepping is implied and any value in the range is allowed.\nIf `labels` are provided (projected) then the step is always assumed to be 1 since it is a discrete slider.",
              "attribute": "step",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryTicks",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The number of primary ticks. It defaults to 0 which means no primary ticks are displayed.",
              "attribute": "primary-ticks",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "secondaryTicks",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The number of secondary ticks. It defaults to 0 which means no secondary ticks are displayed.",
              "attribute": "secondary-ticks",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "tickOrientation",
              "type": {
                "text": "'mirror' | 'start' | 'end'"
              },
              "privacy": "public",
              "default": "'end'",
              "description": "Changes the orientation of the ticks.",
              "attribute": "tick-orientation",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hidePrimaryLabels",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the primary tick labels.",
              "attribute": "hide-primary-labels",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideSecondaryLabels",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the secondary tick labels.",
              "attribute": "hide-secondary-labels",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "The locale used to format the thumb and tick label values in the slider.",
              "attribute": "locale",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueFormat",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "String format used for the thumb and tick label values in the slider.",
              "attribute": "value-format",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueFormatOptions",
              "type": {
                "text": "Intl.NumberFormatOptions | undefined"
              },
              "privacy": "public",
              "description": "Number format options used for the thumb and tick label values in the slider.",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "tickLabelRotation",
              "type": {
                "text": "0 | 90 | -90"
              },
              "privacy": "public",
              "default": "0",
              "description": "The degrees for the rotation of the tick labels. Defaults to 0.",
              "attribute": "tick-label-rotation",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "constraintsChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleArrowKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handlePageKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeyboardIncrement",
              "privacy": "private",
              "parameters": [
                {
                  "name": "increment",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeyUp",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formatValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizeByStep",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "totalTickCount",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "tickValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "isPrimary",
              "privacy": "private",
              "parameters": [
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "showThumbLabels",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "hideThumbLabels",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "calculateTrackUpdate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "mouseX",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSlider",
              "privacy": "private",
              "parameters": [
                {
                  "name": "mouseX",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "pointerDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "pointerMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "lostPointerCapture",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleThumbFocus",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleThumbBlur",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderTicks",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderTicks",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSteps",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when a value is changed via thumb drag or keyboard interaction.",
              "name": "igcInput"
            },
            {
              "description": "Emitted when a value change is committed on a thumb drag end or keyboard interaction.",
              "name": "igcChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "lower",
              "description": "The current value of the lower thumb.",
              "fieldName": "lower",
              "attribute": "lower",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "upper",
              "description": "The current value of the upper thumb.",
              "fieldName": "upper",
              "attribute": "upper",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "thumb-label-lower",
              "type": {
                "text": "string"
              },
              "description": "The aria label for the lower thumb.",
              "fieldName": "thumbLabelLower",
              "attribute": "thumb-label-lower"
            },
            {
              "name": "thumb-label-upper",
              "type": {
                "text": "string"
              },
              "description": "The aria label for the upper thumb.",
              "fieldName": "thumbLabelUpper",
              "attribute": "thumb-label-upper"
            },
            {
              "name": "aria-label-lower",
              "description": "The aria label of the lower thumb.",
              "deprecated": "since v4.8.0. Use the `thumbLabelLower` property instead.",
              "fieldName": "ariaLabelLower",
              "attribute": "aria-label-lower"
            },
            {
              "name": "aria-label-upper",
              "description": "The aria label of the upper thumb.",
              "deprecated": "since v4.8.0. Use the `thumbLabelUpper` property instead.",
              "fieldName": "ariaLabelUpper",
              "attribute": "aria-label-upper"
            },
            {
              "name": "min",
              "description": "The minimum value of the slider scale. Defaults to 0.\n\nIf `min` is greater than `max` the call is a no-op.\n\nIf `labels` are provided (projected), then `min` is always set to 0.\n\nIf `lowerBound` ends up being less than than the current `min` value,\nit is automatically assigned the new `min` value.",
              "fieldName": "min",
              "attribute": "min",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "max",
              "description": "The maximum value of the slider scale. Defaults to 100.\n\nIf `max` is less than `min` the call is a no-op.\n\nIf `labels` are provided (projected), then `max` is always set to\nthe number of labels.\n\nIf `upperBound` ends up being greater than than the current `max` value,\nit is automatically assigned the new `max` value.",
              "fieldName": "max",
              "attribute": "max",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "lower-bound",
              "description": "The lower bound of the slider value. If not set, the `min` value is applied.",
              "fieldName": "lowerBound",
              "attribute": "lower-bound",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "upper-bound",
              "description": "The upper bound of the slider value. If not set, the `max` value is applied.",
              "fieldName": "upperBound",
              "attribute": "upper-bound",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the UI interactions of the slider.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "discrete-track",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Marks the slider track as discrete so it displays the steps.\nIf the `step` is 0, the slider will remain continuos even if `discreteTrack` is `true`.",
              "fieldName": "discreteTrack",
              "attribute": "discrete-track",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "hide-tooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the thumb tooltip.",
              "fieldName": "hideTooltip",
              "attribute": "hide-tooltip",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "step",
              "description": "Specifies the granularity that the value must adhere to.\n\nIf set to 0 no stepping is implied and any value in the range is allowed.\nIf `labels` are provided (projected) then the step is always assumed to be 1 since it is a discrete slider.",
              "fieldName": "step",
              "attribute": "step",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "primary-ticks",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of primary ticks. It defaults to 0 which means no primary ticks are displayed.",
              "fieldName": "primaryTicks",
              "attribute": "primary-ticks",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "secondary-ticks",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of secondary ticks. It defaults to 0 which means no secondary ticks are displayed.",
              "fieldName": "secondaryTicks",
              "attribute": "secondary-ticks",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "tick-orientation",
              "type": {
                "text": "'mirror' | 'start' | 'end'"
              },
              "default": "'end'",
              "description": "Changes the orientation of the ticks.",
              "fieldName": "tickOrientation",
              "attribute": "tick-orientation",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "hide-primary-labels",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the primary tick labels.",
              "fieldName": "hidePrimaryLabels",
              "attribute": "hide-primary-labels",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "hide-secondary-labels",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the secondary tick labels.",
              "fieldName": "hideSecondaryLabels",
              "attribute": "hide-secondary-labels",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "The locale used to format the thumb and tick label values in the slider.",
              "fieldName": "locale",
              "attribute": "locale",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "value-format",
              "type": {
                "text": "string | undefined"
              },
              "description": "String format used for the thumb and tick label values in the slider.",
              "fieldName": "valueFormat",
              "attribute": "value-format",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "tick-label-rotation",
              "type": {
                "text": "0 | 90 | -90"
              },
              "default": "0",
              "description": "The degrees for the rotation of the tick labels. Defaults to 0.",
              "fieldName": "tickLabelRotation",
              "attribute": "tick-label-rotation",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcSliderBaseComponent",
            "module": "/src/components/slider/slider-base.js"
          },
          "tagName": "igc-range-slider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcRangeSliderComponent",
            "module": "src/components/slider/range-slider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider-base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcSliderBaseComponent",
          "members": [
            {
              "kind": "field",
              "name": "thumb",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "base",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "labelElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_min",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_max",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "100"
            },
            {
              "kind": "field",
              "name": "_lowerBound",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_upperBound",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_step",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "1"
            },
            {
              "kind": "field",
              "name": "startValue",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "pointerCaptured",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "thumbHoverTimer",
              "type": {
                "text": "any"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "activeThumb",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "thumbLabelsVisible",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "string[]"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "hasLabels",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "distance",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "min",
              "privacy": "public",
              "description": "The minimum value of the slider scale. Defaults to 0.\n\nIf `min` is greater than `max` the call is a no-op.\n\nIf `labels` are provided (projected), then `min` is always set to 0.\n\nIf `lowerBound` ends up being less than than the current `min` value,\nit is automatically assigned the new `min` value.",
              "attribute": "min",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "privacy": "public",
              "description": "The maximum value of the slider scale. Defaults to 100.\n\nIf `max` is less than `min` the call is a no-op.\n\nIf `labels` are provided (projected), then `max` is always set to\nthe number of labels.\n\nIf `upperBound` ends up being greater than than the current `max` value,\nit is automatically assigned the new `max` value.",
              "attribute": "max",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "lowerBound",
              "privacy": "public",
              "description": "The lower bound of the slider value. If not set, the `min` value is applied.",
              "attribute": "lower-bound",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "upperBound",
              "privacy": "public",
              "description": "The upper bound of the slider value. If not set, the `max` value is applied.",
              "attribute": "upper-bound",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Disables the UI interactions of the slider.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "discreteTrack",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Marks the slider track as discrete so it displays the steps.\nIf the `step` is 0, the slider will remain continuos even if `discreteTrack` is `true`.",
              "attribute": "discrete-track"
            },
            {
              "kind": "field",
              "name": "hideTooltip",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the thumb tooltip.",
              "attribute": "hide-tooltip"
            },
            {
              "kind": "field",
              "name": "step",
              "privacy": "public",
              "description": "Specifies the granularity that the value must adhere to.\n\nIf set to 0 no stepping is implied and any value in the range is allowed.\nIf `labels` are provided (projected) then the step is always assumed to be 1 since it is a discrete slider.",
              "attribute": "step",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "primaryTicks",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The number of primary ticks. It defaults to 0 which means no primary ticks are displayed.",
              "attribute": "primary-ticks"
            },
            {
              "kind": "field",
              "name": "secondaryTicks",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The number of secondary ticks. It defaults to 0 which means no secondary ticks are displayed.",
              "attribute": "secondary-ticks"
            },
            {
              "kind": "field",
              "name": "tickOrientation",
              "type": {
                "text": "'mirror' | 'start' | 'end'"
              },
              "privacy": "public",
              "default": "'end'",
              "description": "Changes the orientation of the ticks.",
              "attribute": "tick-orientation"
            },
            {
              "kind": "field",
              "name": "hidePrimaryLabels",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the primary tick labels.",
              "attribute": "hide-primary-labels"
            },
            {
              "kind": "field",
              "name": "hideSecondaryLabels",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the secondary tick labels.",
              "attribute": "hide-secondary-labels"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "The locale used to format the thumb and tick label values in the slider.",
              "attribute": "locale"
            },
            {
              "kind": "field",
              "name": "valueFormat",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "String format used for the thumb and tick label values in the slider.",
              "attribute": "value-format"
            },
            {
              "kind": "field",
              "name": "valueFormatOptions",
              "type": {
                "text": "Intl.NumberFormatOptions | undefined"
              },
              "privacy": "public",
              "description": "Number format options used for the thumb and tick label values in the slider."
            },
            {
              "kind": "field",
              "name": "tickLabelRotation",
              "type": {
                "text": "0 | 90 | -90"
              },
              "privacy": "public",
              "default": "0",
              "description": "The degrees for the rotation of the tick labels. Defaults to 0.",
              "attribute": "tick-label-rotation",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "constraintsChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleArrowKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePageKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyboardIncrement",
              "privacy": "private",
              "parameters": [
                {
                  "name": "increment",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyUp",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "activeValue",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "normalizeValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "getTrackStyle",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "StyleInfo"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "_increment",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderThumbs",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "emitInputEvent",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "emitChangeEvent",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "validateValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formatValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "normalizeByStep",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "closestHandle",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "totalTickCount",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "tickValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isPrimary",
              "privacy": "private",
              "parameters": [
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "showThumbLabels",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "hideThumbLabels",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "calculateTrackUpdate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "mouseX",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateSlider",
              "privacy": "private",
              "parameters": [
                {
                  "name": "mouseX",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "pointerDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "pointerMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "lostPointerCapture",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleThumbFocus",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleThumbBlur",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_renderTicks",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderTicks",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderThumb",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "ariaLabel",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "thumbId",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderSteps",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "min",
              "description": "The minimum value of the slider scale. Defaults to 0.\n\nIf `min` is greater than `max` the call is a no-op.\n\nIf `labels` are provided (projected), then `min` is always set to 0.\n\nIf `lowerBound` ends up being less than than the current `min` value,\nit is automatically assigned the new `min` value.",
              "fieldName": "min",
              "attribute": "min",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "max",
              "description": "The maximum value of the slider scale. Defaults to 100.\n\nIf `max` is less than `min` the call is a no-op.\n\nIf `labels` are provided (projected), then `max` is always set to\nthe number of labels.\n\nIf `upperBound` ends up being greater than than the current `max` value,\nit is automatically assigned the new `max` value.",
              "fieldName": "max",
              "attribute": "max",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "lower-bound",
              "description": "The lower bound of the slider value. If not set, the `min` value is applied.",
              "fieldName": "lowerBound",
              "attribute": "lower-bound",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "upper-bound",
              "description": "The upper bound of the slider value. If not set, the `max` value is applied.",
              "fieldName": "upperBound",
              "attribute": "upper-bound",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the UI interactions of the slider.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "discrete-track",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Marks the slider track as discrete so it displays the steps.\nIf the `step` is 0, the slider will remain continuos even if `discreteTrack` is `true`.",
              "fieldName": "discreteTrack",
              "attribute": "discrete-track"
            },
            {
              "name": "hide-tooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the thumb tooltip.",
              "fieldName": "hideTooltip",
              "attribute": "hide-tooltip"
            },
            {
              "name": "step",
              "description": "Specifies the granularity that the value must adhere to.\n\nIf set to 0 no stepping is implied and any value in the range is allowed.\nIf `labels` are provided (projected) then the step is always assumed to be 1 since it is a discrete slider.",
              "fieldName": "step",
              "attribute": "step",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "primary-ticks",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of primary ticks. It defaults to 0 which means no primary ticks are displayed.",
              "fieldName": "primaryTicks",
              "attribute": "primary-ticks"
            },
            {
              "name": "secondary-ticks",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of secondary ticks. It defaults to 0 which means no secondary ticks are displayed.",
              "fieldName": "secondaryTicks",
              "attribute": "secondary-ticks"
            },
            {
              "name": "tick-orientation",
              "type": {
                "text": "'mirror' | 'start' | 'end'"
              },
              "default": "'end'",
              "description": "Changes the orientation of the ticks.",
              "fieldName": "tickOrientation",
              "attribute": "tick-orientation"
            },
            {
              "name": "hide-primary-labels",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the primary tick labels.",
              "fieldName": "hidePrimaryLabels",
              "attribute": "hide-primary-labels"
            },
            {
              "name": "hide-secondary-labels",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the secondary tick labels.",
              "fieldName": "hideSecondaryLabels",
              "attribute": "hide-secondary-labels"
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "The locale used to format the thumb and tick label values in the slider.",
              "fieldName": "locale",
              "attribute": "locale"
            },
            {
              "name": "value-format",
              "type": {
                "text": "string | undefined"
              },
              "description": "String format used for the thumb and tick label values in the slider.",
              "fieldName": "valueFormat",
              "attribute": "value-format"
            },
            {
              "name": "tick-label-rotation",
              "type": {
                "text": "0 | 90 | -90"
              },
              "default": "0",
              "description": "The degrees for the rotation of the tick labels. Defaults to 0.",
              "fieldName": "tickLabelRotation",
              "attribute": "tick-label-rotation"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcSliderBaseComponent",
          "declaration": {
            "name": "IgcSliderBaseComponent",
            "module": "src/components/slider/slider-base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider-label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcSliderLabelComponent",
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-slider-label'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcSliderLabelComponent",
            "module": "src/components/slider/slider-label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A slider component used to select numeric value within a range.",
          "name": "IgcSliderComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the slider.",
              "name": "base"
            },
            {
              "description": "The ticks container.",
              "name": "ticks"
            },
            {
              "description": "The tick group container.",
              "name": "tick-group"
            },
            {
              "description": "The tick element.",
              "name": "tick"
            },
            {
              "description": "The tick label element.",
              "name": "tick-label"
            },
            {
              "description": "The inner element of the tick label.",
              "name": "tick-label-inner"
            },
            {
              "description": "The thumbs container.",
              "name": "thumbs"
            },
            {
              "description": "The thumb element.",
              "name": "thumb"
            },
            {
              "description": "The thumb tooltip label container.",
              "name": "thumb-label"
            },
            {
              "description": "The thumb tooltip label inner element.",
              "name": "thumb-label-inner"
            },
            {
              "description": "The track container.",
              "name": "track"
            },
            {
              "description": "The track steps element.",
              "name": "steps"
            },
            {
              "description": "The inactive element of the track.",
              "name": "inactive"
            },
            {
              "description": "The filled part of the track.",
              "name": "fill"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-slider'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The current value of the component.",
              "attribute": "value",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "activeValue",
              "privacy": "protected",
              "readonly": true,
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizeValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTrackStyle",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "StyleInfo"
                }
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "increment",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitInputEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitChangeEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "stepUp",
              "privacy": "public",
              "parameters": [
                {
                  "name": "stepIncrement",
                  "default": "1",
                  "description": "Optional step increment. If no parameter is passed, it defaults to 1."
                }
              ],
              "description": "Increments the value of the slider by `stepIncrement * step`, where `stepIncrement` defaults to 1."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "privacy": "public",
              "parameters": [
                {
                  "name": "stepDecrement",
                  "default": "1",
                  "description": "Optional step decrement. If no parameter is passed, it defaults to 1."
                }
              ],
              "description": "Decrements the value of the slider by `stepDecrement * step`, where `stepDecrement` defaults to 1."
            },
            {
              "kind": "method",
              "name": "renderThumbs",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The disabled state of the component",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "field",
              "name": "thumb",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "base",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_min",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_max",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "100",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lowerBound",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_upperBound",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_step",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "1",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "startValue",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "pointerCaptured",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "thumbHoverTimer",
              "type": {
                "text": "any"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeThumb",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "thumbLabelsVisible",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "string[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasLabels",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "distance",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "privacy": "public",
              "description": "The minimum value of the slider scale. Defaults to 0.\n\nIf `min` is greater than `max` the call is a no-op.\n\nIf `labels` are provided (projected), then `min` is always set to 0.\n\nIf `lowerBound` ends up being less than than the current `min` value,\nit is automatically assigned the new `min` value.",
              "attribute": "min",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "privacy": "public",
              "description": "The maximum value of the slider scale. Defaults to 100.\n\nIf `max` is less than `min` the call is a no-op.\n\nIf `labels` are provided (projected), then `max` is always set to\nthe number of labels.\n\nIf `upperBound` ends up being greater than than the current `max` value,\nit is automatically assigned the new `max` value.",
              "attribute": "max",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lowerBound",
              "privacy": "public",
              "description": "The lower bound of the slider value. If not set, the `min` value is applied.",
              "attribute": "lower-bound",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "upperBound",
              "privacy": "public",
              "description": "The upper bound of the slider value. If not set, the `max` value is applied.",
              "attribute": "upper-bound",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "discreteTrack",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Marks the slider track as discrete so it displays the steps.\nIf the `step` is 0, the slider will remain continuos even if `discreteTrack` is `true`.",
              "attribute": "discrete-track",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideTooltip",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the thumb tooltip.",
              "attribute": "hide-tooltip",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "step",
              "privacy": "public",
              "description": "Specifies the granularity that the value must adhere to.\n\nIf set to 0 no stepping is implied and any value in the range is allowed.\nIf `labels` are provided (projected) then the step is always assumed to be 1 since it is a discrete slider.",
              "attribute": "step",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryTicks",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The number of primary ticks. It defaults to 0 which means no primary ticks are displayed.",
              "attribute": "primary-ticks",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "secondaryTicks",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The number of secondary ticks. It defaults to 0 which means no secondary ticks are displayed.",
              "attribute": "secondary-ticks",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "tickOrientation",
              "type": {
                "text": "'mirror' | 'start' | 'end'"
              },
              "privacy": "public",
              "default": "'end'",
              "description": "Changes the orientation of the ticks.",
              "attribute": "tick-orientation",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hidePrimaryLabels",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the primary tick labels.",
              "attribute": "hide-primary-labels",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideSecondaryLabels",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the secondary tick labels.",
              "attribute": "hide-secondary-labels",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "The locale used to format the thumb and tick label values in the slider.",
              "attribute": "locale",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueFormat",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "String format used for the thumb and tick label values in the slider.",
              "attribute": "value-format",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueFormatOptions",
              "type": {
                "text": "Intl.NumberFormatOptions | undefined"
              },
              "privacy": "public",
              "description": "Number format options used for the thumb and tick label values in the slider.",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "tickLabelRotation",
              "type": {
                "text": "0 | 90 | -90"
              },
              "privacy": "public",
              "default": "0",
              "description": "The degrees for the rotation of the tick labels. Defaults to 0.",
              "attribute": "tick-label-rotation",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "constraintsChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleArrowKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handlePageKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeyboardIncrement",
              "privacy": "private",
              "parameters": [
                {
                  "name": "increment",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeyUp",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formatValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizeByStep",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "closestHandle",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "totalTickCount",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "tickValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "isPrimary",
              "privacy": "private",
              "parameters": [
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "showThumbLabels",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "hideThumbLabels",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "calculateTrackUpdate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "mouseX",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSlider",
              "privacy": "private",
              "parameters": [
                {
                  "name": "mouseX",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "pointerDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "pointerMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "lostPointerCapture",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleThumbFocus",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleThumbBlur",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderTicks",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderTicks",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderThumb",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "ariaLabel",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "thumbId",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSteps",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when a value is changed via thumb drag or keyboard interaction.",
              "name": "igcInput"
            },
            {
              "description": "Emitted when a value change is committed on a thumb drag end or keyboard interaction.",
              "name": "igcChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "description": "The current value of the component.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The disabled state of the component",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "min",
              "description": "The minimum value of the slider scale. Defaults to 0.\n\nIf `min` is greater than `max` the call is a no-op.\n\nIf `labels` are provided (projected), then `min` is always set to 0.\n\nIf `lowerBound` ends up being less than than the current `min` value,\nit is automatically assigned the new `min` value.",
              "fieldName": "min",
              "attribute": "min",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "max",
              "description": "The maximum value of the slider scale. Defaults to 100.\n\nIf `max` is less than `min` the call is a no-op.\n\nIf `labels` are provided (projected), then `max` is always set to\nthe number of labels.\n\nIf `upperBound` ends up being greater than than the current `max` value,\nit is automatically assigned the new `max` value.",
              "fieldName": "max",
              "attribute": "max",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "lower-bound",
              "description": "The lower bound of the slider value. If not set, the `min` value is applied.",
              "fieldName": "lowerBound",
              "attribute": "lower-bound",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "upper-bound",
              "description": "The upper bound of the slider value. If not set, the `max` value is applied.",
              "fieldName": "upperBound",
              "attribute": "upper-bound",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "discrete-track",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Marks the slider track as discrete so it displays the steps.\nIf the `step` is 0, the slider will remain continuos even if `discreteTrack` is `true`.",
              "fieldName": "discreteTrack",
              "attribute": "discrete-track",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "hide-tooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the thumb tooltip.",
              "fieldName": "hideTooltip",
              "attribute": "hide-tooltip",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "step",
              "description": "Specifies the granularity that the value must adhere to.\n\nIf set to 0 no stepping is implied and any value in the range is allowed.\nIf `labels` are provided (projected) then the step is always assumed to be 1 since it is a discrete slider.",
              "fieldName": "step",
              "attribute": "step",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "primary-ticks",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of primary ticks. It defaults to 0 which means no primary ticks are displayed.",
              "fieldName": "primaryTicks",
              "attribute": "primary-ticks",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "secondary-ticks",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of secondary ticks. It defaults to 0 which means no secondary ticks are displayed.",
              "fieldName": "secondaryTicks",
              "attribute": "secondary-ticks",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "tick-orientation",
              "type": {
                "text": "'mirror' | 'start' | 'end'"
              },
              "default": "'end'",
              "description": "Changes the orientation of the ticks.",
              "fieldName": "tickOrientation",
              "attribute": "tick-orientation",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "hide-primary-labels",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the primary tick labels.",
              "fieldName": "hidePrimaryLabels",
              "attribute": "hide-primary-labels",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "hide-secondary-labels",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the secondary tick labels.",
              "fieldName": "hideSecondaryLabels",
              "attribute": "hide-secondary-labels",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "The locale used to format the thumb and tick label values in the slider.",
              "fieldName": "locale",
              "attribute": "locale",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "value-format",
              "type": {
                "text": "string | undefined"
              },
              "description": "String format used for the thumb and tick label values in the slider.",
              "fieldName": "valueFormat",
              "attribute": "value-format",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "tick-label-rotation",
              "type": {
                "text": "0 | 90 | -90"
              },
              "default": "0",
              "description": "The degrees for the rotation of the tick labels. Defaults to 0.",
              "fieldName": "tickLabelRotation",
              "attribute": "tick-label-rotation",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedMixin",
              "module": "/src/components/common/mixins/form-associated.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcSliderBaseComponent",
            "module": "/src/components/slider/slider-base.js"
          },
          "tagName": "igc-slider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcSliderComponent",
            "module": "src/components/slider/slider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/snackbar/snackbar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A snackbar component is used to provide feedback about an operation\nby showing a brief message at the bottom of the screen.",
          "name": "IgcSnackbarComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the snackbar component.",
              "name": "base"
            },
            {
              "description": "The snackbar message.",
              "name": "message"
            },
            {
              "description": "The default snackbar action button.",
              "name": "action"
            },
            {
              "description": "The area holding the actions.",
              "name": "action-container"
            }
          ],
          "slots": [
            {
              "description": "Default slot to render the snackbar content.",
              "name": ""
            },
            {
              "description": "Renders the action part of the snackbar. Usually an interactive element (button)",
              "name": "action"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-snackbar'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "contentRef",
              "type": {
                "text": "Ref<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_animationPlayer",
              "type": {
                "text": "ReturnType<\n    typeof addAnimationController\n  >"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "actionText",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The snackbar action button.",
              "attribute": "action-text"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "_autoHideTimeout",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component is in shown state.",
              "attribute": "open",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "displayTime",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "4000",
              "description": "Determines the duration in ms in which the component will be visible.",
              "attribute": "display-time",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the component should close after the `displayTime` is over.",
              "attribute": "keep-open",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "'bottom' | 'middle' | 'top'"
              },
              "privacy": "public",
              "default": "'bottom'",
              "description": "Sets the position of the component in the viewport.",
              "attribute": "position",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "displayTimeChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "keepOpenChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleAnimation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "'open' | 'close'"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "setAutoHideTimer",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "description": "Opens the component.",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "description": "Closes the component.",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "description": "Toggles the open state of the component.",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'status'",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLive",
              "type": {
                "text": "string"
              },
              "default": "'polite'",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the snackbar action button is clicked.",
              "name": "igcAction"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "action-text",
              "type": {
                "text": "string"
              },
              "description": "The snackbar action button.",
              "fieldName": "actionText",
              "attribute": "action-text"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component is in shown state.",
              "fieldName": "open",
              "attribute": "open",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "name": "display-time",
              "type": {
                "text": "number"
              },
              "default": "4000",
              "description": "Determines the duration in ms in which the component will be visible.",
              "fieldName": "displayTime",
              "attribute": "display-time",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "name": "keep-open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the component should close after the `displayTime` is over.",
              "fieldName": "keepOpen",
              "attribute": "keep-open",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "name": "position",
              "type": {
                "text": "'bottom' | 'middle' | 'top'"
              },
              "default": "'bottom'",
              "description": "Sets the position of the component in the viewport.",
              "fieldName": "position",
              "attribute": "position",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcBaseAlertLikeComponent",
            "module": "/src/components/common/mixins/alert.js"
          },
          "tagName": "igc-snackbar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcSnackbarComponent",
            "module": "src/components/snackbar/snackbar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stepper/animations.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "bodyAnimations",
          "default": "new Map(\n  Object.entries({\n    grow: animationPair({\n      in: growVerIn,\n      out: growVerOut,\n    }),\n    fade: animationPair({\n      in: noopAnimation,\n      out: noopAnimation,\n    }),\n    slide: animationPair({\n      in: slideInHor,\n      out: slideOutHor,\n    }),\n    none: animationPair({\n      in: noopAnimation,\n      out: noopAnimation,\n    }),\n  })\n)"
        },
        {
          "kind": "variable",
          "name": "contentAnimations",
          "default": "new Map(\n  Object.entries({\n    grow: animationPair({\n      in: fadeIn,\n      out: fadeOut,\n    }),\n    fade: animationPair({\n      in: fadeIn,\n      out: fadeOut,\n    }),\n    slide: animationPair({\n      in: fadeIn,\n      out: fadeOut,\n    }),\n    none: animationPair({\n      in: noopAnimation,\n      out: noopAnimation,\n    }),\n  })\n)"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "bodyAnimations",
          "declaration": {
            "name": "bodyAnimations",
            "module": "src/components/stepper/animations.ts"
          }
        },
        {
          "kind": "js",
          "name": "contentAnimations",
          "declaration": {
            "name": "contentAnimations",
            "module": "src/components/stepper/animations.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stepper/step.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The step component is used within the `igc-stepper` element and it holds the content of each step.\nIt also supports custom indicators, title and subtitle.",
          "name": "IgcStepComponent",
          "cssParts": [
            {
              "description": "Wrapper of the step's `header` and its separators.",
              "name": "header-container"
            },
            {
              "description": "Indicates a disabled state. Applies to `header-container`.",
              "name": "disabled"
            },
            {
              "description": "Indicates a complete state of the current step. Applies to `header-container`.",
              "name": "complete-start"
            },
            {
              "description": "Indicates a complete state of the previous step. Applies to `header-container`.",
              "name": "complete-end"
            },
            {
              "description": "Indicates an optional state. Applies to `header-container`.",
              "name": "optional"
            },
            {
              "description": "Indicates an invalid state. Applies to `header-container`.",
              "name": "invalid"
            },
            {
              "description": "Indicates that the title should be above the indicator. Applies to `header-container`.",
              "name": "top"
            },
            {
              "description": "Indicates that the title should be below the indicator. Applies to `header-container`.",
              "name": "bottom"
            },
            {
              "description": "Indicates that the title should be before the indicator. Applies to `header-container`.",
              "name": "start"
            },
            {
              "description": "Indicates that the title should be after the indicator. Applies to `header-container`.",
              "name": "end"
            },
            {
              "description": "Wrapper of the step's `indicator` and `text`.",
              "name": "header"
            },
            {
              "description": "The indicator of the step.",
              "name": "indicator"
            },
            {
              "description": "Wrapper of the step's `title` and `subtitle`.",
              "name": "text"
            },
            {
              "description": "Indicates that no title and subtitle has been provided to the step. Applies to `text`.",
              "name": "empty"
            },
            {
              "description": "The title of the step.",
              "name": "title"
            },
            {
              "description": "The subtitle of the step.",
              "name": "subtitle"
            },
            {
              "description": "Wrapper of the step's `content`.",
              "name": "body"
            },
            {
              "description": "The steps `content`.",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "Renders the content of the step.",
              "name": ""
            },
            {
              "description": "Renders the indicator of the step. By default, it displays the step index + 1.",
              "name": "indicator"
            },
            {
              "description": "Renders the title of the step.",
              "name": "title"
            },
            {
              "description": "Renders the subtitle of the step.",
              "name": "subtitle"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-step'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "bodyRef",
              "type": {
                "text": "Ref<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "contentRef",
              "type": {
                "text": "Ref<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "bodyAnimationPlayer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "contentAnimationPlayer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_titleChildren",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_subTitleChildren",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "contentBody",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Gets/sets whether the step is invalid.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Gets/sets whether the step is activе.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "optional",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Gets/sets whether the step is optional.",
              "attribute": "optional"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Gets/sets whether the step is interactable.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "complete",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Gets/sets whether the step is completed.",
              "attribute": "complete",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "animation",
              "type": {
                "text": "Animation"
              },
              "privacy": "private",
              "default": "'fade'"
            },
            {
              "kind": "method",
              "name": "toggleAnimation",
              "privacy": "public",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "'in' | 'out'"
                  }
                },
                {
                  "name": "direction",
                  "default": "'normal'",
                  "type": {
                    "text": "'normal' | 'reverse'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "activeChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "disabledInvalidOptionalChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "completeChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "headerContainerParts",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "textParts",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "renderIndicator",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderTitleAndSubtitle",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected"
            }
          ],
          "events": [
            {
              "name": "stepActiveChanged",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "stepDisabledInvalidChanged",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "stepCompleteChanged",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "stepHeaderKeydown",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets/sets whether the step is invalid.",
              "fieldName": "invalid"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets/sets whether the step is activе.",
              "fieldName": "active"
            },
            {
              "name": "optional",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets/sets whether the step is optional.",
              "fieldName": "optional"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets/sets whether the step is interactable.",
              "fieldName": "disabled"
            },
            {
              "name": "complete",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets/sets whether the step is completed.",
              "fieldName": "complete"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-step",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcStepComponent",
            "module": "src/components/stepper/step.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stepper/stepper.common.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stepper/stepper.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IgxStepper provides a wizard-like workflow by dividing content into logical steps.",
          "name": "IgcStepperComponent",
          "slots": [
            {
              "description": "Renders the step components inside default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-stepper'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "keyDownHandlers",
              "type": {
                "text": "Map<string, Function>"
              },
              "privacy": "private",
              "readonly": true,
              "default": "new Map(\n    Object.entries({\n      Enter: this.activateStep,\n      Space: this.activateStep,\n      SpaceBar: this.activateStep,\n      ' ': this.activateStep,\n      ArrowUp: this.onArrowUpKeyDown,\n      ArrowDown: this.onArrowDownKeyDown,\n      ArrowLeft: this.onArrowLeftKeyDown,\n      ArrowRight: this.onArrowRightKeyDown,\n      Home: this.onHomeKey,\n      End: this.onEndKey,\n    })\n  )"
            },
            {
              "kind": "field",
              "name": "activeStep",
              "type": {
                "text": "IgcStepComponent"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "steps",
              "type": {
                "text": "Array<IgcStepComponent>"
              },
              "privacy": "public",
              "description": "Returns all of the stepper's steps."
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "privacy": "public",
              "default": "'horizontal'",
              "description": "Gets/Sets the orientation of the stepper.",
              "attribute": "orientation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "stepType",
              "type": {
                "text": "'indicator' | 'title' | 'full'"
              },
              "privacy": "public",
              "default": "'full'",
              "description": "Get/Set the type of the steps.",
              "attribute": "step-type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "linear",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Get/Set whether the stepper is linear.",
              "attribute": "linear"
            },
            {
              "kind": "field",
              "name": "contentTop",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Get/Set whether the content is displayed above the steps.",
              "attribute": "content-top",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "verticalAnimation",
              "type": {
                "text": "'grow' | 'fade' | 'none'"
              },
              "privacy": "public",
              "default": "'grow'",
              "description": "The animation type when in vertical mode.",
              "attribute": "vertical-animation"
            },
            {
              "kind": "field",
              "name": "horizontalAnimation",
              "type": {
                "text": "'slide' | 'fade' | 'none'"
              },
              "privacy": "public",
              "default": "'slide'",
              "description": "The animation type when in horizontal mode.",
              "attribute": "horizontal-animation"
            },
            {
              "kind": "field",
              "name": "animationDuration",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "320",
              "description": "The animation duration in either vertical or horizontal mode.",
              "attribute": "animation-duration"
            },
            {
              "kind": "field",
              "name": "titlePosition",
              "type": {
                "text": "'bottom' | 'top' | 'end' | 'start' | undefined"
              },
              "privacy": "public",
              "description": "Get/Set the position of the steps title.",
              "attribute": "title-position"
            },
            {
              "kind": "method",
              "name": "orientationChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "stepTypeChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "titlePositionChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "contentTopChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "linearChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "animationTypeChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "animationDurationChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "activateFirstStep",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "animateSteps",
              "privacy": "private",
              "parameters": [
                {
                  "name": "nextStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                },
                {
                  "name": "currentStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "activateStep",
              "privacy": "private",
              "parameters": [
                {
                  "name": "step",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                },
                {
                  "name": "shouldEmit",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "changeActiveStep",
              "privacy": "private",
              "parameters": [
                {
                  "name": "step",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "moveToNextStep",
              "privacy": "private",
              "parameters": [
                {
                  "name": "next",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                },
                {
                  "name": "focusedStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onHomeKey",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onEndKey",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onArrowDownKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "focusedStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onArrowUpKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "focusedStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onArrowRightKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "focusedStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onArrowLeftKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "focusedStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getNextStep",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "IgcStepComponent | undefined"
                }
              },
              "parameters": [
                {
                  "name": "focusedStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getPreviousStep",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "IgcStepComponent | undefined"
                }
              },
              "parameters": [
                {
                  "name": "focusedStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateStepsLinearDisabled",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateAnimation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "step",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "syncProperties",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "stepsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "public",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Activates the step at a given index."
            },
            {
              "kind": "method",
              "name": "next",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Activates the next enabled step."
            },
            {
              "kind": "method",
              "name": "prev",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Activates the previous enabled step."
            },
            {
              "kind": "method",
              "name": "reset",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resets the stepper to its initial state i.e. activates the first step."
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the active step is about to change.",
              "name": "igcActiveStepChanging"
            },
            {
              "description": "Emitted when the active step is changed.",
              "name": "igcActiveStepChanged"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "vertical-animation",
              "type": {
                "text": "'grow' | 'fade' | 'none'"
              },
              "default": "'grow'",
              "description": "The animation type when in vertical mode.",
              "fieldName": "verticalAnimation",
              "attribute": "vertical-animation"
            },
            {
              "name": "horizontal-animation",
              "type": {
                "text": "'slide' | 'fade' | 'none'"
              },
              "default": "'slide'",
              "description": "The animation type when in horizontal mode.",
              "fieldName": "horizontalAnimation",
              "attribute": "horizontal-animation"
            },
            {
              "name": "animation-duration",
              "type": {
                "text": "number"
              },
              "default": "320",
              "description": "The animation duration in either vertical or horizontal mode.",
              "fieldName": "animationDuration",
              "attribute": "animation-duration"
            },
            {
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "description": "Gets/Sets the orientation of the stepper.",
              "fieldName": "orientation"
            },
            {
              "name": "step-type",
              "type": {
                "text": "'indicator' | 'title' | 'full'"
              },
              "default": "'full'",
              "description": "Get/Set the type of the steps.",
              "fieldName": "stepType"
            },
            {
              "name": "linear",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Get/Set whether the stepper is linear.",
              "fieldName": "linear"
            },
            {
              "name": "content-top",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Get/Set whether the content is displayed above the steps.",
              "fieldName": "contentTop"
            },
            {
              "name": "title-position",
              "type": {
                "text": "'bottom' | 'top' | 'end' | 'start' | undefined"
              },
              "description": "Get/Set the position of the steps title.",
              "fieldName": "titlePosition"
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-stepper",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcStepperComponent",
            "module": "src/components/stepper/stepper.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tabs/tab-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents the content of a tab",
          "name": "IgcTabPanelComponent",
          "slots": [
            {
              "description": "Renders the content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-tab-panel'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-tab-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcTabPanelComponent",
            "module": "src/components/tabs/tab-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tabs/tab.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents the tab header.",
          "name": "IgcTabComponent",
          "cssParts": [
            {
              "description": "The content wrapper.",
              "name": "content"
            },
            {
              "description": "The prefix wrapper.",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "Renders before the tab header content.",
              "name": "prefix"
            },
            {
              "description": "Renders the tab header content.",
              "name": ""
            },
            {
              "description": "Renders after the tab header content.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-tab'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "tab",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "description": "The id of the tab panel which will be controlled by the tab.",
              "attribute": "panel"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the tab is selected.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the tab is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus to the tab."
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the tab."
            }
          ],
          "attributes": [
            {
              "name": "panel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The id of the tab panel which will be controlled by the tab.",
              "fieldName": "panel",
              "attribute": "panel"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the tab is selected.",
              "fieldName": "selected",
              "attribute": "selected"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the tab is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-tab",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcTabComponent",
            "module": "src/components/tabs/tab.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tabs/tabs.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents tabs component",
          "name": "IgcTabsComponent",
          "cssParts": [
            {
              "description": "The wrapper of the tabs including the headers content and the scroll buttons.",
              "name": "headers"
            },
            {
              "description": "The container for the tab headers.",
              "name": "headers-content"
            },
            {
              "description": "The wrapper for the tab headers and the selected indicator.",
              "name": "headers-wrapper"
            },
            {
              "description": "The container for the headers.",
              "name": "headers-scroll"
            },
            {
              "description": "The selected indicator.",
              "name": "selected-indicator"
            },
            {
              "description": "The start scroll button displayed when the tabs overflow.",
              "name": "start-scroll-button"
            },
            {
              "description": "The end scroll button displayed when the tabs overflow.",
              "name": "end-scroll-button"
            },
            {
              "description": "The container for the tabs content.",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "Renders the tab header.",
              "name": ""
            },
            {
              "description": "Renders the tab content.",
              "name": "panel"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-tabs'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "headerRef",
              "type": {
                "text": "Ref<HTMLDivElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tabs",
              "type": {
                "text": "Array<IgcTabComponent>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "panels",
              "type": {
                "text": "Array<IgcTabPanelComponent>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "wrapper",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "container",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "selectedIndicator",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "showScrollButtons",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disableStartScrollButton",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "disableEndScrollButton",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "activeTab",
              "type": {
                "text": "IgcTabComponent | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_closestActiveTabIndex",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_mutationCallback",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{\n    changes: { attributes, added, removed },\n  }",
                  "type": {
                    "text": "MutationControllerParams<IgcTabComponent>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "enabledTabs",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Returns the currently selected tab.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "alignment",
              "type": {
                "text": "'start' | 'end' | 'center' | 'justify'"
              },
              "privacy": "public",
              "default": "'start'",
              "description": "Sets the alignment for the tab headers",
              "attribute": "alignment",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "activation",
              "type": {
                "text": "'auto' | 'manual'"
              },
              "privacy": "public",
              "default": "'auto'",
              "description": "Determines the tab activation. When set to auto,\nthe tab is instantly selected while navigating with the Left/Right Arrows, Home or End keys\nand the corresponding panel is displayed.\nWhen set to manual, the tab is only focused. The selection happens after pressing Space or Enter.",
              "attribute": "activation"
            },
            {
              "kind": "method",
              "name": "alignIndicator",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateButtonsOnResize",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateScrollButtons",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setupObserver",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateSelectedTab",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "syncAttributes",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setSelectedTab",
              "privacy": "private",
              "parameters": [
                {
                  "name": "tab",
                  "optional": true,
                  "type": {
                    "text": "IgcTabComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "scrollByTabOffset",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "'start' | 'end'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_scrollToAndFocus",
              "privacy": "private",
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "IgcTabComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_kbActivateTab",
              "privacy": "private",
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "IgcTabComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onArrowLeft",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onArrowRight",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onHomeKey",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onEndKey",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onActivationKey",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleScroll",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Selects the specified tab and displays the corresponding panel."
            },
            {
              "kind": "method",
              "name": "renderScrollButton",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "'start' | 'end'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the selected tab changes.",
              "name": "igcChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "alignment",
              "type": {
                "text": "'start' | 'end' | 'center' | 'justify'"
              },
              "default": "'start'",
              "description": "Sets the alignment for the tab headers",
              "fieldName": "alignment",
              "attribute": "alignment"
            },
            {
              "name": "activation",
              "type": {
                "text": "'auto' | 'manual'"
              },
              "default": "'auto'",
              "description": "Determines the tab activation. When set to auto,\nthe tab is instantly selected while navigating with the Left/Right Arrows, Home or End keys\nand the corresponding panel is displayed.\nWhen set to manual, the tab is only focused. The selection happens after pressing Space or Enter.",
              "fieldName": "activation",
              "attribute": "activation"
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-tabs",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcTabsComponent",
            "module": "src/components/tabs/tabs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textarea/textarea.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This element represents a multi-line plain-text editing control,\nuseful when you want to allow users to enter a sizeable amount of free-form text,\nfor example a comment on a review or feedback form.",
          "name": "IgcTextareaComponent",
          "cssParts": [
            {
              "description": "The main wrapper that holds all main input elements.",
              "name": "container"
            },
            {
              "description": "The native input element.",
              "name": "input"
            },
            {
              "description": "The native label element.",
              "name": "label"
            },
            {
              "description": "The prefix wrapper.",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper.",
              "name": "suffix"
            },
            {
              "description": "The helper text wrapper.",
              "name": "helper-text"
            }
          ],
          "slots": [
            {
              "description": "Text content from the default slot will be used as the value of the component.",
              "name": ""
            },
            {
              "description": "Renders content before the input.",
              "name": "prefix"
            },
            {
              "description": "Renders content after input.",
              "name": "suffix"
            },
            {
              "description": "Renders content below the input.",
              "name": "helper-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-textarea'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "[themeSymbol]",
              "type": {
                "text": "Theme"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[\n    requiredValidator,\n    minLengthValidator,\n    maxLengthValidator,\n  ]",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "protected",
              "default": "`textarea-${IgcTextareaComponent.increment()}`"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "privacy": "protected",
              "static": true,
              "default": "{\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  }"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "observer",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "projected",
              "type": {
                "text": "Array<Node>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "prefixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "suffixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLTextAreaElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "resizeStyles",
              "type": {
                "text": "StyleInfo"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Specifies what if any permission the browser has to provide for automated assistance in filling out form field values,\nas well as guidance to the browser as to the type of information expected in the field.\nRefer to [this page](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for additional information.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "| 'off'\n    | 'none'\n    | 'on'\n    | 'sentences'\n    | 'words'\n    | 'characters'"
              },
              "privacy": "public",
              "description": "Controls whether and how text input is automatically capitalized as it is entered/edited by the user.\n\n[MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize).",
              "attribute": "autocapitalize"
            },
            {
              "kind": "field",
              "name": "inputMode",
              "type": {
                "text": "| 'none'\n    | 'text'\n    | 'decimal'\n    | 'numeric'\n    | 'tel'\n    | 'search'\n    | 'email'\n    | 'url'"
              },
              "privacy": "public",
              "description": "Hints at the type of data that might be entered by the user while editing the element or its contents.\nThis allows a browser to display an appropriate virtual keyboard.\n\n[MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)",
              "attribute": "inputmode"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label for the control.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "maxLength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum number of characters (UTF-16 code units) that the user can enter.\nIf this value isn't specified, the user can enter an unlimited number of characters.",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "minLength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The minimum number of characters (UTF-16 code units) required that the user should enter.",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "attribute": "outlined",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "resize",
              "type": {
                "text": "'auto' | 'vertical' | 'none'"
              },
              "privacy": "public",
              "default": "'vertical'",
              "description": "Controls whether the control can be resized.\nWhen `auto` is set, the control will try to expand and fit its content.",
              "attribute": "resize"
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "2",
              "description": "The number of visible text lines for the control. If it is specified, it must be a positive integer.\nIf it is not specified, the default value is 2.",
              "attribute": "rows"
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value of the component",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true",
              "description": "Controls whether the element may be checked for spelling errors.",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "wrap",
              "type": {
                "text": "'hard' | 'soft' | 'off'"
              },
              "privacy": "public",
              "default": "'soft'",
              "description": "Indicates how the control should wrap the value for form submission.\nRefer to [this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attributes)\nfor explanation of the available values.",
              "attribute": "wrap"
            },
            {
              "kind": "field",
              "name": "validateOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Enables validation rules to be evaluated without restricting user input. This applies to the `maxLength` property\nwhen it is defined.",
              "attribute": "validate-only",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "description": "Selects all text within the control."
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "privacy": "public",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "default": "'none'",
                  "type": {
                    "text": "'backward' | 'forward' | 'none'"
                  }
                }
              ],
              "description": "Sets the text selection range of the control"
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "privacy": "public",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces the selected text in the control."
            },
            {
              "kind": "method",
              "name": "scrollTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "ScrollToOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "scrollTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "x",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "y",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "scrollTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "resolvePartNames",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "base",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "valueChanged",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setAreaHeight",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setAutoHeight",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "valueSlotChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "slotChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderValueSlot",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderHelperText",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderStandard",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderMaterial",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "kind": "method",
              "name": "requiredChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control receives user input.",
              "name": "igcInput"
            },
            {
              "description": "Emitted when the a change to the control value is committed by the user.",
              "name": "igcChange"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "igcFocus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "igcBlur"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what if any permission the browser has to provide for automated assistance in filling out form field values,\nas well as guidance to the browser as to the type of information expected in the field.\nRefer to [this page](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for additional information.",
              "fieldName": "autocomplete",
              "attribute": "autocomplete"
            },
            {
              "name": "autocapitalize",
              "type": {
                "text": "| 'off'\n    | 'none'\n    | 'on'\n    | 'sentences'\n    | 'words'\n    | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered/edited by the user.\n\n[MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize).",
              "fieldName": "autocapitalize",
              "attribute": "autocapitalize"
            },
            {
              "name": "inputmode",
              "type": {
                "text": "| 'none'\n    | 'text'\n    | 'decimal'\n    | 'numeric'\n    | 'tel'\n    | 'search'\n    | 'email'\n    | 'url'"
              },
              "description": "Hints at the type of data that might be entered by the user while editing the element or its contents.\nThis allows a browser to display an appropriate virtual keyboard.\n\n[MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)",
              "fieldName": "inputMode",
              "attribute": "inputmode"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label for the control.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum number of characters (UTF-16 code units) that the user can enter.\nIf this value isn't specified, the user can enter an unlimited number of characters.",
              "fieldName": "maxLength",
              "attribute": "maxlength"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of characters (UTF-16 code units) required that the user should enter.",
              "fieldName": "minLength",
              "attribute": "minlength"
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "fieldName": "outlined",
              "attribute": "outlined"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly"
            },
            {
              "name": "resize",
              "type": {
                "text": "'auto' | 'vertical' | 'none'"
              },
              "default": "'vertical'",
              "description": "Controls whether the control can be resized.\nWhen `auto` is set, the control will try to expand and fit its content.",
              "fieldName": "resize",
              "attribute": "resize"
            },
            {
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "2",
              "description": "The number of visible text lines for the control. If it is specified, it must be a positive integer.\nIf it is not specified, the default value is 2.",
              "fieldName": "rows",
              "attribute": "rows"
            },
            {
              "name": "value",
              "description": "The value of the component",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Controls whether the element may be checked for spelling errors.",
              "fieldName": "spellcheck",
              "attribute": "spellcheck"
            },
            {
              "name": "wrap",
              "type": {
                "text": "'hard' | 'soft' | 'off'"
              },
              "default": "'soft'",
              "description": "Indicates how the control should wrap the value for form submission.\nRefer to [this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attributes)\nfor explanation of the available values.",
              "fieldName": "wrap",
              "attribute": "wrap"
            },
            {
              "name": "validate-only",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables validation rules to be evaluated without restricting user input. This applies to the `maxLength` property\nwhen it is defined.",
              "fieldName": "validateOnly",
              "attribute": "validate-only"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "fieldName": "required",
              "attribute": "required",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/form-associated-required.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedRequiredMixin",
              "module": "/src/components/common/mixins/form-associated-required.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-textarea",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcTextareaComponent",
            "module": "src/components/textarea/textarea.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/toast/toast.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A toast component is used to show a notification",
          "name": "IgcToastComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the toast.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-toast'"
            },
            {
              "kind": "field",
              "name": "_animationPlayer",
              "type": {
                "text": "ReturnType<\n    typeof addAnimationController\n  >"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "_autoHideTimeout",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component is in shown state.",
              "attribute": "open",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "displayTime",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "4000",
              "description": "Determines the duration in ms in which the component will be visible.",
              "attribute": "display-time",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the component should close after the `displayTime` is over.",
              "attribute": "keep-open",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "'bottom' | 'middle' | 'top'"
              },
              "privacy": "public",
              "default": "'bottom'",
              "description": "Sets the position of the component in the viewport.",
              "attribute": "position",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "displayTimeChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "keepOpenChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleAnimation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "'open' | 'close'"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "setAutoHideTimer",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "description": "Opens the component.",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "description": "Closes the component.",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "description": "Toggles the open state of the component.",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'status'",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLive",
              "type": {
                "text": "string"
              },
              "default": "'polite'",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcBaseAlertLikeComponent",
            "module": "/src/components/common/mixins/alert.js"
          },
          "tagName": "igc-toast",
          "customElement": true,
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component is in shown state.",
              "fieldName": "open",
              "attribute": "open",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "name": "display-time",
              "type": {
                "text": "number"
              },
              "default": "4000",
              "description": "Determines the duration in ms in which the component will be visible.",
              "fieldName": "displayTime",
              "attribute": "display-time",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "name": "keep-open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the component should close after the `displayTime` is over.",
              "fieldName": "keepOpen",
              "attribute": "keep-open",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "name": "position",
              "type": {
                "text": "'bottom' | 'middle' | 'top'"
              },
              "default": "'bottom'",
              "description": "Sets the position of the component in the viewport.",
              "fieldName": "position",
              "attribute": "position",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcToastComponent",
            "module": "src/components/toast/toast.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree/tree-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The tree-item component represents a child item of the tree component or another tree item.",
          "name": "IgcTreeItemComponent",
          "cssParts": [
            {
              "description": "The wrapper for the tree item.",
              "name": "wrapper"
            },
            {
              "description": "Indicates selected state. Applies to `wrapper`.",
              "name": "selected"
            },
            {
              "description": "Indicates focused state. Applies to `wrapper`.",
              "name": "focused"
            },
            {
              "description": "Indicates an active state. Applies to `wrapper`.",
              "name": "active"
            },
            {
              "description": "The expand indicator of the tree item.",
              "name": "indicator"
            },
            {
              "description": "The tree item content.",
              "name": "label"
            },
            {
              "description": "The tree item displayed text.",
              "name": "text"
            },
            {
              "description": "The checkbox of the tree item when selection is enabled.",
              "name": "select"
            }
          ],
          "slots": [
            {
              "description": "Renders nested tree-item component.",
              "name": ""
            },
            {
              "description": "Renders the tree item container.",
              "name": "label"
            },
            {
              "description": "Renders the expand indicator container.",
              "name": "indicator"
            },
            {
              "description": "Renders the tree item loading indicator container.",
              "name": "loading"
            },
            {
              "description": "Renders the container (by default the space) before the tree item.",
              "name": "indentation"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-tree-item'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "tabbableEl",
              "type": {
                "text": "HTMLElement[] | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "focusedProgrammatically",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "groupRef",
              "type": {
                "text": "Ref<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "animationPlayer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tree",
              "type": {
                "text": "IgcTreeComponent | undefined"
              },
              "privacy": "public",
              "description": "A reference to the tree the item is a part of."
            },
            {
              "kind": "field",
              "name": "parent",
              "type": {
                "text": "IgcTreeItemComponent | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The parent item of the current tree item (if any)"
            },
            {
              "kind": "field",
              "name": "init",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "contentList",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "wrapper",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isFocused",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasChildren",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "level",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The depth of the item, relative to the root."
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "description": "The tree item label.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The tree item expansion state.",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Marks the item as the tree's active item.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Get/Set whether the tree item is disabled. Disabled items are ignored for user interactions.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The tree item selection state.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "To be used for load-on-demand scenarios in order to specify whether the item is loading data.",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "any"
              },
              "privacy": "public",
              "default": "undefined",
              "description": "The value entry that the tree item is visualizing. Required for searching through items.",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "toggleAnimation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "dir",
                  "type": {
                    "text": "'open' | 'close'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "bothChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "expandedChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "activeChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "disabledChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "selectedChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "selectionService",
              "type": {
                "text": "IgcTreeSelectionService | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "navService",
              "type": {
                "text": "IgcTreeNavigationService | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parts",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "directChildren",
              "type": {
                "text": "Array<IgcTreeItemComponent>"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "allChildren",
              "type": {
                "text": "Array<IgcTreeItemComponent>"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "IgcTreeItemComponent[]"
              },
              "privacy": "public",
              "description": "The full path to the tree item, starting from the top-most ancestor.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "itemClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "expandIndicatorClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "selectorClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onFocus",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onBlur",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onFocusIn",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onFocusOut",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "labelChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "getChildren",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcTreeItemComponent[]"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "default": "{ flatten: false }",
                  "type": {
                    "text": "{ flatten: boolean }"
                  }
                }
              ],
              "description": "Returns a collection of child items.\nIf the parameter value is true returns all tree item's direct children,\notherwise - only the direct children."
            },
            {
              "kind": "method",
              "name": "expandWithEvent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "collapseWithEvent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggles tree item expansion state."
            },
            {
              "kind": "method",
              "name": "expand",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Expands the tree item."
            },
            {
              "kind": "method",
              "name": "collapse",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Collapses the tree item."
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tree item label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The tree item expansion state.",
              "fieldName": "expanded",
              "attribute": "expanded"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Marks the item as the tree's active item.",
              "fieldName": "active",
              "attribute": "active"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Get/Set whether the tree item is disabled. Disabled items are ignored for user interactions.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The tree item selection state.",
              "fieldName": "selected",
              "attribute": "selected"
            },
            {
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "To be used for load-on-demand scenarios in order to specify whether the item is loading data.",
              "fieldName": "loading",
              "attribute": "loading"
            },
            {
              "name": "value",
              "type": {
                "text": "any"
              },
              "default": "undefined",
              "description": "The value entry that the tree item is visualizing. Required for searching through items.",
              "fieldName": "value",
              "attribute": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-tree-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcTreeItemComponent",
            "module": "src/components/tree/tree-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree/tree.common.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree/tree.navigation.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "NAVIGATION_KEYS",
          "default": "new Set([\n  'down',\n  'up',\n  'left',\n  'right',\n  'arrowdown',\n  'arrowup',\n  'arrowleft',\n  'arrowright',\n  'home',\n  'end',\n  'space',\n  'spacebar',\n  ' ',\n])"
        },
        {
          "kind": "class",
          "description": "",
          "name": "IgcTreeNavigationService",
          "members": [
            {
              "kind": "field",
              "name": "tree",
              "type": {
                "text": "IgcTreeComponent"
              },
              "privacy": "private",
              "default": "tree"
            },
            {
              "kind": "field",
              "name": "selectionService",
              "type": {
                "text": "IgcTreeSelectionService"
              },
              "privacy": "private",
              "default": "selectionService"
            },
            {
              "kind": "field",
              "name": "_focusedItem",
              "type": {
                "text": "IgcTreeItemComponent | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_lastFocusedItem",
              "type": {
                "text": "IgcTreeItemComponent | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_activeItem",
              "type": {
                "text": "IgcTreeItemComponent | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_visibleChildren",
              "type": {
                "text": "IgcTreeItemComponent[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_invisibleChildren",
              "type": {
                "text": "Set<IgcTreeItemComponent>"
              },
              "privacy": "private",
              "default": "new Set()"
            },
            {
              "kind": "field",
              "name": "_disabledChildren",
              "type": {
                "text": "Set<IgcTreeItemComponent>"
              },
              "privacy": "private",
              "default": "new Set()"
            },
            {
              "kind": "method",
              "name": "updateVisChild",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "focusedItem",
              "type": {
                "text": "IgcTreeItemComponent | null"
              },
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "focusItem",
              "privacy": "public",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "IgcTreeItemComponent | null"
                  }
                },
                {
                  "name": "shouldFocus",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "field",
              "name": "activeItem",
              "type": {
                "text": "IgcTreeItemComponent | null"
              },
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "setActiveItem",
              "privacy": "public",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "IgcTreeItemComponent | null"
                  }
                },
                {
                  "name": "shouldEmit",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "field",
              "name": "visibleChildren",
              "type": {
                "text": "IgcTreeItemComponent[]"
              },
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "update_disabled_cache",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "delete_item",
              "privacy": "public",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "update_visible_cache",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                },
                {
                  "name": "expanded",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "shouldUpdateNestedChildren",
                  "default": "true"
                },
                {
                  "name": "shouldUpdate",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setFocusedAndActiveItem",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  },
                  "description": "target item"
                },
                {
                  "name": "isActive",
                  "default": "true",
                  "description": "if true, sets the item as active"
                },
                {
                  "name": "shouldFocus",
                  "default": "true"
                }
              ],
              "description": "Sets the item as focused (and active)"
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "public",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for keydown events. Used in tree.component.ts"
            },
            {
              "kind": "method",
              "name": "handleNavigation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleArrowLeft",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleArrowRight",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleUpDownArrow",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "isUp",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleAsterisk",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleSpace",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "shiftKey",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getVisibleItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "IgcTreeItemComponent"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                },
                {
                  "name": "dir",
                  "default": "1",
                  "type": {
                    "text": "1 | -1"
                  }
                }
              ],
              "description": "Gets the next visible item in the given direction - 1 -> next, -1 -> previous"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NAVIGATION_KEYS",
          "declaration": {
            "name": "NAVIGATION_KEYS",
            "module": "src/components/tree/tree.navigation.ts"
          }
        },
        {
          "kind": "js",
          "name": "IgcTreeNavigationService",
          "declaration": {
            "name": "IgcTreeNavigationService",
            "module": "src/components/tree/tree.navigation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree/tree.selection.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcTreeSelectionService",
          "members": [
            {
              "kind": "field",
              "name": "tree",
              "type": {
                "text": "IgcTreeComponent"
              },
              "privacy": "private",
              "default": "tree"
            },
            {
              "kind": "field",
              "name": "itemSelection",
              "type": {
                "text": "Set<IgcTreeItemComponent>"
              },
              "privacy": "private",
              "default": "new Set<IgcTreeItemComponent>()"
            },
            {
              "kind": "field",
              "name": "indeterminateItems",
              "type": {
                "text": "Set<IgcTreeItemComponent>"
              },
              "privacy": "private",
              "default": "new Set<IgcTreeItemComponent>()"
            },
            {
              "kind": "field",
              "name": "itemsToBeSelected",
              "type": {
                "text": "Set<IgcTreeItemComponent>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "itemsToBeIndeterminate",
              "type": {
                "text": "Set<IgcTreeItemComponent>"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "selectMultipleItems",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ],
              "description": "Select range from last selected item to the current specified item."
            },
            {
              "kind": "method",
              "name": "selectItem",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ],
              "description": "Select the specified item and emit event."
            },
            {
              "kind": "method",
              "name": "deselectItem",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ],
              "description": "Deselect the specified item and emit event."
            },
            {
              "kind": "method",
              "name": "clearItemsSelection",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Clears item selection"
            },
            {
              "kind": "method",
              "name": "isItemSelected",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isItemIndeterminate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "ensureStateOnItemDelete",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ],
              "description": "Called on item`s disconnectedCallback"
            },
            {
              "kind": "method",
              "name": "retriggerItemState",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ],
              "description": "Retrigger the selection state of the item."
            },
            {
              "kind": "method",
              "name": "emitItemSelectionEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "newSelection",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "added",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "removed",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectItemsWithNoEvent",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ],
              "description": "Select specified items. No event is emitted."
            },
            {
              "kind": "method",
              "name": "deselectItemsWithNoEvent",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "onDelete",
                  "default": "false"
                }
              ],
              "description": "Deselect specified items. No event is emitted."
            },
            {
              "kind": "method",
              "name": "emitCascadeItemSelectionEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "currSelection",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "added",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "removed",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "cascadeSelectItemsWithNoEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "oldSelection",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "cascadeDeselectItemsWithNoEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "onDelete",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "calculateItemsNewSelectionState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldSelection",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "added",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "removed",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ],
              "description": "populates the itemsToBeSelected and itemsToBeIndeterminate sets\nwith the items which will be eventually in selected/indeterminate state"
            },
            {
              "kind": "method",
              "name": "cascadeSelectionState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "IgcTreeItemComponent[] | undefined"
                  }
                },
                {
                  "name": "selected",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Ensures proper selection state for all predescessors and descendants during a selection event"
            },
            {
              "kind": "method",
              "name": "handleParentSelectionState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ],
              "description": "recursively handle the selection state of the direct and indirect parents"
            },
            {
              "kind": "method",
              "name": "handleItemSelectionState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ],
              "description": "Handle the selection state of a given item based the selection states of its direct children"
            },
            {
              "kind": "method",
              "name": "updateItemsState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldSelection",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "oldIndeterminate",
                  "default": "[]",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ],
              "description": "Emits the `selectedChange` event for each item affected by the selection"
            },
            {
              "kind": "method",
              "name": "getSelectedItems",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "IgcTreeItemComponent[]"
                }
              },
              "description": "Returns array of the selected items."
            },
            {
              "kind": "method",
              "name": "getIndeterminateItems",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "IgcTreeItemComponent[]"
                }
              },
              "description": "Returns array of the items in indeterminate state."
            },
            {
              "kind": "method",
              "name": "areEqualCollections",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "first",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "second",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectDeselectItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                },
                {
                  "name": "select",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "indeterminate",
                  "default": "false"
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcTreeSelectionService",
          "declaration": {
            "name": "IgcTreeSelectionService",
            "module": "src/components/tree/tree.selection.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree/tree.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The tree allows users to represent hierarchical data in a tree-view structure,\nmaintaining parent-child relationships, as well as to define static tree-view structure without a corresponding data model.",
          "name": "IgcTreeComponent",
          "slots": [
            {
              "description": "Renders the tree items inside default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-tree'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "selectionService",
              "type": {
                "text": "IgcTreeSelectionService"
              },
              "privacy": "private",
              "default": "new IgcTreeSelectionService(this)"
            },
            {
              "kind": "field",
              "name": "navService",
              "type": {
                "text": "IgcTreeNavigationService"
              },
              "privacy": "private",
              "default": "new IgcTreeNavigationService(this, this.selectionService)"
            },
            {
              "kind": "field",
              "name": "singleBranchExpand",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether a single or multiple of a parent's child items can be expanded.",
              "attribute": "single-branch-expand",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "toggleNodeOnClick",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether clicking over nodes will change their expanded state or not.",
              "attribute": "toggle-node-on-click",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "'none' | 'multiple' | 'cascade'"
              },
              "privacy": "public",
              "default": "'none'",
              "description": "The selection state of the tree.",
              "attribute": "selection",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "onDirChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onSizeChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "selectionModeChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "singleBranchExpandChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "Array<IgcTreeItemComponent>"
              },
              "privacy": "public",
              "description": "Returns all of the tree's items.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "expandToItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ],
              "description": "Select all items if the items collection is empty. Otherwise, select the items in the items collection."
            },
            {
              "kind": "method",
              "name": "deselect",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ],
              "description": "Deselect all items if the items collection is empty. Otherwise, deselect the items in the items collection."
            },
            {
              "kind": "method",
              "name": "expand",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ],
              "description": "Expands all of the passed items.\nIf no items are passed, expands ALL items."
            },
            {
              "kind": "method",
              "name": "collapse",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ],
              "description": "Collapses all of the passed items.\nIf no items are passed, collapses ALL items."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when item selection is changing, before the selection completes.",
              "name": "igcSelection"
            },
            {
              "description": "Emitted when tree item is collapsed.",
              "name": "igcItemCollapsed"
            },
            {
              "description": "Emitted when tree item is about to collapse.",
              "name": "igcItemCollapsing"
            },
            {
              "description": "Emitted when tree item is expanded.",
              "name": "igcItemExpanded"
            },
            {
              "description": "Emitted when tree item is about to expand.",
              "name": "igcItemExpanding"
            },
            {
              "description": "Emitted when the tree's `active` item changes.",
              "name": "igcItemActivated"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "single-branch-expand",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether a single or multiple of a parent's child items can be expanded.",
              "fieldName": "singleBranchExpand",
              "attribute": "single-branch-expand"
            },
            {
              "name": "toggle-node-on-click",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether clicking over nodes will change their expanded state or not.",
              "fieldName": "toggleNodeOnClick",
              "attribute": "toggle-node-on-click"
            },
            {
              "name": "selection",
              "type": {
                "text": "'none' | 'multiple' | 'cascade'"
              },
              "default": "'none'",
              "description": "The selection state of the tree.",
              "fieldName": "selection",
              "attribute": "selection"
            },
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size",
              "inheritedFrom": {
                "name": "SizableMixin",
                "module": "src/components/common/mixins/sizable.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "SizableMixin",
              "module": "/src/components/common/mixins/sizable.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-tree",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcTreeComponent",
            "module": "src/components/tree/tree.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/animations/presets/fade/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "fadeIn",
          "parameters": [
            {
              "name": "options",
              "default": "baseOptions"
            }
          ]
        },
        {
          "kind": "function",
          "name": "fadeOut",
          "parameters": [
            {
              "name": "options",
              "default": "baseOptions"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "fadeIn",
          "declaration": {
            "name": "fadeIn",
            "module": "src/animations/presets/fade/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "fadeOut",
          "declaration": {
            "name": "fadeOut",
            "module": "src/animations/presets/fade/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/animations/presets/grow/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "growVerIn",
          "parameters": [
            {
              "name": "options",
              "default": "baseOptions"
            }
          ]
        },
        {
          "kind": "function",
          "name": "growVerOut",
          "parameters": [
            {
              "name": "options",
              "default": "baseOptions"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "growVerIn",
          "declaration": {
            "name": "growVerIn",
            "module": "src/animations/presets/grow/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "growVerOut",
          "declaration": {
            "name": "growVerOut",
            "module": "src/animations/presets/grow/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/animations/presets/slide/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "slideInHor",
          "parameters": [
            {
              "name": "options",
              "default": "baseOptions"
            }
          ]
        },
        {
          "kind": "function",
          "name": "slideOutHor",
          "parameters": [
            {
              "name": "options",
              "default": "baseOptions"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "slideInHor",
          "declaration": {
            "name": "slideInHor",
            "module": "src/animations/presets/slide/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "slideOutHor",
          "declaration": {
            "name": "slideOutHor",
            "module": "src/animations/presets/slide/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/calendar/common/calendar-base.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "MONTHS_PER_ROW",
          "type": {
            "text": "number"
          },
          "default": "3"
        },
        {
          "kind": "variable",
          "name": "YEARS_PER_ROW",
          "type": {
            "text": "number"
          },
          "default": "3"
        },
        {
          "kind": "class",
          "description": "",
          "name": "IgcCalendarBaseComponent",
          "members": [
            {
              "kind": "field",
              "name": "_activeDate",
              "privacy": "private",
              "default": "new Date()"
            },
            {
              "kind": "field",
              "name": "_activeDateSetFlag",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "calendarModel",
              "privacy": "protected",
              "default": "new Calendar()"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "Date | undefined"
              },
              "privacy": "public",
              "description": "The current value of the calendar.\nUsed when selection is set to single.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "values",
              "type": {
                "text": "Date[] | undefined"
              },
              "privacy": "public",
              "description": "The current values of the calendar.\nUsed when selection is set to multiple or range.",
              "attribute": "values"
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "'single' | 'multiple' | 'range'"
              },
              "privacy": "public",
              "default": "'single'",
              "description": "Sets the type of date selection.",
              "attribute": "selection"
            },
            {
              "kind": "field",
              "name": "showWeekNumbers",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Show/hide the week numbers.",
              "attribute": "show-week-numbers",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "weekStart",
              "type": {
                "text": "| 'sunday'\n    | 'monday'\n    | 'tuesday'\n    | 'wednesday'\n    | 'thursday'\n    | 'friday'\n    | 'saturday'"
              },
              "privacy": "public",
              "default": "'sunday'",
              "description": "Sets the start day of the week.",
              "attribute": "week-start"
            },
            {
              "kind": "field",
              "name": "activeDate",
              "privacy": "public",
              "description": "Sets the date which is shown in view and is highlighted. By default it is the current date.",
              "type": {
                "text": "Date"
              },
              "attribute": "active-date"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "Sets the locale used for formatting and displaying the dates in the calendar.",
              "attribute": "locale"
            },
            {
              "kind": "field",
              "name": "disabledDates",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "public",
              "description": "Gets/sets disabled dates."
            },
            {
              "kind": "field",
              "name": "specialDates",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "public",
              "description": "Gets/sets special dates."
            },
            {
              "kind": "method",
              "name": "weekStartChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "selectionChange",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "Date | undefined"
              },
              "description": "The current value of the calendar.\nUsed when selection is set to single.",
              "fieldName": "value"
            },
            {
              "name": "values",
              "type": {
                "text": "Date[] | undefined"
              },
              "description": "The current values of the calendar.\nUsed when selection is set to multiple or range.",
              "fieldName": "values"
            },
            {
              "name": "selection",
              "type": {
                "text": "'single' | 'multiple' | 'range'"
              },
              "default": "'single'",
              "description": "Sets the type of date selection.",
              "fieldName": "selection"
            },
            {
              "name": "show-week-numbers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show/hide the week numbers.",
              "fieldName": "showWeekNumbers"
            },
            {
              "name": "week-start",
              "type": {
                "text": "| 'sunday'\n    | 'monday'\n    | 'tuesday'\n    | 'wednesday'\n    | 'thursday'\n    | 'friday'\n    | 'saturday'"
              },
              "default": "'sunday'",
              "description": "Sets the start day of the week.",
              "fieldName": "weekStart"
            },
            {
              "name": "active-date",
              "description": "Sets the date which is shown in view and is highlighted. By default it is the current date.",
              "type": {
                "text": "Date"
              },
              "fieldName": "activeDate"
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "Sets the locale used for formatting and displaying the dates in the calendar.",
              "fieldName": "locale"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MONTHS_PER_ROW",
          "declaration": {
            "name": "MONTHS_PER_ROW",
            "module": "src/components/calendar/common/calendar-base.ts"
          }
        },
        {
          "kind": "js",
          "name": "YEARS_PER_ROW",
          "declaration": {
            "name": "YEARS_PER_ROW",
            "module": "src/components/calendar/common/calendar-base.ts"
          }
        },
        {
          "kind": "js",
          "name": "IgcCalendarBaseComponent",
          "declaration": {
            "name": "IgcCalendarBaseComponent",
            "module": "src/components/calendar/common/calendar-base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/calendar/common/calendar.model.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "range",
          "parameters": [
            {
              "name": "start",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "stop",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "step",
              "default": "1"
            }
          ]
        },
        {
          "kind": "function",
          "name": "isLeap",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "year",
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "Returns true for leap years, false for non-leap years."
        },
        {
          "kind": "function",
          "name": "weekDay",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "year",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "month",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "day",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "monthRange",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "year",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "month",
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "Return weekday and number of days for year, month."
        },
        {
          "kind": "function",
          "name": "isDateInRanges",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            },
            {
              "name": "ranges",
              "type": {
                "text": "DateRangeDescriptor[]"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "Calendar",
          "members": [
            {
              "kind": "field",
              "name": "_firstWeekDay",
              "type": {
                "text": "number | WEEKDAYS"
              },
              "privacy": "private",
              "default": "firstWeekDay"
            },
            {
              "kind": "field",
              "name": "firstWeekDay",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "Sets the starting day of the week."
            },
            {
              "kind": "method",
              "name": "weekdays",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns an array of weekdays for one week starting\nwith the currently set `firstWeekDay`\n\nthis.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]\nthis.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]"
            },
            {
              "kind": "method",
              "name": "monthdates",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "year",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "month",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "extraWeek",
                  "default": "false"
                },
                {
                  "name": "boolean"
                }
              ],
              "description": "Returns the date values for one month. It will always iterate throught\ncomplete weeks, so it will contain dates outside the specified month."
            },
            {
              "kind": "method",
              "name": "monthdatescalendar",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "year",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "month",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "extraWeek",
                  "default": "false"
                }
              ],
              "description": "Returns a matrix (array of arrays) representing a month's calendar.\nEach row represents a full week; week entries are ICalendarDate objects."
            },
            {
              "kind": "method",
              "name": "timedelta",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "interval",
                  "type": {
                    "text": "TimeDeltaInterval"
                  }
                },
                {
                  "name": "units",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getNextMonth",
              "privacy": "public",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                }
              ],
              "description": "Gets the same date the month after."
            },
            {
              "kind": "method",
              "name": "getPrevMonth",
              "privacy": "public",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                }
              ],
              "description": "Gets the same date the month prior."
            },
            {
              "kind": "method",
              "name": "getNextYear",
              "privacy": "public",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                }
              ],
              "description": "Gets the same date the year after."
            },
            {
              "kind": "method",
              "name": "getPrevYear",
              "privacy": "public",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                }
              ],
              "description": "Gets the same date the year prior."
            },
            {
              "kind": "method",
              "name": "getWeekNumber",
              "privacy": "public",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                }
              ],
              "description": "Gets the week number of a given date."
            },
            {
              "kind": "method",
              "name": "generateICalendarDate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "ICalendarDate"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "year",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "month",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isPreviousMonth",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "year",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "month",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isNextMonth",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "year",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "month",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "range",
          "declaration": {
            "name": "range",
            "module": "src/components/calendar/common/calendar.model.ts"
          }
        },
        {
          "kind": "js",
          "name": "isLeap",
          "declaration": {
            "name": "isLeap",
            "module": "src/components/calendar/common/calendar.model.ts"
          }
        },
        {
          "kind": "js",
          "name": "weekDay",
          "declaration": {
            "name": "weekDay",
            "module": "src/components/calendar/common/calendar.model.ts"
          }
        },
        {
          "kind": "js",
          "name": "monthRange",
          "declaration": {
            "name": "monthRange",
            "module": "src/components/calendar/common/calendar.model.ts"
          }
        },
        {
          "kind": "js",
          "name": "isDateInRanges",
          "declaration": {
            "name": "isDateInRanges",
            "module": "src/components/calendar/common/calendar.model.ts"
          }
        },
        {
          "kind": "js",
          "name": "Calendar",
          "declaration": {
            "name": "Calendar",
            "module": "src/components/calendar/common/calendar.model.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/calendar/common/utils.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "MAX_DATE",
          "default": "new Date(DATE_BOUND)"
        },
        {
          "kind": "variable",
          "name": "MIN_DATE",
          "default": "new Date(-DATE_BOUND)"
        },
        {
          "kind": "function",
          "name": "isDate",
          "return": {
            "type": {
              "text": "value is Date"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "areEqualDates",
          "parameters": [
            {
              "name": "date1",
              "type": {
                "text": "Date"
              }
            },
            {
              "name": "date2",
              "type": {
                "text": "Date"
              }
            },
            {
              "name": "datePartOnly",
              "default": "true"
            }
          ]
        },
        {
          "kind": "function",
          "name": "setDateSafe",
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isEqual",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "obj1",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "obj2",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isValidDate",
          "return": {
            "type": {
              "text": "value is Date"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "validateDate",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "Date"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getDateOnly",
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getWeekDayNumber",
          "parameters": [
            {
              "name": "day",
              "type": {
                "text": "WeekDays"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "calculateYearsRangeStart",
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            },
            {
              "name": "rangeCount",
              "type": {
                "text": "number"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MAX_DATE",
          "declaration": {
            "name": "MAX_DATE",
            "module": "src/components/calendar/common/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "MIN_DATE",
          "declaration": {
            "name": "MIN_DATE",
            "module": "src/components/calendar/common/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "isDate",
          "declaration": {
            "name": "isDate",
            "module": "src/components/calendar/common/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "areEqualDates",
          "declaration": {
            "name": "areEqualDates",
            "module": "src/components/calendar/common/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "setDateSafe",
          "declaration": {
            "name": "setDateSafe",
            "module": "src/components/calendar/common/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "isEqual",
          "declaration": {
            "name": "isEqual",
            "module": "src/components/calendar/common/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "isValidDate",
          "declaration": {
            "name": "isValidDate",
            "module": "src/components/calendar/common/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "validateDate",
          "declaration": {
            "name": "validateDate",
            "module": "src/components/calendar/common/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getDateOnly",
          "declaration": {
            "name": "getDateOnly",
            "module": "src/components/calendar/common/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getWeekDayNumber",
          "declaration": {
            "name": "getWeekDayNumber",
            "module": "src/components/calendar/common/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "calculateYearsRangeStart",
          "declaration": {
            "name": "calculateYearsRangeStart",
            "module": "src/components/calendar/common/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/calendar/days-view/days-view.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Instantiate a days view as a separate component in the calendar.",
          "name": "IgcDaysViewComponent",
          "cssParts": [
            {
              "description": "The days row container.",
              "name": "days-row"
            },
            {
              "description": "The label container.",
              "name": "label"
            },
            {
              "description": "The inner label container.",
              "name": "label-inner"
            },
            {
              "description": "The week number container.",
              "name": "week-number"
            },
            {
              "description": "The inner week number container.",
              "name": "week-number-inner"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-days-view'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "labelFormatter",
              "type": {
                "text": "Intl.DateTimeFormat"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "formatterWeekday",
              "type": {
                "text": "Intl.DateTimeFormat"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "dates",
              "type": {
                "text": "ICalendarDate[][]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "activeDay",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hideLeadingDays",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Controls the visibility of the leading dates that do not belong to the current month.",
              "attribute": "hide-leading-days"
            },
            {
              "kind": "field",
              "name": "hideTrailingDays",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Controls the visibility of the trailing dates that do not belong to the current month.",
              "attribute": "hide-trailing-days"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Gets/sets the active state of the days view.",
              "attribute": "active"
            },
            {
              "kind": "field",
              "name": "rangePreviewDate",
              "type": {
                "text": "Date | undefined"
              },
              "privacy": "public",
              "description": "The range preview date."
            },
            {
              "kind": "field",
              "name": "weekDayFormat",
              "type": {
                "text": "'long' | 'short' | 'narrow' | undefined"
              },
              "privacy": "public",
              "default": "'narrow'",
              "description": "The format of the days. Defaults to narrow.",
              "attribute": "week-day-format"
            },
            {
              "kind": "field",
              "name": "resourceStrings",
              "type": {
                "text": "IgcCalendarResourceStrings"
              },
              "privacy": "public",
              "default": "IgcCalendarResourceStringEN",
              "description": "The resource strings."
            },
            {
              "kind": "method",
              "name": "formattersChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "datesChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "focusActiveDate",
              "privacy": "public",
              "description": "Focuses the active date."
            },
            {
              "kind": "method",
              "name": "initFormatters",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "generateWeekHeader",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "{ label: string; ariaLabel: string }[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "getCalendarMonth",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "ICalendarDate[][]"
                }
              }
            },
            {
              "kind": "method",
              "name": "titleCase",
              "privacy": "private",
              "parameters": [
                {
                  "name": "str",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getWeekNumber",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formattedDate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "isSingleSelection",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "isLastInRange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "ICalendarDate"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isFirstInRange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "ICalendarDate"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isDisabled",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isWithinRange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "min",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "max",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isRangeDate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isRangePreview",
              "privacy": "private",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isSelected",
              "privacy": "private",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "ICalendarDate"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isToday",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "ICalendarDate"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isWeekend",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "ICalendarDate"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isSpecial",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "ICalendarDate"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "dateClicked",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "day",
                  "type": {
                    "text": "ICalendarDate"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectDay",
              "privacy": "private",
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "ICalendarDate"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectDate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "generateDateRange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Date[]"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectRange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectSingle",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectMultiple",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "changeActiveDate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "ICalendarDate"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "dateKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                },
                {
                  "name": "day",
                  "type": {
                    "text": "ICalendarDate"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "changeRangePreview",
              "privacy": "private",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clearRangePreview",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setRangePreviewDate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "resolveDayItemPartName",
              "privacy": "private",
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "ICalendarDate"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderWeekHeaders",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderDates",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "dayLabelFormatter",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "ICalendarDate"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderDateItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "ICalendarDate"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "field",
              "name": "_activeDate",
              "privacy": "private",
              "default": "new Date()",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_activeDateSetFlag",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "calendarModel",
              "privacy": "protected",
              "default": "new Calendar()",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "Date | undefined"
              },
              "privacy": "public",
              "description": "The current value of the calendar.\nUsed when selection is set to single.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "values",
              "type": {
                "text": "Date[] | undefined"
              },
              "privacy": "public",
              "description": "The current values of the calendar.\nUsed when selection is set to multiple or range.",
              "attribute": "values",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "'single' | 'multiple' | 'range'"
              },
              "privacy": "public",
              "default": "'single'",
              "description": "Sets the type of date selection.",
              "attribute": "selection",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "showWeekNumbers",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Show/hide the week numbers.",
              "attribute": "show-week-numbers",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "weekStart",
              "type": {
                "text": "| 'sunday'\n    | 'monday'\n    | 'tuesday'\n    | 'wednesday'\n    | 'thursday'\n    | 'friday'\n    | 'saturday'"
              },
              "privacy": "public",
              "default": "'sunday'",
              "description": "Sets the start day of the week.",
              "attribute": "week-start",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeDate",
              "privacy": "public",
              "description": "Sets the date which is shown in view and is highlighted. By default it is the current date.",
              "type": {
                "text": "Date"
              },
              "attribute": "active-date",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "Sets the locale used for formatting and displaying the dates in the calendar.",
              "attribute": "locale",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabledDates",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "public",
              "description": "Gets/sets disabled dates.",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "specialDates",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "public",
              "description": "Gets/sets special dates.",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "weekStartChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectionChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the active date changes.",
              "name": "igcActiveDateChange"
            },
            {
              "description": "Emitted when the range preview date changes.",
              "name": "igcRangePreviewDateChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "hide-leading-days",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the visibility of the leading dates that do not belong to the current month.",
              "fieldName": "hideLeadingDays"
            },
            {
              "name": "hide-trailing-days",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the visibility of the trailing dates that do not belong to the current month.",
              "fieldName": "hideTrailingDays"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets/sets the active state of the days view.",
              "fieldName": "active"
            },
            {
              "name": "week-day-format",
              "type": {
                "text": "'long' | 'short' | 'narrow' | undefined"
              },
              "default": "'narrow'",
              "description": "The format of the days. Defaults to narrow.",
              "fieldName": "weekDayFormat"
            },
            {
              "name": "value",
              "type": {
                "text": "Date | undefined"
              },
              "description": "The current value of the calendar.\nUsed when selection is set to single.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "name": "values",
              "type": {
                "text": "Date[] | undefined"
              },
              "description": "The current values of the calendar.\nUsed when selection is set to multiple or range.",
              "fieldName": "values",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "name": "selection",
              "type": {
                "text": "'single' | 'multiple' | 'range'"
              },
              "default": "'single'",
              "description": "Sets the type of date selection.",
              "fieldName": "selection",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "name": "show-week-numbers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Show/hide the week numbers.",
              "fieldName": "showWeekNumbers",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "name": "week-start",
              "type": {
                "text": "| 'sunday'\n    | 'monday'\n    | 'tuesday'\n    | 'wednesday'\n    | 'thursday'\n    | 'friday'\n    | 'saturday'"
              },
              "default": "'sunday'",
              "description": "Sets the start day of the week.",
              "fieldName": "weekStart",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "name": "active-date",
              "description": "Sets the date which is shown in view and is highlighted. By default it is the current date.",
              "type": {
                "text": "Date"
              },
              "fieldName": "activeDate",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "Sets the locale used for formatting and displaying the dates in the calendar.",
              "fieldName": "locale",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/common/calendar-base.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcCalendarBaseComponent",
            "module": "/src/components/calendar/common/calendar-base.js"
          },
          "tagName": "igc-days-view",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDaysViewComponent",
            "module": "src/components/calendar/days-view/days-view.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/calendar/months-view/months-view.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Instantiate a months view as a separate component in the calendar.",
          "name": "IgcMonthsViewComponent",
          "cssParts": [
            {
              "description": "The months row container.",
              "name": "months-row"
            },
            {
              "description": "The month container.",
              "name": "month"
            },
            {
              "description": "The inner month container.",
              "name": "month-inner"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-months-view'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "calendarModel",
              "privacy": "private",
              "default": "new Calendar()"
            },
            {
              "kind": "field",
              "name": "monthFormatter",
              "type": {
                "text": "any"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "activeMonth",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "default": "new Date()",
              "description": "Тhe current value of the calendar."
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "Sets the locale used for formatting and displaying the dates.",
              "attribute": "locale"
            },
            {
              "kind": "field",
              "name": "monthFormat",
              "type": {
                "text": "| 'numeric'\n    | '2-digit'\n    | 'long'\n    | 'short'\n    | 'narrow'\n    | undefined"
              },
              "privacy": "public",
              "default": "'long'",
              "description": "The format of the month. Defaults to long.",
              "attribute": "month-format"
            },
            {
              "kind": "method",
              "name": "formatChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "focusActiveDate",
              "privacy": "public",
              "description": "Focuses the active date."
            },
            {
              "kind": "method",
              "name": "initMonthFormatter",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "formattedMonth",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "months",
              "type": {
                "text": "Date[][]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "resolveMonthPartName",
              "privacy": "private",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectMonth",
              "privacy": "private",
              "parameters": [
                {
                  "name": "month",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "monthKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                },
                {
                  "name": "month",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "Sets the locale used for formatting and displaying the dates.",
              "fieldName": "locale"
            },
            {
              "name": "month-format",
              "type": {
                "text": "| 'numeric'\n    | '2-digit'\n    | 'long'\n    | 'short'\n    | 'narrow'\n    | undefined"
              },
              "default": "'long'",
              "description": "The format of the month. Defaults to long.",
              "fieldName": "monthFormat"
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-months-view",
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcMonthsViewComponent",
            "module": "src/components/calendar/months-view/months-view.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/calendar/years-view/years-view.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Instantiate a years view as a separate component in the calendar.",
          "name": "IgcYearsViewComponent",
          "cssParts": [
            {
              "description": "The years row container.",
              "name": "years-row"
            },
            {
              "description": "The year container.",
              "name": "year"
            },
            {
              "description": "The inner year container.",
              "name": "year-inner"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-years-view'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "years",
              "type": {
                "text": "Date[][]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "activeYear",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "default": "new Date()",
              "description": "Тhe current value of the calendar."
            },
            {
              "kind": "field",
              "name": "yearsPerPage",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "15",
              "description": "Sets how many years are displayed on a single page.",
              "attribute": "years-per-page"
            },
            {
              "kind": "method",
              "name": "datesChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "focusActiveDate",
              "privacy": "public",
              "description": "Focuses the active date."
            },
            {
              "kind": "method",
              "name": "formattedYear",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "generateYears",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "resolveYearPartName",
              "privacy": "private",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectYear",
              "privacy": "private",
              "parameters": [
                {
                  "name": "year",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "yearKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                },
                {
                  "name": "year",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "years-per-page",
              "type": {
                "text": "number"
              },
              "default": "15",
              "description": "Sets how many years are displayed on a single page.",
              "fieldName": "yearsPerPage"
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-years-view",
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcYearsViewComponent",
            "module": "src/components/calendar/years-view/years-view.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/controllers/data.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DataController",
          "members": [
            {
              "kind": "field",
              "name": "grouping",
              "privacy": "protected",
              "default": "new GroupDataOperation<T>()"
            },
            {
              "kind": "field",
              "name": "filtering",
              "privacy": "protected",
              "default": "new FilterDataOperation<T>()"
            },
            {
              "kind": "field",
              "name": "_searchTerm",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_compareCollator",
              "privacy": "private",
              "default": "new Intl.Collator()"
            },
            {
              "kind": "field",
              "name": "searchTerm",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "filteringOptions",
              "type": {
                "text": "FilteringOptions<T>"
              },
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "groupingOptions",
              "type": {
                "text": "GroupingOptions<T>"
              },
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "compareCollator",
              "type": {
                "text": "Intl.Collator"
              },
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "index",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "ComboRecord<T>[]"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "T[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "apply",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<ComboRecord<T>[]>"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "T[]"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DataController",
          "declaration": {
            "name": "DataController",
            "module": "src/components/combo/controllers/data.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/controllers/navigation.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NavigationController",
          "members": [
            {
              "kind": "field",
              "name": "hostHandlers",
              "privacy": "protected",
              "default": "new Map(\n    Object.entries({\n      Escape: this.escape,\n    })\n  )"
            },
            {
              "kind": "field",
              "name": "mainInputHandlers",
              "privacy": "protected",
              "default": "new Map(\n    Object.entries({\n      Escape: this.escape,\n      ArrowUp: this.hide,\n      ArrowDown: this.mainInputArrowDown,\n      Tab: this.tab,\n      Enter: this.enter,\n    })\n  )"
            },
            {
              "kind": "field",
              "name": "searchInputHandlers",
              "privacy": "protected",
              "default": "new Map(\n    Object.entries({\n      Escape: this.escape,\n      ArrowUp: this.escape,\n      ArrowDown: this.inputArrowDown,\n      Tab: this.inputArrowDown,\n    })\n  )"
            },
            {
              "kind": "field",
              "name": "listHandlers",
              "privacy": "protected",
              "default": "new Map(\n    Object.entries({\n      ArrowDown: this.arrowDown,\n      ArrowUp: this.arrowUp,\n      ' ': this.space,\n      Enter: this.enter,\n      Escape: this.escape,\n      Tab: this.tab,\n      Home: this.home,\n      End: this.end,\n    })\n  )"
            },
            {
              "kind": "field",
              "name": "_active",
              "privacy": "protected",
              "default": "-1",
              "type": {
                "text": "Readonly<number>"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "dataState",
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "toggleSelect",
              "privacy": "public",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "currentItem",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "firstItem",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "lastItem",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "scrollToActive",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                },
                {
                  "name": "behavior",
                  "default": "'auto'",
                  "type": {
                    "text": "ScrollBehavior"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "active",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "home",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "end",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "space",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "escape",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "enter",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "inputArrowDown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "mainInputArrowDown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "tab",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "arrowDown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "arrowUp",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getNextItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "DIRECTION"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getNearestItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "startIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "public",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navigateHost",
              "privacy": "public",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navigateMainInput",
              "privacy": "public",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                },
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navigateSearchInput",
              "privacy": "public",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                },
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navigateList",
              "privacy": "public",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                },
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NavigationController",
          "declaration": {
            "name": "NavigationController",
            "module": "src/components/combo/controllers/navigation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/controllers/selection.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SelectionController",
          "members": [
            {
              "kind": "field",
              "name": "_selected",
              "type": {
                "text": "Set<T>"
              },
              "privacy": "private",
              "default": "new Set()"
            },
            {
              "kind": "field",
              "name": "data",
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "resetSearchTerm",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "getValue",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "ComboValue<T>[]"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "T[]"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "Keys<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "detail",
                  "type": {
                    "text": "IgcComboChangeEventArgs"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getItemsByValueKey",
              "privacy": "private",
              "parameters": [
                {
                  "name": "keys",
                  "type": {
                    "text": "Values<T>[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectValueKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "keys",
                  "type": {
                    "text": "Values<T>[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "deselectValueKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "keys",
                  "type": {
                    "text": "Values<T>[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectObjects",
              "privacy": "private",
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "T[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "deselectObjects",
              "privacy": "private",
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "T[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectAll",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "deselectAll",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "Item<T>[]"
                  }
                },
                {
                  "name": "emit",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "deselect",
              "privacy": "public",
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "Item<T>[]"
                  }
                },
                {
                  "name": "emit",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "Set<T>"
              },
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "changeSelection",
              "privacy": "public",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectByIndex",
              "privacy": "public",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "privacy": "public"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectionController",
          "declaration": {
            "name": "SelectionController",
            "module": "src/components/combo/controllers/selection.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/operations/filter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FilterDataOperation",
          "members": [
            {
              "kind": "method",
              "name": "normalize",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "{ caseSensitive, matchDiacritics }",
                  "type": {
                    "text": "FilteringOptions<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "apply",
              "privacy": "public",
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "ComboRecord<T>[]"
                  }
                },
                {
                  "name": "controller",
                  "type": {
                    "text": "DataController<T>"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "FilterDataOperation",
            "module": "src/components/combo/operations/filter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/operations/group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GroupDataOperation",
          "members": [
            {
              "kind": "field",
              "name": "orderBy",
              "privacy": "protected",
              "default": "new Map(\n    Object.entries({\n      asc: 1,\n      desc: -1,\n    })\n  )"
            },
            {
              "kind": "method",
              "name": "apply",
              "privacy": "public",
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "ComboRecord<T>[]"
                  }
                },
                {
                  "name": "controller",
                  "type": {
                    "text": "DataController<T>"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "GroupDataOperation",
            "module": "src/components/combo/operations/group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/controllers/focus-ring.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A controller class which determines whether a focus ring should be shown to indicate keyboard focus.\nFocus rings are visible only when the user is interacting with a keyboard, not with a mouse, touch, or other input methods.\n\nBy default the class attaches a keyup event handler on the component host and will update its keyboard focus\nstate based on it.",
          "name": "KeyboardFocusRingController",
          "members": [
            {
              "kind": "field",
              "name": "_host",
              "type": {
                "text": "ReactiveControllerHost & HTMLElement"
              },
              "privacy": "private",
              "readonly": true,
              "default": "host"
            },
            {
              "kind": "field",
              "name": "_focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "focused",
              "privacy": "public",
              "description": "Gets whether the current focus state is activated through a keyboard interaction.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "reset",
              "privacy": "public",
              "description": "Resets the keyboard focus state.\n\nUsually called on blur of the component or when a pointer based interaction\nis executed."
            }
          ]
        },
        {
          "kind": "function",
          "name": "addKeyboardFocusRing",
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost & HTMLElement"
              }
            }
          ],
          "description": "Adds a KeyboardFocusRingController responsible for managing keyboard focus state."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "KeyboardFocusRingController",
          "declaration": {
            "name": "KeyboardFocusRingController",
            "module": "src/components/common/controllers/focus-ring.ts"
          }
        },
        {
          "kind": "js",
          "name": "addKeyboardFocusRing",
          "declaration": {
            "name": "addKeyboardFocusRing",
            "module": "src/components/common/controllers/focus-ring.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/controllers/key-bindings.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "arrowLeft",
          "type": {
            "text": "'ArrowLeft'"
          },
          "default": "'ArrowLeft'"
        },
        {
          "kind": "variable",
          "name": "arrowRight",
          "type": {
            "text": "'ArrowRight'"
          },
          "default": "'ArrowRight'"
        },
        {
          "kind": "variable",
          "name": "arrowUp",
          "type": {
            "text": "'ArrowUp'"
          },
          "default": "'ArrowUp'"
        },
        {
          "kind": "variable",
          "name": "arrowDown",
          "type": {
            "text": "'ArrowDown'"
          },
          "default": "'ArrowDown'"
        },
        {
          "kind": "variable",
          "name": "enterKey",
          "type": {
            "text": "'Enter'"
          },
          "default": "'Enter'"
        },
        {
          "kind": "variable",
          "name": "spaceBar",
          "type": {
            "text": "' '"
          },
          "default": "' '"
        },
        {
          "kind": "variable",
          "name": "escapeKey",
          "type": {
            "text": "'Escape'"
          },
          "default": "'Escape'"
        },
        {
          "kind": "variable",
          "name": "homeKey",
          "type": {
            "text": "'Home'"
          },
          "default": "'Home'"
        },
        {
          "kind": "variable",
          "name": "endKey",
          "type": {
            "text": "'End'"
          },
          "default": "'End'"
        },
        {
          "kind": "variable",
          "name": "pageUpKey",
          "type": {
            "text": "'PageUp'"
          },
          "default": "'PageUp'"
        },
        {
          "kind": "variable",
          "name": "pageDownKey",
          "type": {
            "text": "'PageDown'"
          },
          "default": "'PageDown'"
        },
        {
          "kind": "variable",
          "name": "tabKey",
          "type": {
            "text": "'Tab'"
          },
          "default": "'Tab'"
        },
        {
          "kind": "variable",
          "name": "altKey",
          "type": {
            "text": "'Alt'"
          },
          "default": "'Alt'"
        },
        {
          "kind": "variable",
          "name": "ctrlKey",
          "type": {
            "text": "'Ctrl'"
          },
          "default": "'Ctrl'"
        },
        {
          "kind": "variable",
          "name": "metaKey",
          "type": {
            "text": "'Meta'"
          },
          "default": "'Meta'"
        },
        {
          "kind": "variable",
          "name": "shiftKey",
          "type": {
            "text": "'Shift'"
          },
          "default": "'Shift'"
        },
        {
          "kind": "function",
          "name": "parseKeys",
          "parameters": [
            {
              "name": "keys",
              "type": {
                "text": "string | string[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "addKeybindings",
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "ReactiveControllerHost & Element"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "KeyBindingControllerOptions"
              }
            }
          ],
          "description": "Creates a keybinding controller and adds to it to the passed `element`\nwith the provided `options`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "arrowLeft",
          "declaration": {
            "name": "arrowLeft",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "arrowRight",
          "declaration": {
            "name": "arrowRight",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "arrowUp",
          "declaration": {
            "name": "arrowUp",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "arrowDown",
          "declaration": {
            "name": "arrowDown",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "enterKey",
          "declaration": {
            "name": "enterKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "spaceBar",
          "declaration": {
            "name": "spaceBar",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "escapeKey",
          "declaration": {
            "name": "escapeKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "homeKey",
          "declaration": {
            "name": "homeKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "endKey",
          "declaration": {
            "name": "endKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "pageUpKey",
          "declaration": {
            "name": "pageUpKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "pageDownKey",
          "declaration": {
            "name": "pageDownKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "tabKey",
          "declaration": {
            "name": "tabKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "altKey",
          "declaration": {
            "name": "altKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "ctrlKey",
          "declaration": {
            "name": "ctrlKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "metaKey",
          "declaration": {
            "name": "metaKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "shiftKey",
          "declaration": {
            "name": "shiftKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "parseKeys",
          "declaration": {
            "name": "parseKeys",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "addKeybindings",
          "declaration": {
            "name": "addKeybindings",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/controllers/mutation-observer.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createMutationController",
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost & Element"
              }
            },
            {
              "name": "config",
              "type": {
                "text": "MutationControllerConfig<T>"
              }
            }
          ],
          "description": "Creates and attaches a mutation controller with `config` to the passed in `host`.\n\nAutomatically starts/stops observing for mutation changes\nin the respective component connect/disconnect callbacks.\n\nThe mutation observer is disconnected before invoking the passed in callback and re-attached\nafter that in order to not loop itself in endless stream of changes."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createMutationController",
          "declaration": {
            "name": "createMutationController",
            "module": "src/components/common/controllers/mutation-observer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/controllers/root-click.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "addRootClickHandler",
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "RootClickControllerHost"
              }
            },
            {
              "name": "config",
              "optional": true,
              "type": {
                "text": "RootClickControllerConfig"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addRootClickHandler",
          "declaration": {
            "name": "addRootClickHandler",
            "module": "src/components/common/controllers/root-click.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/controllers/root-scroll.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "addRootScrollHandler",
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "RootScrollControllerHost"
              }
            },
            {
              "name": "config",
              "optional": true,
              "type": {
                "text": "RootScrollControllerConfig"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addRootScrollHandler",
          "declaration": {
            "name": "addRootScrollHandler",
            "module": "src/components/common/controllers/root-scroll.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/alternateName.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "alternateName",
          "parameters": [
            {
              "name": "_alternateName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "_allWeb",
              "default": "false",
              "description": "indicates that the original name is used for all modern web rather than just web components."
            },
            {
              "description": "an alternate member name to use.",
              "name": "propName"
            }
          ],
          "description": "Indicates an alternate member name that can be used for a member due to collisions in a wrapping API.",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "alternateName",
          "declaration": {
            "name": "alternateName",
            "module": "src/components/common/decorators/alternateName.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/blazorAdditionalDependencies.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "blazorAdditionalDependencies",
          "parameters": [
            {
              "name": "_additionalDependencies",
              "type": {
                "text": "string"
              },
              "description": "an alternate member name to use."
            }
          ],
          "description": "Indicates additional dependencies that should be loaded by the module of a component, even if they don't appear to be dependencies."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "blazorAdditionalDependencies",
          "declaration": {
            "name": "blazorAdditionalDependencies",
            "module": "src/components/common/decorators/blazorAdditionalDependencies.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/blazorDeepImport.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "blazorDeepImport",
          "parameters": [
            {
              "name": "_constructor",
              "type": {
                "text": "Constructor | AbstractConstructor"
              }
            }
          ],
          "description": "Indicates a class isn't imported at the root of the API, so needs to be referred to with a deep import in the wrappers."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "blazorDeepImport",
          "declaration": {
            "name": "blazorDeepImport",
            "module": "src/components/common/decorators/blazorDeepImport.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/blazorInclude.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "blazorInclude",
          "description": "Indicates a member should be included in the Blazor API even if non-public.",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "blazorInclude",
          "declaration": {
            "name": "blazorInclude",
            "module": "src/components/common/decorators/blazorInclude.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/blazorIndirectRender.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "blazorIndirectRender",
          "parameters": [
            {
              "name": "_constructor",
              "type": {
                "text": "Constructor | AbstractConstructor"
              }
            }
          ],
          "description": "Indicates a class should use the indirect renderer in Blazor."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "blazorIndirectRender",
          "declaration": {
            "name": "blazorIndirectRender",
            "module": "src/components/common/decorators/blazorIndirectRender.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/blazorSuppress.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "blazorSuppress",
          "description": "Indicates a member should be suppressed in the Blazor API.",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "blazorSuppress",
          "declaration": {
            "name": "blazorSuppress",
            "module": "src/components/common/decorators/blazorSuppress.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/blazorSuppressComponent.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "blazorSuppressComponent",
          "parameters": [
            {
              "name": "_constructor",
              "type": {
                "text": "Constructor | AbstractConstructor"
              }
            }
          ],
          "description": "Indicates a class should not be exposed to blazor Blazor."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "blazorSuppressComponent",
          "declaration": {
            "name": "blazorSuppressComponent",
            "module": "src/components/common/decorators/blazorSuppressComponent.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/blazorTwoWayBind.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "blazorTwoWayBind",
          "parameters": [
            {
              "name": "_eventName",
              "type": {
                "text": "string"
              },
              "description": "the name of the event that will be fired when the value changes."
            },
            {
              "name": "_argsPath",
              "type": {
                "text": "string"
              },
              "description": "indicated the path to the updated value withing the event arguments."
            }
          ],
          "description": "Indicates that a property will be updated from the inside, paired with an event, so can be used for bidirectional binding.",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "blazorTwoWayBind",
          "declaration": {
            "name": "blazorTwoWayBind",
            "module": "src/components/common/decorators/blazorTwoWayBind.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/blazorTypeOverride.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "blazorTypeOverride",
          "parameters": [
            {
              "name": "_typeName",
              "type": {
                "text": "string"
              },
              "description": "an alternate type name to use."
            },
            {
              "name": "_allWeb",
              "default": "false",
              "description": "indicates that the alternate type is used for all modern web rather than just blazor."
            }
          ],
          "description": "Indicates an alternate member name that can be used for a member due to collisions in a wrapping API.",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "blazorTypeOverride",
          "declaration": {
            "name": "blazorTypeOverride",
            "module": "src/components/common/decorators/blazorTypeOverride.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/watch.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "watch",
          "parameters": [
            {
              "name": "propName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "WatchOptions"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "watch",
          "declaration": {
            "name": "watch",
            "module": "src/components/common/decorators/watch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/definitions/defineAllComponents.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "defineAllComponents"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defineAllComponents",
          "declaration": {
            "name": "defineAllComponents",
            "module": "src/components/common/definitions/defineAllComponents.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/definitions/defineComponents.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "defineComponents",
          "parameters": [
            {
              "name": "components",
              "type": {
                "text": "IgniteComponent[]"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defineComponents",
          "declaration": {
            "name": "defineComponents",
            "module": "src/components/common/definitions/defineComponents.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/definitions/register.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "registerComponent",
          "parameters": [
            {
              "name": "component",
              "type": {
                "text": "IgniteComponent"
              }
            },
            {
              "name": "dependencies",
              "type": {
                "text": "IgniteComponent[]"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "registerComponent",
          "declaration": {
            "name": "registerComponent",
            "module": "src/components/common/definitions/register.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "component",
            "module": "src/components/common/definitions/register.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/i18n/calendar.resources.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "IgcCalendarResourceStringEN",
          "type": {
            "text": "IgcCalendarResourceStrings"
          },
          "default": "{\n  selectMonth: 'Select month',\n  selectYear: 'Select year',\n  selectDate: 'Select date',\n  selectRange: 'Select range',\n  selectedDate: 'Selected date',\n  startDate: 'Start',\n  endDate: 'End',\n  previousMonth: 'Previous month',\n  nextMonth: 'Next month',\n  previousYear: 'Previous year',\n  nextYear: 'Next year',\n  previousYears: 'Previous {0} years',\n  nextYears: 'Next {0} years',\n  weekLabel: 'Wk',\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcCalendarResourceStringEN",
          "declaration": {
            "name": "IgcCalendarResourceStringEN",
            "module": "src/components/common/i18n/calendar.resources.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/localization/validation-en.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/common/localization/validation-en.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/alert.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcBaseAlertLikeComponent",
          "members": [
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_autoHideTimeout",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_animationPlayer",
              "type": {
                "text": "ReturnType<\n    typeof addAnimationController\n  >"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component is in shown state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "displayTime",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "4000",
              "description": "Determines the duration in ms in which the component will be visible.",
              "attribute": "display-time"
            },
            {
              "kind": "field",
              "name": "keepOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the component should close after the `displayTime` is over.",
              "attribute": "keep-open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "'bottom' | 'middle' | 'top'"
              },
              "privacy": "public",
              "default": "'bottom'",
              "description": "Sets the position of the component in the viewport.",
              "attribute": "position",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "displayTimeChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "keepOpenChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "toggleAnimation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "'open' | 'close'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setAutoHideTimer",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "description": "Opens the component."
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "description": "Closes the component."
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "description": "Toggles the open state of the component."
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'status'"
            },
            {
              "kind": "field",
              "name": "ariaLive",
              "type": {
                "text": "string"
              },
              "default": "'polite'"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component is in shown state.",
              "fieldName": "open",
              "attribute": "open"
            },
            {
              "name": "display-time",
              "type": {
                "text": "number"
              },
              "default": "4000",
              "description": "Determines the duration in ms in which the component will be visible.",
              "fieldName": "displayTime",
              "attribute": "display-time"
            },
            {
              "name": "keep-open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the component should close after the `displayTime` is over.",
              "fieldName": "keepOpen",
              "attribute": "keep-open"
            },
            {
              "name": "position",
              "type": {
                "text": "'bottom' | 'middle' | 'top'"
              },
              "default": "'bottom'",
              "description": "Sets the position of the component in the viewport.",
              "fieldName": "position",
              "attribute": "position"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcBaseAlertLikeComponent",
          "declaration": {
            "name": "IgcBaseAlertLikeComponent",
            "module": "src/components/common/mixins/alert.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/combo-box.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcBaseComboBoxLikeComponent",
          "members": [
            {
              "kind": "field",
              "name": "emitEvent",
              "type": {
                "text": "<\n    K extends keyof IgcBaseComboBoxEventMap,\n    D extends UnpackCustomEvent<IgcBaseComboBoxEventMap[K]>,\n  >(\n    event: K,\n    eventInitDict?: CustomEventInit<D>\n  ) => boolean"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "keepOpenOnSelect",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "attribute": "keep-open-on-select",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "keepOpenOnOutsideClick",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "attribute": "keep-open-on-outside-click",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets the open state of the component.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "emitClosing",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "emitClosed",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "emitOpening",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "emitOpened",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleAnchorClick",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_hide",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_show",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "description": "Shows the component."
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "description": "Hides the component."
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "description": "Toggles the open state of the component."
            }
          ],
          "attributes": [
            {
              "name": "keep-open-on-select",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "fieldName": "keepOpenOnSelect",
              "attribute": "keep-open-on-select"
            },
            {
              "name": "keep-open-on-outside-click",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "fieldName": "keepOpenOnOutsideClick",
              "attribute": "keep-open-on-outside-click"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the open state of the component.",
              "fieldName": "open",
              "attribute": "open"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        },
        {
          "kind": "function",
          "name": "getItems",
          "parameters": [
            {
              "name": "root",
              "type": {
                "text": "Node"
              }
            },
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getActiveItems",
          "parameters": [
            {
              "name": "root",
              "type": {
                "text": "Node"
              }
            },
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getNextActiveItem",
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "T[]"
              }
            },
            {
              "name": "from",
              "type": {
                "text": "T"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getPreviousActiveItem",
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "T[]"
              }
            },
            {
              "name": "from",
              "type": {
                "text": "T"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "setInitialSelectionState",
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "T[]"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcBaseComboBoxLikeComponent",
          "declaration": {
            "name": "IgcBaseComboBoxLikeComponent",
            "module": "src/components/common/mixins/combo-box.ts"
          }
        },
        {
          "kind": "js",
          "name": "getItems",
          "declaration": {
            "name": "getItems",
            "module": "src/components/common/mixins/combo-box.ts"
          }
        },
        {
          "kind": "js",
          "name": "getActiveItems",
          "declaration": {
            "name": "getActiveItems",
            "module": "src/components/common/mixins/combo-box.ts"
          }
        },
        {
          "kind": "js",
          "name": "getNextActiveItem",
          "declaration": {
            "name": "getNextActiveItem",
            "module": "src/components/common/mixins/combo-box.ts"
          }
        },
        {
          "kind": "js",
          "name": "getPreviousActiveItem",
          "declaration": {
            "name": "getPreviousActiveItem",
            "module": "src/components/common/mixins/combo-box.ts"
          }
        },
        {
          "kind": "js",
          "name": "setInitialSelectionState",
          "declaration": {
            "name": "setInitialSelectionState",
            "module": "src/components/common/mixins/combo-box.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/constructor.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/event-emitter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EventEmitterInterface",
          "members": [
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "function",
          "name": "EventEmitterMixin",
          "return": {
            "type": {
              "text": "Constructor<EventEmitterInterface<E>> & T"
            }
          },
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "EventEmitterMixin",
          "members": [
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EventEmitterInterface",
          "declaration": {
            "name": "EventEmitterInterface",
            "module": "src/components/common/mixins/event-emitter.ts"
          }
        },
        {
          "kind": "js",
          "name": "EventEmitterMixin",
          "declaration": {
            "name": "EventEmitterMixin",
            "module": "src/components/common/mixins/event-emitter.ts"
          }
        },
        {
          "kind": "js",
          "name": "EventEmitterMixin",
          "declaration": {
            "name": "EventEmitterMixin",
            "module": "src/components/common/mixins/event-emitter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/form-associated-required.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormRequiredInterface",
          "members": [
            {
              "kind": "method",
              "name": "requiredChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Makes the control a required field in a form context.",
              "attribute": "required"
            }
          ],
          "attributes": [
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Makes the control a required field in a form context.",
              "fieldName": "required"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "Turns the passed class element into a Form Associated Custom Element with\nadditional `required` attribute.",
          "name": "FormAssociatedRequiredMixin",
          "members": [
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "requiredChange",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a required field in a form context.",
              "fieldName": "required",
              "attribute": "required"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/form-associated.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedMixin",
              "module": "/src/components/common/mixins/form-associated.js"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormRequiredInterface",
          "declaration": {
            "name": "FormRequiredInterface",
            "module": "src/components/common/mixins/form-associated-required.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormAssociatedRequiredMixin",
          "declaration": {
            "name": "FormAssociatedRequiredMixin",
            "module": "src/components/common/mixins/form-associated-required.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/form-associated.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormAssociatedElementInterface",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time."
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`"
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state."
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback."
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control."
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string | FormData | File"
                  }
                },
                {
                  "name": "mode",
                  "type": {
                    "text": "'autocomplete' | 'restore'"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the component",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Control the validity of the control.",
              "attribute": "invalid"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Checks for validity of the control and emits the invalid event if it invalid."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Checks for validity of the control and shows the browser message if it invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid."
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "The disabled state of the component",
              "fieldName": "disabled"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "description": "Control the validity of the control.",
              "fieldName": "invalid"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "Turns the passed class element into a Form Associated Custom Element.",
          "name": "FormAssociatedMixin",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "protected",
              "description": "The default value of the control at \"creation\" time."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Control the validity of the control.",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setDefaultValue",
              "privacy": "protected",
              "description": "Saves the initial value/checked state of the control.\n\nCalled on connectedCallback."
            },
            {
              "kind": "method",
              "name": "restoreDefaultValue",
              "privacy": "protected",
              "description": "Called when the parent form is reset.\n\nRestores the initially bound value/checked state of the control."
            },
            {
              "kind": "field",
              "name": "handleInvalid",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | File | FormData | null"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "string | File | FormData | null | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "flags",
                  "optional": true,
                  "type": {
                    "text": "ValidityStateFlags | undefined"
                  }
                },
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state."
            },
            {
              "kind": "method",
              "name": "setInvalidState",
              "privacy": "protected",
              "description": "Applies the FormAssociatedElementInterface.invalid| `invalid` attribute on the control and the associated styles\nif the element has completed the first update cycle or it has been interacted with by the user.\n\nUsually, it should be called after FormAssociatedElementInterface.updateValidity| `updateValidity()`"
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid."
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name"
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "invalid",
              "description": "Control the validity of the control.",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormAssociatedElementInterface",
          "declaration": {
            "name": "FormAssociatedElementInterface",
            "module": "src/components/common/mixins/form-associated.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormAssociatedMixin",
          "declaration": {
            "name": "FormAssociatedMixin",
            "module": "src/components/common/mixins/form-associated.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/option.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcBaseOptionLikeComponent",
          "members": [
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_active",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_content",
              "type": {
                "text": "Array<Element>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_contentSlotText",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "active",
              "privacy": "public",
              "description": "Whether the item is active.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "Whether the item is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "privacy": "public",
              "description": "Whether the item is selected.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The current value of the item.\nIf not specified, the element's text content is used.",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'option'"
            }
          ],
          "attributes": [
            {
              "name": "active",
              "description": "Whether the item is active.",
              "fieldName": "active",
              "attribute": "active"
            },
            {
              "name": "disabled",
              "description": "Whether the item is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "selected",
              "description": "Whether the item is selected.",
              "fieldName": "selected",
              "attribute": "selected"
            },
            {
              "name": "value",
              "description": "The current value of the item.\nIf not specified, the element's text content is used.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcBaseOptionLikeComponent",
          "declaration": {
            "name": "IgcBaseOptionLikeComponent",
            "module": "src/components/common/mixins/option.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/sizable.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SizableInterface",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size"
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "SizableMixin",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "privacy": "public",
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "updateSize",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "\"small\" | \"medium\" | \"large\""
              },
              "default": "'large'",
              "description": "Determines the size of the component.",
              "deprecated": "since v4.5.0. Use the `--ig-size` CSS custom property instead.",
              "fieldName": "size",
              "attribute": "size"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SizableInterface",
          "declaration": {
            "name": "SizableInterface",
            "module": "src/components/common/mixins/sizable.ts"
          }
        },
        {
          "kind": "js",
          "name": "SizableMixin",
          "declaration": {
            "name": "SizableMixin",
            "module": "src/components/common/mixins/sizable.ts"
          }
        }
      ]
    }
  ]
}
