import { LitElement } from 'lit';
import type { Constructor } from '../common/mixins/constructor.js';
export interface IgcChipEventMap {
    igcRemove: CustomEvent<boolean>;
    igcSelect: CustomEvent<boolean>;
}
declare const IgcChipComponent_base: Constructor<import("../common/mixins/sizable.js").SizableInterface> & Constructor<import("../common/mixins/event-emitter.js").EventEmitterInterface<IgcChipEventMap>> & Constructor<LitElement>;
/**
 * Chips help people enter information, make selections, filter content, or trigger actions.
 *
 * @element igc-chip
 *
 * @slot - Renders the chip data.
 * @slot prefix - Renders content before the data of the chip.
 * @slot suffix - Renders content after the data of the chip.
 *
 * @fires igcRemove - Emits an event when the chip component is removed. Returns the removed chip component.
 * @fires igcSelect - Emits event when the chip component is selected/deselected and any related animations and transitions also end.
 *
 * @csspart base - The base wrapper of the chip.
 * @csspart prefix - The prefix container of the chip.
 * @csspart suffix - The suffix container of the chip.
 */
export default class IgcChipComponent extends IgcChipComponent_base {
    static readonly tagName = "igc-chip";
    static styles: import("lit").CSSResult[];
    static register(): void;
    private _removePartRef;
    /**
     * Sets the disabled state for the chip.
     * @attr
     */
    disabled: boolean;
    /**
     * Defines if the chip is removable or not.
     * @attr
     */
    removable: boolean;
    /**
     * Defines if the chip is selectable or not.
     * @attr
     */
    selectable: boolean;
    /**
     * Defines if the chip is selected or not.
     * @attr
     */
    selected: boolean;
    /**
     * A property that sets the color variant of the chip component.
     * @attr
     */
    variant: 'primary' | 'success' | 'danger' | 'warning' | 'info';
    constructor();
    protected handleSelect(): void;
    protected handleRemove(e: Event): void;
    protected render(): import("lit-html").TemplateResult<1>;
    protected slotChanges(): void;
}
declare global {
    interface HTMLElementTagNameMap {
        'igc-chip': IgcChipComponent;
    }
}
export {};
