var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var IgcChipComponent_1;
import { LitElement, html, nothing } from 'lit';
import { property } from 'lit/decorators.js';
import { createRef, ref } from 'lit/directives/ref.js';
import { themes } from '../../theming/theming-decorator.js';
import { addKeybindings } from '../common/controllers/key-bindings.js';
import { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';
import { registerComponent } from '../common/definitions/register.js';
import { EventEmitterMixin } from '../common/mixins/event-emitter.js';
import { SizableMixin } from '../common/mixins/sizable.js';
import IgcIconComponent from '../icon/icon.js';
import { styles } from './themes/chip.base.css.js';
import { styles as shared } from './themes/shared/chip.common.css.js';
import { all } from './themes/themes.js';
let IgcChipComponent = IgcChipComponent_1 = class IgcChipComponent extends SizableMixin(EventEmitterMixin(LitElement)) {
    static register() {
        registerComponent(IgcChipComponent_1, IgcIconComponent);
    }
    constructor() {
        super();
        this._removePartRef = createRef();
        this.disabled = false;
        this.removable = false;
        this.selectable = false;
        this.selected = false;
        this.size = 'medium';
        addKeybindings(this, {
            ref: this._removePartRef,
            bindingDefaults: { triggers: ['keyup'] },
        }).setActivateHandler(this.handleRemove);
    }
    handleSelect() {
        if (this.selectable) {
            this.selected = !this.selected;
            this.emitEvent('igcSelect', { detail: this.selected });
        }
    }
    handleRemove(e) {
        this.emitEvent('igcRemove');
        e.stopPropagation();
    }
    render() {
        return html `
      <button
        part="base"
        .disabled="${this.disabled}"
        aria-selected="${this.selected ? 'true' : 'false'}"
        aria-disabled="${this.disabled ? 'true' : 'false'}"
        @click=${this.handleSelect}
      >
        <span part="prefix">
          ${this.selectable && this.selected
            ? html `<slot @slotchange=${this.slotChanges} name="select">
                <igc-icon
                  size=${this.size}
                  name="chip_select"
                  collection="internal"
                ></igc-icon>
              </slot>`
            : nothing}
          <slot name="start"></slot>
          <slot name="prefix"></slot>
        </span>
        <slot></slot>
        <span part="suffix">
          <slot name="end"></slot>
          <slot name="suffix"></slot>
          ${this.removable && !this.disabled
            ? html `<slot
                ${ref(this._removePartRef)}
                @slotchange=${this.slotChanges}
                @click=${this.handleRemove}
                name="remove"
              >
                <igc-icon
                  size=${this.size}
                  name="chip_cancel"
                  collection="internal"
                  tabindex="0"
                  role="button"
                  aria-label="remove"
                ></igc-icon>
              </slot>`
            : nothing}
        </span>
      </button>
    `;
    }
    slotChanges() {
        this.requestUpdate();
    }
};
IgcChipComponent.tagName = 'igc-chip';
IgcChipComponent.styles = [styles, shared];
__decorate([
    property({ type: Boolean, reflect: true })
], IgcChipComponent.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcChipComponent.prototype, "removable", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcChipComponent.prototype, "selectable", void 0);
__decorate([
    property({ type: Boolean, reflect: true }),
    blazorTwoWayBind('igcSelect', 'detail')
], IgcChipComponent.prototype, "selected", void 0);
__decorate([
    property({ reflect: true })
], IgcChipComponent.prototype, "variant", void 0);
IgcChipComponent = IgcChipComponent_1 = __decorate([
    themes(all)
], IgcChipComponent);
export default IgcChipComponent;
//# sourceMappingURL=chip.js.map