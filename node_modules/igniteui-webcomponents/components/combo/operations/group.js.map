{"version":3,"file":"group.js","sourceRoot":"","sources":["../../../../src/components/combo/operations/group.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAI/C,MAAM,CAAC,OAAO,OAAO,kBAAkB;IAAvC;QACY,YAAO,GAAG,IAAI,GAAG,CACzB,MAAM,CAAC,OAAO,CAAC;YACb,GAAG,EAAE,CAAC;YACN,IAAI,EAAE,CAAC,CAAC;SACT,CAAC,CACH,CAAC;IAkCJ,CAAC;IAhCQ,KAAK,CAAC,IAAsB,EAAE,UAA6B;QAChE,MAAM,EACJ,eAAe,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,GAC/D,GAAG,UAAU,CAAC;QAEf,IAAI,CAAC,QAAQ;YAAE,OAAO,IAAI,CAAC;QAE3B,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAC3B,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,CACzD,CAAC;QAEF,IAAI,SAAS,KAAK,MAAM,EAAE,CAAC;YACzB,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAC5C,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACnB,OAAO,OAAQ,GAAG,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACnE,CAAC,CAAC,CAAC;QACL,CAAC;QAED,OAAO,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,EAAE;YACvC,KAAK,CAAC,OAAO,CAAC;gBACZ,SAAS,EAAE,CAAC,CAAC;gBACb,MAAM,EAAE,IAAI;gBACZ,KAAK,EAAE;oBACL,CAAC,QAAmB,CAAC,EAAE,KAAK;oBAC5B,CAAC,UAAqB,CAAC,EAAE,KAAK;oBAC9B,CAAC,QAAmB,CAAC,EAAE,KAAK;iBACxB;aACP,CAAC,CAAC;YAEH,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { groupBy } from '../../common/util.js';\nimport type { DataController } from '../controllers/data.js';\nimport type { ComboRecord, Keys } from '../types.js';\n\nexport default class GroupDataOperation<T extends object> {\n  protected orderBy = new Map(\n    Object.entries({\n      asc: 1,\n      desc: -1,\n    })\n  );\n\n  public apply(data: ComboRecord<T>[], controller: DataController<T>) {\n    const {\n      groupingOptions: { groupKey, valueKey, displayKey, direction },\n    } = controller;\n\n    if (!groupKey) return data;\n\n    const groups = Object.entries(\n      groupBy(data, (item) => item.value[groupKey] ?? 'Other')\n    );\n\n    if (direction !== 'none') {\n      const orderBy = this.orderBy.get(direction);\n      groups.sort((a, b) => {\n        return orderBy! * controller.compareCollator.compare(a[0], b[0]);\n      });\n    }\n\n    return groups.flatMap(([group, items]) => {\n      items.unshift({\n        dataIndex: -1,\n        header: true,\n        value: {\n          [valueKey as Keys<T>]: group,\n          [displayKey as Keys<T>]: group,\n          [groupKey as Keys<T>]: group,\n        } as T,\n      });\n\n      return items;\n    });\n  }\n}\n"]}