{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../../../src/components/combo/operations/filter.ts"],"names":[],"mappings":"AAGA,MAAM,CAAC,OAAO,OAAO,mBAAmB;IAC5B,SAAS,CACjB,MAAc,EACd,EAAE,aAAa,EAAE,eAAe,EAAuB;QAEvD,MAAM,GAAG,GAAG,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAChE,OAAO,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAC9E,CAAC;IAEM,KAAK,CAAC,IAAsB,EAAE,UAA6B;QAChE,MAAM,EAAE,UAAU,EAAE,gBAAgB,EAAE,GAAG,UAAU,CAAC;QACpD,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,gBAAgB,CAAC;QAE5C,IAAI,CAAC,UAAU;YAAE,OAAO,IAAI,CAAC;QAE7B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;QAE1D,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;YAC/B,MAAM,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC;YAClD,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import type { DataController } from '../controllers/data.js';\nimport type { ComboRecord, FilteringOptions } from '../types.js';\n\nexport default class FilterDataOperation<T extends object> {\n  protected normalize<T extends object>(\n    string: string,\n    { caseSensitive, matchDiacritics }: FilteringOptions<T>\n  ) {\n    const str = caseSensitive ? string : string.toLocaleLowerCase();\n    return matchDiacritics ? str : str.normalize('NFKD').replace(/\\p{M}/gu, '');\n  }\n\n  public apply(data: ComboRecord<T>[], controller: DataController<T>) {\n    const { searchTerm, filteringOptions } = controller;\n    const { filterKey: key } = filteringOptions;\n\n    if (!searchTerm) return data;\n\n    const term = this.normalize(searchTerm, filteringOptions);\n\n    return data.filter(({ value }) => {\n      const string = key ? `${value[key]}` : `${value}`;\n      return this.normalize(string, filteringOptions).includes(term);\n    });\n  }\n}\n"]}