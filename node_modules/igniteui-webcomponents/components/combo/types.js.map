{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/components/combo/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { RenderItemFunction } from '@lit-labs/virtualizer/virtualize.js';\nimport type { ReactiveControllerHost, TemplateResult } from 'lit';\n\nimport type IgcComboComponent from './combo.js';\n\nexport type Keys<T> = keyof T;\nexport type Values<T> = T[keyof T];\nexport type Item<T extends object> = T | Values<T>;\n\nexport type ComboRecord<T extends object> = {\n  value: T;\n  header: boolean;\n  dataIndex: number;\n};\n\nexport type ComboHost<T extends object> = ReactiveControllerHost &\n  IgcComboComponent<T>;\n\nexport type GroupingDirection = 'asc' | 'desc' | 'none';\nexport type ComboChangeType = 'selection' | 'deselection' | 'addition';\nexport type ComboRenderFunction<T extends object> = RenderItemFunction<\n  ComboRecord<T>\n>;\nexport type ComboValue<T> = T | Values<T>;\n\nexport interface FilteringOptions<T extends object> {\n  filterKey: Keys<T> | undefined;\n  caseSensitive?: boolean;\n  matchDiacritics?: boolean;\n}\n\nexport interface GroupingOptions<T extends object> {\n  groupKey?: Keys<T>;\n  valueKey?: Keys<T>;\n  displayKey?: Keys<T>;\n  direction: GroupingDirection;\n}\n\n/* marshalByValue */\nexport interface IgcComboChangeEventArgs<T extends object = any> {\n  newValue: ComboValue<T>[];\n  /* primitiveValue */\n  items: T[];\n  /* blazorAlternateName: changeType */\n  type: ComboChangeType;\n}\n\nexport interface IgcComboEventMap {\n  igcChange: CustomEvent<IgcComboChangeEventArgs>;\n  igcFocus: CustomEvent<void>;\n  igcBlur: CustomEvent<void>;\n  igcOpening: CustomEvent<void>;\n  igcOpened: CustomEvent<void>;\n  igcClosing: CustomEvent<void>;\n  igcClosed: CustomEvent<void>;\n}\n\nexport type ComboItemTemplate<T extends object> = (\n  props: ComboTemplateProps<T>\n) => TemplateResult;\nexport interface ComboTemplateProps<T extends object> {\n  item: T;\n}\n"]}