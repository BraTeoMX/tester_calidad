import { LitElement } from 'lit';
import type { Constructor } from '../common/mixins/constructor.js';
export interface IgcBannerComponentEventMap {
    igcClosing: CustomEvent<void>;
    igcClosed: CustomEvent<void>;
}
declare const IgcBannerComponent_base: Constructor<import("../common/mixins/event-emitter.js").EventEmitterInterface<IgcBannerComponentEventMap>> & Constructor<LitElement>;
/**
 * The `igc-banner` component displays important and concise message(s) for a user to address, that is specific to a page or feature.
 *
 * @element igc-banner
 *
 * @slot - Renders the text content of the banner message.
 * @slot prefix - Renders additional content at the start of the message block.
 * @slot actions - Renders any action elements.
 *
 * @fires igcClosing - Emitted before closing the banner - when a user interacts (click) with the default action of the banner.
 * @fires igcClosed - Emitted after the banner is closed - when a user interacts (click) with the default action of the banner.
 *
 * @csspart base - The base wrapper of the banner component.
 * @csspart spacer - The inner wrapper that sets the space around the banner.
 * @csspart message - The part that holds the text and the illustration.
 * @csspart illustration - The part that holds the banner icon/illustration.
 * @csspart content - The part that holds the banner text content.
 * @csspart actions - The part that holds the banner action buttons.
 */
export default class IgcBannerComponent extends IgcBannerComponent_base {
    static readonly tagName = "igc-banner";
    static styles: import("lit").CSSResult[];
    static register(): void;
    private _internals;
    private _bannerRef;
    private _animationPlayer;
    /**
     * Determines whether the banner is being shown/hidden.
     * @attr
     */
    open: boolean;
    constructor();
    /** Shows the banner if not already shown. Returns `true` when the animation has completed. */
    show(): Promise<boolean>;
    /** Hides the banner if not already hidden. Returns `true` when the animation has completed. */
    hide(): Promise<boolean>;
    /** Toggles between shown/hidden state. Returns `true` when the animation has completed. */
    toggle(): Promise<boolean>;
    private toggleAnimation;
    private handleClick;
    protected render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'igc-banner': IgcBannerComponent;
    }
}
export {};
