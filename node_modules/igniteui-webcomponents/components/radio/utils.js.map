{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/components/radio/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAc9C,MAAM,UAAU,QAAQ,CAAC,MAAyB;IAChD,MAAM,MAAM,GAAqB;QAC/B,MAAM,EAAE,EAAE;QACV,OAAO,EAAE,EAAE;QACX,MAAM,EAAE,EAAE;QACV,QAAQ,EAAE,EAAE;KACb,CAAC;IAIF,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QACjB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE3B,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9B,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;YACrB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7B,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,MAAM,QAAQ,GAAG,SAAS,CACxB,UAAU,CAAC,QAAQ,CAAC,eAAe,EACnC,cAAc,EACd,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,OAAO,UAAU,MAAM,CAAC,IAAI,IAAI,CAAC,CACrE,CAAC;IAEF,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE,CAAC;QAC5B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEzB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC;QAED,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC;QAED,IAAI,IAAI,KAAK,MAAM,EAAE,CAAC;YACpB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { iterNodes } from '../common/util.js';\nimport type IgcRadioComponent from './radio.js';\n\ntype RadioQueryResult = {\n  /** Radio components under the same group name */\n  radios: IgcRadioComponent[];\n  /** Radio components under the same group name that are not disabled */\n  active: IgcRadioComponent[];\n  /** Radio components under the same group name sans the radio member passed in `getGroup` */\n  siblings: IgcRadioComponent[];\n  /** Radio components under the same group name that are marked as checked */\n  checked: IgcRadioComponent[];\n};\n\nexport function getGroup(member: IgcRadioComponent) {\n  const result: RadioQueryResult = {\n    active: [],\n    checked: [],\n    radios: [],\n    siblings: [],\n  };\n\n  // No name property for the passed radio. Skip DOM search and return a group of one radio\n  // with appropriate states.\n  if (!member.name) {\n    result.radios.push(member);\n\n    if (member.checked) {\n      result.checked.push(member);\n    }\n\n    if (!member.disabled) {\n      result.active.push(member);\n    }\n\n    return result;\n  }\n\n  const iterator = iterNodes<IgcRadioComponent>(\n    globalThis.document.documentElement,\n    'SHOW_ELEMENT',\n    (radio) => radio.matches(`${member.tagName}[name='${member.name}']`)\n  );\n\n  for (const each of iterator) {\n    result.radios.push(each);\n\n    if (!each.disabled) {\n      result.active.push(each);\n    }\n\n    if (each.checked) {\n      result.checked.push(each);\n    }\n\n    if (each !== member) {\n      result.siblings.push(each);\n    }\n  }\n\n  return result;\n}\n"]}