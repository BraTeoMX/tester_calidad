{"version":3,"file":"textarea.js","sourceRoot":"","sources":["../../../src/components/textarea/textarea.ts"],"names":[],"mappings":";;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,KAAK,CAAC;AAChD,OAAO,EACL,QAAQ,EACR,KAAK,EACL,qBAAqB,EACrB,kBAAkB,GACnB,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AACzD,OAAO,EAAE,IAAI,EAAE,MAAM,wBAAwB,CAAC;AAC9C,OAAO,EAAkB,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAEvE,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,oCAAoC,CAAC;AAEzE,OAAO,EAAE,KAAK,EAAE,MAAM,+BAA+B,CAAC;AACtD,OAAO,EAAE,iBAAiB,EAAE,MAAM,mCAAmC,CAAC;AAEtE,OAAO,EAAE,iBAAiB,EAAE,MAAM,mCAAmC,CAAC;AACtE,OAAO,EAAE,2BAA2B,EAAE,MAAM,8CAA8C,CAAC;AAC3F,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AACzE,OAAO,EAEL,kBAAkB,EAClB,kBAAkB,EAClB,iBAAiB,GAClB,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAAE,MAAM,IAAI,MAAM,EAAE,MAAM,wCAAwC,CAAC;AAC1E,OAAO,EAAE,MAAM,EAAE,MAAM,+BAA+B,CAAC;AACvD,OAAO,EAAE,GAAG,EAAE,MAAM,oBAAoB,CAAC;AAkC1B,IAAM,oBAAoB,4BAA1B,MAAM,oBAAqB,SAAQ,2BAA2B,CAC3E,iBAAiB,CAA+C,UAAU,CAAC,CAC5E;IAKQ,MAAM,CAAC,QAAQ;QACpB,iBAAiB,CAAC,sBAAoB,CAAC,CAAC;IAC1C,CAAC;IAmCD,IAAY,YAAY;QACtB,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM;SACtD,CAAC;IACJ,CAAC;IAwHD,IAAW,KAAK,CAAC,KAAa;QAC5B,IAAI,CAAC,MAAM,GAAG,KAAK,IAAI,EAAE,CAAC;QAC1B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACpD,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAED,IAAW,KAAK;QACd,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAmCD;QACE,KAAK,EAAE,CAAC;QAzMS,eAAU,GAAsB;YACjD,iBAAiB;YACjB,kBAAkB;YAClB,kBAAkB;SACnB,CAAC;QAGQ,YAAO,GAAG,YAAY,sBAAoB,CAAC,SAAS,EAAE,EAAE,CAAC;QAO3D,WAAM,GAAG,EAAE,CAAC;QAmGb,aAAQ,GAAG,KAAK,CAAC;QAgBjB,aAAQ,GAAG,KAAK,CAAC;QASjB,WAAM,GAAiC,UAAU,CAAC;QASlD,SAAI,GAAG,CAAC,CAAC;QAgCA,eAAU,GAAG,IAAI,CAAC;QAU3B,SAAI,GAA4B,MAAM,CAAC;QASvC,iBAAY,GAAG,KAAK,CAAC;QAI1B,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE;YAClC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAG,EAAE;YACjC,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACL,CAAC;IAEe,KAAK,CAAC,iBAAiB;QACrC,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,MAAM,IAAI,CAAC,cAAc,CAAC;QAE1B,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,cAAc,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QAC/D,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAEe,oBAAoB;QAClC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;QAC3B,KAAK,CAAC,oBAAoB,EAAE,CAAC;IAC/B,CAAC;IAGM,MAAM;QACX,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;IACtB,CAAC;IAGM,iBAAiB,CACtB,KAAa,EACb,GAAW,EACX,YAA6C,MAAM;QAEnD,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;IACtD,CAAC;IAGM,YAAY,CACjB,WAAmB,EACnB,KAAa,EACb,GAAW,EACX,aAAsD,UAAU;QAEhE,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,WAAW,EAAE,KAAK,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;QAC7D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;IAChC,CAAC;IAMe,QAAQ,CAAC,CAAW,EAAE,CAAW;QAC/C,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,SAAS;YAChC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAW,EAAE,CAAW,CAAC;YAC/C,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAoB,CAAC,CAAC;IAChD,CAAC;IAES,gBAAgB,CAAC,IAAY;QACrC,OAAO;YACL,CAAC,IAAI,CAAC,EAAE,IAAI;YACZ,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;YAClC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;YAClC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK;SACrB,CAAC;IACJ,CAAC;IAEkB,KAAK,CAAC,YAAY;QACnC,MAAM,IAAI,CAAC,cAAc,CAAC;QAC1B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC;IAClC,CAAC;IAGe,AAAN,KAAK,CAAC,YAAY;QAC1B,MAAM,IAAI,CAAC,cAAc,CAAC;QAC1B,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAIS,aAAa;QACrB,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE,CAAC;YAC3B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;YACjC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC;QACxD,CAAC;aAAM,CAAC;YACN,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC;QACzD,CAAC;IACH,CAAC;IAEO,aAAa;QACnB,MAAM,QAAQ,GAAG,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9C,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG;YACpB,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;YACvD,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC;SAC3D,CAAC;QACF,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,GAAG,GAAG,MAAM,CAAC;IAChD,CAAC;IAES,WAAW;QACnB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAC9B,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACrD,CAAC;IAES,YAAY;QACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAC9B,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACtD,CAAC;IAES,eAAe;QACvB,MAAM,KAAK,GAAG,EAAE,CAAC;QAEjB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YAClC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC;YACtC,IAAI,IAAI,EAAE,CAAC;gBACT,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnB,CAAC;QACH,CAAC;QAED,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC;YACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IAES,UAAU;QAClB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAES,eAAe;QACvB,OAAO,IAAI,CAAA;;oBAEK,IAAI,CAAC,eAAe;aAC3B,CAAC;IACZ,CAAC;IAES,gBAAgB;QACxB,OAAO,IAAI,CAAA;wCACyB,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC;+CACnB,IAAI,CAAC,UAAU;;KAEzD,CAAC;IACJ,CAAC;IAES,YAAY;QACpB,OAAO,IAAI,CAAA,8BAA8B,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;wCAC7B,IAAI,CAAC,UAAU;WAC5C,CAAC;IACV,CAAC;IAES,YAAY;QACpB,OAAO,IAAI,CAAA,8BAA8B,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;wCAC7B,IAAI,CAAC,UAAU;WAC5C,CAAC;IACV,CAAC;IAES,WAAW;QACnB,OAAO,IAAI,CAAC,KAAK;YACf,CAAC,CAAC,IAAI,CAAA,2BAA2B,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,OAAO;aACjD,IAAI,CAAC,KAAK;UACb;YACJ,CAAC,CAAC,OAAO,CAAC;IACd,CAAC;IAES,cAAc;QACtB,OAAO,IAAI,CAAA;QACP,IAAI,CAAC,WAAW,EAAE;kBACR,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;UACvD,IAAI,CAAC,YAAY,EAAE,IAAI,IAAI,CAAC,WAAW,EAAE,IAAI,IAAI,CAAC,YAAY,EAAE;;QAElE,IAAI,CAAC,gBAAgB,EAAE;KAC1B,CAAC;IACJ,CAAC;IAES,cAAc;QACtB,OAAO,IAAI,CAAA;;eAEA,WAAW,CAAC;YACjB,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC;YACrC,QAAQ,EAAE,IAAI,CAAC,KAAK;SACrB,CAAC;;4BAEkB,IAAI,CAAC,YAAY,EAAE;4BACnB,IAAI,CAAC,WAAW,EAAE;UACpC,IAAI,CAAC,WAAW,EAAE;;0BAEF,IAAI,CAAC,YAAY,EAAE;;QAErC,IAAI,CAAC,gBAAgB,EAAE;KAC1B,CAAC;IACJ,CAAC;IAES,WAAW;QACnB,OAAO,IAAI,CAAA,GAAG,IAAI,CAAC,eAAe,EAAE;;aAE3B,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,OAAO;;gBAEpB,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC;iBAC1B,IAAI,CAAC,WAAW;kBACf,IAAI,CAAC,YAAY;sBACb,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC;gBACjC,IAAI,CAAC,IAAI;iBACR,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;gBACjB,IAAI,CAAC,IAAI;uBACF,SAAS,CAAC,IAAI,CAAC,YAAmB,CAAC;yBACjC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC;oBACnC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC;qBACxB,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC;oBAC3B,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC;oBACzB,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;oBACzD,IAAI,CAAC,QAAQ;oBACb,IAAI,CAAC,QAAQ;oBACb,IAAI,CAAC,QAAQ;uBACV,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;mBACnC,CAAC;IAClB,CAAC;IAEkB,MAAM;QACvB,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,UAAU,CAAC;QACpD,OAAO,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;IACpE,CAAC;;AAjbsB,4BAAO,GAAG,cAAc,AAAjB,CAAkB;AAClC,2BAAM,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,AAAnB,CAAoB;AAchB,8BAAS,GAAG,aAAa,EAAE,AAAlB,CAAmB;AAGnC,sCAAiB,GAAG;IACnC,GAAG,UAAU,CAAC,iBAAiB;IAC/B,cAAc,EAAE,IAAI;CACrB,AAHiC,CAGhC;AAMM;IADP,kBAAkB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;uDACN;AAGtB;IADT,qBAAqB,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;sDACF;AAG9B;IADT,qBAAqB,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;sDACF;AAG9B;IADT,qBAAqB,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC;wDACL;AAGlC;IADP,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC;mDACY;AAgB7B;IADN,QAAQ,EAAE;0DACkB;AAUb;IADf,QAAQ,EAAE;4DAOM;AAWD;IADf,QAAQ,CAAC,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC;uDAS3B;AAQH;IADN,QAAQ,EAAE;mDACW;AASf;IADN,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC;uDACzB;AAQnB;IADN,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC;uDACzB;AAOnB;IADN,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;sDACnB;AAQjB;IADN,QAAQ,EAAE;yDACiB;AAQrB;IADN,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC;sDAC1C;AASjB;IADN,QAAQ,EAAE;oDAC8C;AASlD;IADN,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;kDACX;AAShB;IADC,QAAQ,EAAE;iDAMV;AAkBe;IAPf,QAAQ,CAAC;QACR,IAAI,EAAE,OAAO;QACb,SAAS,EAAE;YACT,aAAa,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,KAAK,KAAK,OAAO,CAAC;YACxD,WAAW,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;SACnD;KACF,CAAC;wDACgC;AAU3B;IADN,QAAQ,EAAE;kDACmC;AASvC;IADN,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;0DAC3C;AAiFZ;IADf,KAAK,CAAC,OAAO,CAAC;wDAId;AAIS;IAFT,KAAK,CAAC,MAAM,EAAE,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC;IAC7C,KAAK,CAAC,QAAQ,EAAE,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC;yDAQ/C;AAjTkB,oBAAoB;IADxC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC;GACG,oBAAoB,CAqbxC;eArboB,oBAAoB","sourcesContent":["import { LitElement, html, nothing } from 'lit';\nimport {\n  property,\n  query,\n  queryAssignedElements,\n  queryAssignedNodes,\n} from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nimport { type StyleInfo, styleMap } from 'lit/directives/style-map.js';\n\nimport { themeSymbol, themes } from '../../theming/theming-decorator.js';\nimport type { Theme } from '../../theming/types.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { registerComponent } from '../common/definitions/register.js';\nimport type { Constructor } from '../common/mixins/constructor.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { FormAssociatedRequiredMixin } from '../common/mixins/form-associated-required.js';\nimport { asNumber, createCounter, partNameMap } from '../common/util.js';\nimport {\n  type Validator,\n  maxLengthValidator,\n  minLengthValidator,\n  requiredValidator,\n} from '../common/validators.js';\nimport { styles as shared } from './themes/shared/textarea.common.css.js';\nimport { styles } from './themes/textarea.base.css.js';\nimport { all } from './themes/themes.js';\n\nexport interface IgcTextareaEventMap {\n  igcInput: CustomEvent<string>;\n  igcChange: CustomEvent<string>;\n  igcFocus: CustomEvent<void>;\n  igcBlur: CustomEvent<void>;\n}\n\n/**\n * This element represents a multi-line plain-text editing control,\n * useful when you want to allow users to enter a sizeable amount of free-form text,\n * for example a comment on a review or feedback form.\n *\n * @element igc-textarea\n *\n * @slot - Text content from the default slot will be used as the value of the component.\n * @slot prefix - Renders content before the input.\n * @slot suffix - Renders content after input.\n * @slot helper-text - Renders content below the input.\n *\n * @fires igcInput - Emitted when the control receives user input.\n * @fires igcChange - Emitted when the a change to the control value is committed by the user.\n * @fires igcFocus - Emitted when the control gains focus.\n * @fires igcBlur - Emitted when the control loses focus.\n *\n * @csspart container - The main wrapper that holds all main input elements.\n * @csspart input - The native input element.\n * @csspart label - The native label element.\n * @csspart prefix - The prefix wrapper.\n * @csspart suffix - The suffix wrapper.\n * @csspart helper-text - The helper text wrapper.\n */\n@themes(all, true)\nexport default class IgcTextareaComponent extends FormAssociatedRequiredMixin(\n  EventEmitterMixin<IgcTextareaEventMap, Constructor<LitElement>>(LitElement)\n) {\n  public static readonly tagName = 'igc-textarea';\n  public static styles = [styles, shared];\n\n  /* blazorSuppress */\n  public static register() {\n    registerComponent(IgcTextareaComponent);\n  }\n\n  private declare readonly [themeSymbol]: Theme;\n  protected override validators: Validator<this>[] = [\n    requiredValidator,\n    minLengthValidator,\n    maxLengthValidator,\n  ];\n\n  private static readonly increment = createCounter();\n  protected inputId = `textarea-${IgcTextareaComponent.increment()}`;\n\n  protected static shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  private _value = '';\n  private observer!: ResizeObserver;\n\n  @queryAssignedNodes({ flatten: true })\n  private projected!: Array<Node>;\n\n  @queryAssignedElements({ slot: 'prefix' })\n  protected prefixes!: Array<HTMLElement>;\n\n  @queryAssignedElements({ slot: 'suffix' })\n  protected suffixes!: Array<HTMLElement>;\n\n  @queryAssignedElements({ slot: 'helper-text' })\n  protected helperText!: Array<HTMLElement>;\n\n  @query('textarea', true)\n  private input!: HTMLTextAreaElement;\n\n  private get resizeStyles(): StyleInfo {\n    return {\n      resize: this.resize === 'auto' ? 'none' : this.resize,\n    };\n  }\n\n  /**\n   * Specifies what if any permission the browser has to provide for automated assistance in filling out form field values,\n   * as well as guidance to the browser as to the type of information expected in the field.\n   * Refer to [this page](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for additional information.\n   *\n   * @attr\n   */\n  @property()\n  public autocomplete!: string;\n\n  /**\n   * Controls whether and how text input is automatically capitalized as it is entered/edited by the user.\n   *\n   * [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize).\n   *\n   * @attr\n   */\n  @property()\n  public override autocapitalize!:\n    | 'off'\n    | 'none'\n    | 'on'\n    | 'sentences'\n    | 'words'\n    | 'characters';\n\n  /**\n   * Hints at the type of data that might be entered by the user while editing the element or its contents.\n   * This allows a browser to display an appropriate virtual keyboard.\n   *\n   * [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)\n   *\n   * @attr inputmode\n   */\n  @property({ attribute: 'inputmode' })\n  public override inputMode!:\n    | 'none'\n    | 'text'\n    | 'decimal'\n    | 'numeric'\n    | 'tel'\n    | 'search'\n    | 'email'\n    | 'url';\n\n  /**\n   * The label for the control.\n   *\n   * @attr\n   */\n  @property()\n  public label!: string;\n\n  /**\n   * The maximum number of characters (UTF-16 code units) that the user can enter.\n   * If this value isn't specified, the user can enter an unlimited number of characters.\n   *\n   * @attr maxlength\n   */\n  @property({ type: Number, attribute: 'maxlength' })\n  public maxLength!: number;\n\n  /**\n   * The minimum number of characters (UTF-16 code units) required that the user should enter.\n   *\n   * @attr minlength\n   */\n  @property({ type: Number, attribute: 'minlength' })\n  public minLength!: number;\n\n  /**\n   * Whether the control will have outlined appearance.\n   * @attr\n   */\n  @property({ reflect: true, type: Boolean })\n  public outlined = false;\n\n  /**\n   * The placeholder attribute of the control.\n   *\n   * @attr\n   */\n  @property()\n  public placeholder!: string;\n\n  /**\n   * Makes the control a readonly field.\n   *\n   * @attr readonly\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'readonly' })\n  public readOnly = false;\n\n  /**\n   * Controls whether the control can be resized.\n   * When `auto` is set, the control will try to expand and fit its content.\n   *\n   * @attr\n   */\n  @property()\n  public resize: 'auto' | 'vertical' | 'none' = 'vertical';\n\n  /**\n   * The number of visible text lines for the control. If it is specified, it must be a positive integer.\n   * If it is not specified, the default value is 2.\n   *\n   * @attr\n   */\n  @property({ type: Number })\n  public rows = 2;\n\n  /* @tsTwoWayProperty(true, \"igcChange\", \"detail\", false) */\n  /**\n   * The value of the component\n   *\n   * @attr\n   */\n  @property()\n  public set value(value: string) {\n    this._value = value ?? '';\n    this.setFormValue(this._value ? this._value : null);\n    this.updateValidity();\n    this.setInvalidState();\n  }\n\n  public get value(): string {\n    return this._value;\n  }\n\n  /**\n   * Controls whether the element may be checked for spelling errors.\n   *\n   * @attr\n   */\n  @property({\n    type: Boolean,\n    converter: {\n      fromAttribute: (value) => !(!value || value === 'false'),\n      toAttribute: (value) => (value ? 'true' : 'false'),\n    },\n  })\n  public override spellcheck = true;\n\n  /**\n   * Indicates how the control should wrap the value for form submission.\n   * Refer to [this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attributes)\n   * for explanation of the available values.\n   *\n   * @attr\n   */\n  @property()\n  public wrap: 'hard' | 'soft' | 'off' = 'soft';\n\n  /**\n   * Enables validation rules to be evaluated without restricting user input. This applies to the `maxLength` property\n   * when it is defined.\n   *\n   * @attr validate-only\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'validate-only' })\n  public validateOnly = false;\n\n  constructor() {\n    super();\n    this.addEventListener('focus', () => {\n      this._dirty = true;\n      this.emitEvent('igcFocus');\n    });\n    this.addEventListener('blur', () => {\n      this.updateValidity();\n      this.setInvalidState();\n      this.emitEvent('igcBlur');\n    });\n  }\n\n  public override async connectedCallback() {\n    super.connectedCallback();\n    this.updateValidity();\n\n    await this.updateComplete;\n\n    this.setAreaHeight();\n    this.observer = new ResizeObserver(() => this.setAreaHeight());\n    this.observer.observe(this.input);\n  }\n\n  public override disconnectedCallback(): void {\n    this.observer.disconnect();\n    super.disconnectedCallback();\n  }\n\n  /** Selects all text within the control. */\n  public select() {\n    this.input.select();\n  }\n\n  /** Sets the text selection range of the control */\n  public setSelectionRange(\n    start: number,\n    end: number,\n    direction: 'backward' | 'forward' | 'none' = 'none'\n  ) {\n    this.input.setSelectionRange(start, end, direction);\n  }\n\n  /** Replaces the selected text in the control. */\n  public setRangeText(\n    replacement: string,\n    start: number,\n    end: number,\n    selectMode: 'select' | 'start' | 'end' | 'preserve' = 'preserve'\n  ) {\n    this.input.setRangeText(replacement, start, end, selectMode);\n    this.value = this.input.value;\n  }\n\n  /* blazorSuppress */\n  public override scrollTo(options?: ScrollToOptions | undefined): void;\n  /* blazorSuppress */\n  public override scrollTo(x: number, y: number): void;\n  public override scrollTo(x?: unknown, y?: unknown): void {\n    x !== undefined && y !== undefined\n      ? this.input.scrollTo(x as number, y as number)\n      : this.input.scrollTo(x as ScrollToOptions);\n  }\n\n  protected resolvePartNames(base: string) {\n    return {\n      [base]: true,\n      prefixed: this.prefixes.length > 0,\n      suffixed: this.suffixes.length > 0,\n      filled: !!this.value,\n    };\n  }\n\n  protected override async firstUpdated() {\n    await this.updateComplete;\n    this._defaultValue = this.value;\n  }\n\n  @watch('value')\n  protected async valueChanged() {\n    await this.updateComplete;\n    this.setAreaHeight();\n  }\n\n  @watch('rows', { waitUntilFirstUpdate: true })\n  @watch('resize', { waitUntilFirstUpdate: true })\n  protected setAreaHeight() {\n    if (this.resize === 'auto') {\n      this.input.style.height = 'auto';\n      this.input.style.height = `${this.setAutoHeight()}px`;\n    } else {\n      Object.assign(this.input.style, { height: undefined });\n    }\n  }\n\n  private setAutoHeight() {\n    const computed = getComputedStyle(this.input);\n    const [top, bottom] = [\n      asNumber(computed.getPropertyValue('border-top-width')),\n      asNumber(computed.getPropertyValue('border-bottom-width')),\n    ];\n    return this.input.scrollHeight + top + bottom;\n  }\n\n  protected handleInput() {\n    this.value = this.input.value;\n    this.emitEvent('igcInput', { detail: this.value });\n  }\n\n  protected handleChange() {\n    this.value = this.input.value;\n    this.emitEvent('igcChange', { detail: this.value });\n  }\n\n  protected valueSlotChange() {\n    const value = [];\n\n    for (const node of this.projected) {\n      const text = node.textContent?.trim();\n      if (text) {\n        value.push(text);\n      }\n    }\n\n    if (value.length) {\n      this.value = value.join('\\r\\n');\n    }\n  }\n\n  protected slotChange() {\n    this.requestUpdate();\n  }\n\n  protected renderValueSlot() {\n    return html`<slot\n      style=\"display: none\"\n      @slotchange=${this.valueSlotChange}\n    ></slot>`;\n  }\n\n  protected renderHelperText() {\n    return html`\n      <div part=\"helper-text\" .hidden=${this.helperText.length < 1}>\n        <slot name=\"helper-text\" @slotchange=${this.slotChange}></slot>\n      </div>\n    `;\n  }\n\n  protected renderPrefix() {\n    return html`<div part=\"prefix\" .hidden=${this.prefixes.length < 1}>\n      <slot name=\"prefix\" @slotchange=${this.slotChange}></slot>\n    </div>`;\n  }\n\n  protected renderSuffix() {\n    return html`<div part=\"suffix\" .hidden=${this.suffixes.length < 1}>\n      <slot name=\"suffix\" @slotchange=${this.slotChange}></slot>\n    </div>`;\n  }\n\n  protected renderLabel() {\n    return this.label\n      ? html`<label part=\"label\" for=${this.id || this.inputId}\n          >${this.label}</label\n        >`\n      : nothing;\n  }\n\n  protected renderStandard() {\n    return html`\n      ${this.renderLabel()}\n      <div part=${partNameMap(this.resolvePartNames('container'))}>\n        ${this.renderPrefix()} ${this.renderInput()} ${this.renderSuffix()}\n      </div>\n      ${this.renderHelperText()}\n    `;\n  }\n\n  protected renderMaterial() {\n    return html`\n      <div\n        part=${partNameMap({\n          ...this.resolvePartNames('container'),\n          labelled: this.label,\n        })}\n      >\n        <div part=\"start\">${this.renderPrefix()}</div>\n        <div part=\"notch\">${this.renderLabel()}</div>\n        ${this.renderInput()}\n        <div part=\"filler\"></div>\n        <div part=\"end\">${this.renderSuffix()}</div>\n      </div>\n      ${this.renderHelperText()}\n    `;\n  }\n\n  protected renderInput() {\n    return html`${this.renderValueSlot()}\n      <textarea\n        id=${this.id || this.inputId}\n        part=\"input\"\n        style=${styleMap(this.resizeStyles)}\n        @input=${this.handleInput}\n        @change=${this.handleChange}\n        placeholder=${ifDefined(this.placeholder)}\n        .rows=${this.rows}\n        .value=${live(this.value)}\n        .wrap=${this.wrap}\n        autocomplete=${ifDefined(this.autocomplete as any)}\n        autocapitalize=${ifDefined(this.autocapitalize)}\n        inputmode=${ifDefined(this.inputMode)}\n        spellcheck=${ifDefined(this.spellcheck)}\n        minlength=${ifDefined(this.minLength)}\n        maxlength=${ifDefined(this.validateOnly ? undefined : this.maxLength)}\n        ?disabled=${this.disabled}\n        ?required=${this.required}\n        ?readonly=${this.readOnly}\n        aria-invalid=${this.invalid ? 'true' : 'false'}\n      ></textarea>`;\n  }\n\n  protected override render() {\n    const isMaterial = this[themeSymbol] === 'material';\n    return isMaterial ? this.renderMaterial() : this.renderStandard();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-textarea': IgcTextareaComponent;\n  }\n}\n"]}