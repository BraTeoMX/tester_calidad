import { themeSymbol } from '../../theming/theming-decorator.js';
import { type IgcCalendarResourceStrings } from '../common/i18n/calendar.resources.js';
import type { Constructor } from '../common/mixins/constructor.js';
import { IgcCalendarBaseComponent, type IgcCalendarBaseEventMap } from './common/calendar-base.js';
export declare const focusActiveDate: unique symbol;
declare const IgcCalendarComponent_base: Constructor<import("../common/mixins/sizable.js").SizableInterface> & Constructor<import("../common/mixins/event-emitter.js").EventEmitterInterface<IgcCalendarBaseEventMap>> & Constructor<IgcCalendarBaseComponent>;
/**
 * Represents a calendar that lets users
 * to select a date value in a variety of different ways.
 *
 * @element igc-calendar
 *
 * @slot - The default slot for the calendar.
 * @slot title - Renders the title of the calendar header.
 *
 * @fires igcChange - Emitted when calendar changes its value.
 *
 * @csspart content - The content container.
 * @csspart days-view - The days view container.
 * @csspart months-view - The months view container.
 * @csspart years-view - The years view container.
 * @csspart header - The header container.
 * @csspart header-title - The header title container.
 * @csspart header-date - The header date container.
 * @csspart navigation - The navigation container.
 * @csspart months-navigation - The months navigation container.
 * @csspart years-navigation - The years navigation container.
 * @csspart years-range - The years range container.
 * @csspart navigation-buttons - The navigation buttons container.
 * @csspart navigation-button - The navigation button container.
 * @csspart navigation-button vertical - The navigation button container
 * when calendar orientation is vertical.
 * @csspart days-view-container - The days view container.
 */
export default class IgcCalendarComponent extends IgcCalendarComponent_base {
    static readonly tagName = "igc-calendar";
    static styles: import("lit").CSSResult;
    static register(): void;
    private formatterMonth;
    private formatterWeekday;
    private formatterMonthDay;
    private readonly [themeSymbol];
    private rangePreviewDate?;
    private activeDaysViewIndex;
    private daysViews;
    private monthsView;
    private yearsView;
    /** Controls the visibility of the dates that do not belong to the current month. */
    hideOutsideDays: boolean;
    /** Determines whether the calendar hides its header. Even if set to false, the header is not displayed for `multiple` selection. */
    hideHeader: boolean;
    /** The orientation of the header. */
    headerOrientation: 'vertical' | 'horizontal';
    /** The orientation of the multiple months displayed in days view. */
    orientation: 'vertical' | 'horizontal';
    /** The number of months displayed in days view. */
    visibleMonths: number;
    /** The active view. */
    activeView: 'days' | 'months' | 'years';
    /** The options used to format the months and the weekdays in the calendar views. */
    formatOptions: Pick<Intl.DateTimeFormatOptions, 'month' | 'weekday'>;
    /** The resource strings. */
    resourceStrings: IgcCalendarResourceStrings;
    protected formattersChange(): void;
    constructor();
    private get yearPerPage();
    private get previousButtonLabel();
    private get nextButtonLabel();
    private monthSelectLabel;
    private yearSelectLabel;
    private handleKeyDown;
    [focusActiveDate](): Promise<void>;
    private initFormatters;
    private formattedMonth;
    private changeValue;
    private changeMonth;
    private changeYear;
    private switchToMonths;
    private switchToYears;
    private activateDaysView;
    private activeDateChanged;
    private rangePreviewDateChange;
    private nextMonth;
    private previousMonth;
    private nextYear;
    private previousYear;
    private nextYearsPage;
    private previousYearsPage;
    private navigateNext;
    private navigatePrevious;
    private renderNavigation;
    private renderHeader;
    private renderHeaderDate;
    protected render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'igc-calendar': IgcCalendarComponent;
    }
}
export {};
