var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var IgcMonthsViewComponent_1;
import { LitElement, html } from 'lit';
import { property, query } from 'lit/decorators.js';
import { themes } from '../../../theming/theming-decorator.js';
import { blazorIndirectRender } from '../../common/decorators/blazorIndirectRender.js';
import { blazorSuppressComponent } from '../../common/decorators/blazorSuppressComponent.js';
import { watch } from '../../common/decorators/watch.js';
import { registerComponent } from '../../common/definitions/register.js';
import { EventEmitterMixin } from '../../common/mixins/event-emitter.js';
import { partNameMap } from '../../common/util.js';
import { MONTHS_PER_ROW, } from '../common/calendar-base.js';
import { Calendar, TimeDeltaInterval } from '../common/calendar.model.js';
import { setDateSafe } from '../common/utils.js';
import { styles } from '../themes/year-month-view.base.css.js';
import { all } from '../themes/year-month.js';
let IgcMonthsViewComponent = IgcMonthsViewComponent_1 = class IgcMonthsViewComponent extends EventEmitterMixin(LitElement) {
    static register() {
        registerComponent(IgcMonthsViewComponent_1);
    }
    formatChange() {
        this.initMonthFormatter();
    }
    constructor() {
        super();
        this.calendarModel = new Calendar();
        this.value = new Date();
        this.locale = 'en';
        this.monthFormat = 'long';
        this.setAttribute('role', 'grid');
        this.initMonthFormatter();
    }
    focusActiveDate() {
        this.activeMonth.focus();
    }
    initMonthFormatter() {
        this.monthFormatter = new Intl.DateTimeFormat(this.locale, {
            month: this.monthFormat,
        });
    }
    formattedMonth(value) {
        return this.monthFormatter.format(value);
    }
    get months() {
        let date = new Date(this.value.getFullYear(), 0, 1);
        const result = [];
        const rowsCount = 12 / MONTHS_PER_ROW;
        for (let i = 0; i < rowsCount; i++) {
            const row = [];
            for (let j = 0; j < MONTHS_PER_ROW; j++) {
                row.push(date);
                date = this.calendarModel.timedelta(date, TimeDeltaInterval.Month, 1);
            }
            result.push(row);
        }
        return result;
    }
    resolveMonthPartName(date) {
        const today = new Date();
        return {
            month: true,
            selected: date.getMonth() === this.value.getMonth(),
            current: date.getFullYear() === today.getFullYear() &&
                date.getMonth() === today.getMonth(),
        };
    }
    selectMonth(month) {
        const value = new Date(month);
        setDateSafe(value, this.value.getDate());
        this.value = value;
        this.emitEvent('igcChange', { detail: this.value });
    }
    monthKeyDown(event, month) {
        if (event.key === 'Enter' || event.key === ' ') {
            event.preventDefault();
            this.selectMonth(month);
        }
    }
    render() {
        return html `${this.months.map((row) => {
            return html `<div part="months-row" role="row">
        ${row.map((month) => {
                const monthPartName = partNameMap(this.resolveMonthPartName(month));
                const monthInnerPartName = monthPartName.replace('month', 'month-inner');
                return html `<span part=${monthPartName}>
            <span
              part=${monthInnerPartName}
              role="gridcell"
              aria-label=${month.toLocaleString(this.locale, {
                    month: 'long',
                    year: 'numeric',
                })}
              aria-selected=${month.getMonth() === this.value.getMonth()}
              tabindex="${month.getFullYear() === this.value.getFullYear() &&
                    month.getMonth() === this.value.getMonth()
                    ? 0
                    : -1}"
              @click=${() => this.selectMonth(month)}
              @keydown=${(event) => this.monthKeyDown(event, month)}
            >
              ${this.formattedMonth(month)}
            </span>
          </span>`;
            })}
      </div>`;
        })}`;
    }
};
IgcMonthsViewComponent.tagName = 'igc-months-view';
IgcMonthsViewComponent.styles = styles;
__decorate([
    query('[tabindex="0"]')
], IgcMonthsViewComponent.prototype, "activeMonth", void 0);
__decorate([
    property({ attribute: false })
], IgcMonthsViewComponent.prototype, "value", void 0);
__decorate([
    property()
], IgcMonthsViewComponent.prototype, "locale", void 0);
__decorate([
    property({ attribute: 'month-format' })
], IgcMonthsViewComponent.prototype, "monthFormat", void 0);
__decorate([
    watch('locale'),
    watch('monthFormat')
], IgcMonthsViewComponent.prototype, "formatChange", null);
IgcMonthsViewComponent = IgcMonthsViewComponent_1 = __decorate([
    blazorIndirectRender,
    blazorSuppressComponent,
    themes(all)
], IgcMonthsViewComponent);
export default IgcMonthsViewComponent;
//# sourceMappingURL=months-view.js.map