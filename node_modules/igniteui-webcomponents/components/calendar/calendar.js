var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var IgcCalendarComponent_1;
import { html } from 'lit';
import { property, query, queryAll, state } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';
import { themeSymbol, themes } from '../../theming/theming-decorator.js';
import { watch } from '../common/decorators/watch.js';
import { registerComponent } from '../common/definitions/register.js';
import { IgcCalendarResourceStringEN, } from '../common/i18n/calendar.resources.js';
import { EventEmitterMixin } from '../common/mixins/event-emitter.js';
import { SizableMixin } from '../common/mixins/sizable.js';
import { partNameMap } from '../common/util.js';
import IgcIconComponent from '../icon/icon.js';
import { IgcCalendarBaseComponent, MONTHS_PER_ROW, YEARS_PER_ROW, } from './common/calendar-base.js';
import { TimeDeltaInterval, } from './common/calendar.model.js';
import { calculateYearsRangeStart, setDateSafe } from './common/utils.js';
import IgcDaysViewComponent from './days-view/days-view.js';
import IgcMonthsViewComponent from './months-view/months-view.js';
import { styles } from './themes/calendar.base.css.js';
import { all } from './themes/calendar.js';
import IgcYearsViewComponent from './years-view/years-view.js';
export const focusActiveDate = Symbol();
let IgcCalendarComponent = IgcCalendarComponent_1 = class IgcCalendarComponent extends SizableMixin(EventEmitterMixin(IgcCalendarBaseComponent)) {
    static register() {
        registerComponent(IgcCalendarComponent_1, IgcIconComponent, IgcDaysViewComponent, IgcMonthsViewComponent, IgcYearsViewComponent);
    }
    formattersChange() {
        this.initFormatters();
    }
    constructor() {
        super();
        this.activeDaysViewIndex = 0;
        this.hideOutsideDays = false;
        this.hideHeader = false;
        this.headerOrientation = 'horizontal';
        this.orientation = 'horizontal';
        this.visibleMonths = 1;
        this.activeView = 'days';
        this.formatOptions = {
            month: 'long',
            weekday: 'narrow',
        };
        this.resourceStrings = IgcCalendarResourceStringEN;
        this.handleKeyDown = (event) => {
            const tagName = event.target.tagName.toLowerCase();
            if (tagName !== 'igc-days-view' &&
                tagName !== 'igc-months-view' &&
                tagName !== 'igc-years-view') {
                return;
            }
            switch (event.key) {
                case 'PageDown':
                    event.preventDefault();
                    if (event.shiftKey && this.activeView === 'days') {
                        this.nextYear();
                    }
                    else {
                        this.navigateNext();
                    }
                    if (this.activeView === 'days') {
                        this[focusActiveDate]();
                    }
                    break;
                case 'PageUp':
                    event.preventDefault();
                    if (event.shiftKey && this.activeView === 'days') {
                        this.previousYear();
                    }
                    else {
                        this.navigatePrevious();
                    }
                    if (this.activeView === 'days') {
                        this[focusActiveDate]();
                    }
                    break;
                case 'Home':
                    event.preventDefault();
                    if (this.activeView === 'days') {
                        const firstDaysView = this.daysViews[0];
                        const activeDate = firstDaysView.activeDate;
                        const date = new Date(activeDate);
                        date.setDate(1);
                        this.activeDate = date;
                        this.activeDaysViewIndex = 0;
                    }
                    else if (this.activeView === 'months') {
                        const date = new Date(this.activeDate);
                        date.setMonth(0);
                        this.activeDate = date;
                    }
                    else if (this.activeView === 'years') {
                        const startYear = calculateYearsRangeStart(this.activeDate, this.yearPerPage);
                        const date = new Date(this.activeDate);
                        date.setDate(1);
                        date.setFullYear(startYear);
                        setDateSafe(date, this.activeDate.getDate());
                        this.activeDate = date;
                    }
                    this[focusActiveDate]();
                    break;
                case 'End':
                    event.preventDefault();
                    if (this.activeView === 'days') {
                        const index = this.daysViews.length - 1;
                        const lastDaysView = this.daysViews[index];
                        const activeDate = lastDaysView.activeDate;
                        const date = new Date(activeDate);
                        date.setDate(1);
                        date.setMonth(date.getMonth() + 1);
                        date.setDate(0);
                        this.activeDate = date;
                        this.activeDaysViewIndex = index;
                    }
                    else if (this.activeView === 'months') {
                        const date = new Date(this.activeDate);
                        date.setMonth(11);
                        this.activeDate = date;
                    }
                    else if (this.activeView === 'years') {
                        const startYear = calculateYearsRangeStart(this.activeDate, this.yearPerPage);
                        const date = new Date(this.activeDate);
                        date.setDate(1);
                        date.setFullYear(startYear + this.yearPerPage - 1);
                        setDateSafe(date, this.activeDate.getDate());
                        this.activeDate = date;
                    }
                    this[focusActiveDate]();
                    break;
                case 'ArrowLeft':
                    event.preventDefault();
                    if (this.activeView === 'days') {
                        const date = this.calendarModel.timedelta(this.activeDate, TimeDeltaInterval.Day, -1);
                        if (this.visibleMonths > 1) {
                            const activeDayView = this.daysViews[this.activeDaysViewIndex];
                            const activeMonthDate = activeDayView.activeDate;
                            if (activeMonthDate.getMonth() !== date.getMonth()) {
                                this.activeDaysViewIndex =
                                    this.activeDaysViewIndex > 0 ? this.activeDaysViewIndex - 1 : 0;
                            }
                        }
                        this.activeDate = date;
                    }
                    else if (this.activeView === 'months') {
                        this.previousMonth();
                    }
                    else if (this.activeView === 'years') {
                        this.previousYear();
                    }
                    this[focusActiveDate]();
                    break;
                case 'ArrowRight':
                    event.preventDefault();
                    if (this.activeView === 'days') {
                        const date = this.calendarModel.timedelta(this.activeDate, TimeDeltaInterval.Day, 1);
                        if (this.visibleMonths > 1) {
                            const activeDayView = this.daysViews[this.activeDaysViewIndex];
                            const activeMonthDate = activeDayView.activeDate;
                            if (activeMonthDate.getMonth() !== date.getMonth()) {
                                this.activeDaysViewIndex =
                                    this.activeDaysViewIndex === this.visibleMonths - 1
                                        ? this.activeDaysViewIndex
                                        : this.activeDaysViewIndex + 1;
                            }
                        }
                        this.activeDate = date;
                    }
                    else if (this.activeView === 'months') {
                        this.nextMonth();
                    }
                    else if (this.activeView === 'years') {
                        this.nextYear();
                    }
                    this[focusActiveDate]();
                    break;
                case 'ArrowUp':
                    event.preventDefault();
                    if (this.activeView === 'days') {
                        const date = this.calendarModel.timedelta(this.activeDate, TimeDeltaInterval.Week, -1);
                        if (this.visibleMonths > 1) {
                            const activeDayView = this.daysViews[this.activeDaysViewIndex];
                            const activeMonthDate = activeDayView.activeDate;
                            if (activeMonthDate.getMonth() !== date.getMonth()) {
                                this.activeDaysViewIndex =
                                    this.activeDaysViewIndex > 0 ? this.activeDaysViewIndex - 1 : 0;
                            }
                        }
                        this.activeDate = date;
                    }
                    else if (this.activeView === 'months') {
                        this.activeDate = this.calendarModel.timedelta(this.activeDate, TimeDeltaInterval.Month, -MONTHS_PER_ROW);
                    }
                    else if (this.activeView === 'years') {
                        this.activeDate = this.calendarModel.timedelta(this.activeDate, TimeDeltaInterval.Year, -YEARS_PER_ROW);
                    }
                    this[focusActiveDate]();
                    break;
                case 'ArrowDown':
                    event.preventDefault();
                    if (this.activeView === 'days') {
                        const date = this.calendarModel.timedelta(this.activeDate, TimeDeltaInterval.Week, 1);
                        if (this.visibleMonths > 1) {
                            const activeDayView = this.daysViews[this.activeDaysViewIndex];
                            const activeMonthDate = activeDayView.activeDate;
                            if (activeMonthDate.getMonth() !== date.getMonth()) {
                                this.activeDaysViewIndex =
                                    this.activeDaysViewIndex === this.visibleMonths - 1
                                        ? this.activeDaysViewIndex
                                        : this.activeDaysViewIndex + 1;
                            }
                        }
                        this.activeDate = date;
                    }
                    else if (this.activeView === 'months') {
                        this.activeDate = this.calendarModel.timedelta(this.activeDate, TimeDeltaInterval.Month, MONTHS_PER_ROW);
                    }
                    else if (this.activeView === 'years') {
                        this.activeDate = this.calendarModel.timedelta(this.activeDate, TimeDeltaInterval.Year, YEARS_PER_ROW);
                    }
                    this[focusActiveDate]();
                    break;
            }
        };
        this.initFormatters();
    }
    get yearPerPage() {
        return this.size === 'small' ? 18 : 15;
    }
    get previousButtonLabel() {
        return this.activeView === 'days'
            ? this.resourceStrings.previousMonth
            : this.activeView === 'months'
                ? this.resourceStrings.previousYear
                : this.activeView === 'years'
                    ? this.resourceStrings.previousYears.replace('{0}', this.yearPerPage.toString())
                    : '';
    }
    get nextButtonLabel() {
        return this.activeView === 'days'
            ? this.resourceStrings.nextMonth
            : this.activeView === 'months'
                ? this.resourceStrings.nextYear
                : this.activeView === 'years'
                    ? this.resourceStrings.nextYears.replace('{0}', this.yearPerPage.toString())
                    : '';
    }
    monthSelectLabel(activeDate) {
        return `${activeDate.toLocaleString(this.locale, {
            month: 'long',
        })}, ${this.resourceStrings.selectMonth}`;
    }
    yearSelectLabel(activeDate) {
        return `${activeDate.getFullYear()}, ${this.resourceStrings.selectYear}`;
    }
    async [focusActiveDate]() {
        await this.updateComplete;
        if (this.activeView === 'days') {
            const daysView = this.daysViews[this.activeDaysViewIndex];
            daysView.focusActiveDate();
        }
        else if (this.activeView === 'months') {
            this.monthsView.focusActiveDate();
        }
        else if (this.activeView === 'years') {
            this.yearsView.focusActiveDate();
        }
    }
    initFormatters() {
        this.formatterMonth = new Intl.DateTimeFormat(this.locale, {
            month: this.formatOptions.month,
        });
        this.formatterWeekday = new Intl.DateTimeFormat(this.locale, {
            weekday: 'short',
        });
        this.formatterMonthDay = new Intl.DateTimeFormat(this.locale, {
            month: 'short',
            day: 'numeric',
        });
    }
    formattedMonth(value) {
        return this.formatterMonth.format(value);
    }
    changeValue(event) {
        event.stopPropagation();
        const daysView = event.target;
        let newValue;
        if (this.selection === 'single') {
            this.value = daysView.value;
            newValue = this.value;
        }
        else {
            this.values = daysView.values;
            newValue = this.values;
        }
        this.emitEvent('igcChange', { detail: newValue });
    }
    changeMonth(event) {
        event.stopPropagation();
        this.activeDate = event.target.value;
        this.activeView = 'days';
        this[focusActiveDate]();
    }
    changeYear(event) {
        event.stopPropagation();
        this.activeDate = event.target.value;
        this.activeView = 'months';
        this[focusActiveDate]();
    }
    async switchToMonths(daysViewIndex) {
        this.activateDaysView(daysViewIndex);
        this.activeView = 'months';
        await this.updateComplete;
        this[focusActiveDate]();
    }
    async switchToYears(daysViewIndex) {
        if (this.activeView === 'days') {
            this.activateDaysView(daysViewIndex);
        }
        this.activeView = 'years';
        await this.updateComplete;
        this[focusActiveDate]();
    }
    activateDaysView(daysViewIndex) {
        const activeDaysView = this.daysViews[daysViewIndex];
        this.activeDate = activeDaysView.activeDate;
        this.activeDaysViewIndex = daysViewIndex;
    }
    activeDateChanged(event) {
        const day = event.detail;
        const daysViews = Array.from(this.daysViews);
        this.activeDaysViewIndex = daysViews.indexOf(event.target);
        this.activeDate = day.date;
        if (!day.isCurrentMonth) {
            this[focusActiveDate]();
        }
    }
    rangePreviewDateChange(event) {
        this.rangePreviewDate = event.detail;
    }
    nextMonth() {
        this.activeDate = this.calendarModel.getNextMonth(this.activeDate);
    }
    previousMonth() {
        this.activeDate = this.calendarModel.getPrevMonth(this.activeDate);
    }
    nextYear() {
        this.activeDate = this.calendarModel.getNextYear(this.activeDate);
    }
    previousYear() {
        this.activeDate = this.calendarModel.getPrevYear(this.activeDate);
    }
    nextYearsPage() {
        this.activeDate = this.calendarModel.timedelta(this.activeDate, TimeDeltaInterval.Year, this.yearPerPage);
    }
    previousYearsPage() {
        this.activeDate = this.calendarModel.timedelta(this.activeDate, TimeDeltaInterval.Year, -this.yearPerPage);
    }
    navigateNext() {
        if (this.activeView === 'days') {
            this.nextMonth();
        }
        else if (this.activeView === 'months') {
            this.nextYear();
        }
        else if (this.activeView === 'years') {
            this.nextYearsPage();
        }
    }
    navigatePrevious() {
        if (this.activeView === 'days') {
            this.previousMonth();
        }
        else if (this.activeView === 'months') {
            this.previousYear();
        }
        else if (this.activeView === 'years') {
            this.previousYearsPage();
        }
    }
    renderNavigation(activeDate = this.activeDate, renderButtons = true, daysViewIndex = 0) {
        let startYear = undefined;
        let endYear = undefined;
        const prev_icon = this[themeSymbol] === 'fluent' ? 'arrow_upward' : 'navigate_before';
        const next_icon = this[themeSymbol] === 'fluent' ? 'arrow_downward' : 'navigate_next';
        if (this.activeView === 'years') {
            startYear = calculateYearsRangeStart(activeDate, this.yearPerPage);
            endYear = startYear + this.yearPerPage - 1;
        }
        return html `<div part="navigation">
      <div part="picker-dates">
        ${this.activeView === 'days'
            ? html `<button
              part="months-navigation"
              aria-label=${this.monthSelectLabel(activeDate)}
              @click=${() => this.switchToMonths(daysViewIndex)}
            >
              ${this.formattedMonth(activeDate)}
            </button>`
            : ''}
        ${this.activeView === 'days' || this.activeView === 'months'
            ? html `<span class="aria-off-screen" aria-live="polite">
                ${this.activeView === 'days'
                ? activeDate.toLocaleString(this.locale, {
                    month: 'long',
                    year: 'numeric',
                })
                : activeDate.getFullYear()}
              </span>
              <button
                part="years-navigation"
                aria-label=${this.yearSelectLabel(activeDate)}
                @click=${() => this.switchToYears(daysViewIndex)}
              >
                ${activeDate.getFullYear()}
              </button>`
            : ''}
        ${this.activeView === 'years'
            ? html `<span part="years-range" aria-live="polite"
              >${`${startYear} - ${endYear}`}</span
            >`
            : ''}
      </div>
      ${renderButtons
            ? html `<div part="navigation-buttons">
            <button
              part=${partNameMap({
                'navigation-button': true,
                vertical: this.orientation === 'vertical',
            })}
              aria-label=${this.previousButtonLabel}
              @click=${this.navigatePrevious}
            >
              <igc-icon
                aria-hidden="true"
                name=${prev_icon}
                collection="internal"
              ></igc-icon>
            </button>
            <button
              part=${partNameMap({
                'navigation-button': true,
                vertical: this.orientation === 'vertical',
            })}
              aria-label=${this.nextButtonLabel}
              @click=${this.navigateNext}
            >
              <igc-icon
                aria-hidden="true"
                name=${next_icon}
                collection="internal"
              ></igc-icon>
            </button>
          </div>`
            : ''}
    </div>`;
    }
    renderHeader() {
        if (this.hideHeader || this.selection === 'multiple') {
            return '';
        }
        return html `<div part="header">
      <h5 part="header-title">
        <slot name="title"
          >${this.selection === 'single'
            ? this.resourceStrings.selectDate
            : this.resourceStrings.selectRange}</slot
        >
      </h5>
      <h2 part="header-date">${this.renderHeaderDate()}</h2>
    </div>`;
    }
    renderHeaderDate() {
        if (this.selection === 'single') {
            const date = this.value;
            return html `${date
                ? html `${this.formatterWeekday.format(date)},${this
                    .headerOrientation === 'vertical'
                    ? html `<br />`
                    : ' '}${this.formatterMonthDay.format(date)}`
                : this.resourceStrings.selectedDate}`;
        }
        const dates = this.values;
        return html `<span
        >${dates?.length
            ? this.formatterMonthDay.format(dates[0])
            : this.resourceStrings.startDate}</span
      >
      <span> - </span>
      <span
        >${dates && dates.length > 1
            ? this.formatterMonthDay.format(dates[dates.length - 1])
            : this.resourceStrings.endDate}</span
      >`;
    }
    render() {
        const activeDates = [];
        const monthsCount = this.visibleMonths > 1 ? this.visibleMonths : 1;
        for (let i = 0; i < monthsCount; i++) {
            activeDates.push(this.calendarModel.timedelta(this.activeDate, TimeDeltaInterval.Month, i - this.activeDaysViewIndex));
        }
        return html `
      ${this.renderHeader()}
      <div
        part="content"
        style=${styleMap({
            display: 'flex',
            flexGrow: '1',
            flexDirection: this.activeView === 'days'
                ? this.orientation === 'horizontal'
                    ? 'row'
                    : 'column'
                : 'column',
        })}
        @keydown=${this.handleKeyDown}
      >
        ${this.activeView === 'days'
            ? activeDates.map((activeDate, i) => html `<div part="days-view-container">
                  ${this.renderNavigation(activeDate, this.orientation === 'horizontal'
                ? i === activeDates.length - 1
                : i === 0, i)}
                  <igc-days-view
                    part="days-view"
                    .active=${this.activeDaysViewIndex === i}
                    .activeDate=${activeDate}
                    .weekStart=${this.weekStart}
                    .weekDayFormat=${this.formatOptions.weekday}
                    .locale=${this.locale}
                    .selection=${this.selection}
                    .value=${this.value}
                    .values=${this.values}
                    .hideLeadingDays=${this.hideOutsideDays || i !== 0}
                    .hideTrailingDays=${this.hideOutsideDays ||
                i !== activeDates.length - 1}
                    .showWeekNumbers=${this.showWeekNumbers}
                    .disabledDates=${this.disabledDates}
                    .specialDates=${this.specialDates}
                    .rangePreviewDate=${this.rangePreviewDate}
                    .resourceStrings=${this.resourceStrings}
                    exportparts="days-row, label, date-inner, week-number-inner, week-number, date, first, last, selected, inactive, hidden, current, weekend, range, special, disabled, single, preview"
                    @igcChange=${this.changeValue}
                    @igcActiveDateChange=${this.activeDateChanged}
                    @igcRangePreviewDateChange=${this.rangePreviewDateChange}
                  ></igc-days-view>
                </div>`)
            : ''}
        ${this.activeView === 'months'
            ? html ` ${this.renderNavigation()}
              <igc-months-view
                part="months-view"
                .value=${this.activeDate}
                .locale=${this.locale}
                .monthFormat=${this.formatOptions.month}
                exportparts="month, selected, month-inner, current"
                @igcChange=${this.changeMonth}
              ></igc-months-view>`
            : ''}
        ${this.activeView === 'years'
            ? html `${this.renderNavigation()}
              <igc-years-view
                part="years-view"
                .value=${this.activeDate}
                .yearsPerPage=${this.yearPerPage}
                exportparts="year, selected, year-inner, current"
                @igcChange=${this.changeYear}
              ></igc-years-view>`
            : ''}
      </div>
    `;
    }
};
IgcCalendarComponent.tagName = 'igc-calendar';
IgcCalendarComponent.styles = styles;
__decorate([
    state()
], IgcCalendarComponent.prototype, "rangePreviewDate", void 0);
__decorate([
    state()
], IgcCalendarComponent.prototype, "activeDaysViewIndex", void 0);
__decorate([
    queryAll('igc-days-view')
], IgcCalendarComponent.prototype, "daysViews", void 0);
__decorate([
    query('igc-months-view')
], IgcCalendarComponent.prototype, "monthsView", void 0);
__decorate([
    query('igc-years-view')
], IgcCalendarComponent.prototype, "yearsView", void 0);
__decorate([
    property({ type: Boolean, attribute: 'hide-outside-days' })
], IgcCalendarComponent.prototype, "hideOutsideDays", void 0);
__decorate([
    property({ type: Boolean, attribute: 'hide-header' })
], IgcCalendarComponent.prototype, "hideHeader", void 0);
__decorate([
    property({ attribute: 'header-orientation', reflect: true })
], IgcCalendarComponent.prototype, "headerOrientation", void 0);
__decorate([
    property()
], IgcCalendarComponent.prototype, "orientation", void 0);
__decorate([
    property({ type: Number, attribute: 'visible-months' })
], IgcCalendarComponent.prototype, "visibleMonths", void 0);
__decorate([
    property({ attribute: 'active-view' })
], IgcCalendarComponent.prototype, "activeView", void 0);
__decorate([
    property({ attribute: false })
], IgcCalendarComponent.prototype, "formatOptions", void 0);
__decorate([
    property({ attribute: false })
], IgcCalendarComponent.prototype, "resourceStrings", void 0);
__decorate([
    watch('formatOptions'),
    watch('locale')
], IgcCalendarComponent.prototype, "formattersChange", null);
IgcCalendarComponent = IgcCalendarComponent_1 = __decorate([
    themes(all)
], IgcCalendarComponent);
export default IgcCalendarComponent;
//# sourceMappingURL=calendar.js.map