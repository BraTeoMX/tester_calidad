var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var IgcYearsViewComponent_1;
import { LitElement, html } from 'lit';
import { property, query } from 'lit/decorators.js';
import { themes } from '../../../theming/theming-decorator.js';
import { blazorIndirectRender } from '../../common/decorators/blazorIndirectRender.js';
import { blazorSuppressComponent } from '../../common/decorators/blazorSuppressComponent.js';
import { watch } from '../../common/decorators/watch.js';
import { registerComponent } from '../../common/definitions/register.js';
import { EventEmitterMixin } from '../../common/mixins/event-emitter.js';
import { partNameMap } from '../../common/util.js';
import { YEARS_PER_ROW, } from '../common/calendar-base.js';
import { calculateYearsRangeStart, setDateSafe } from '../common/utils.js';
import { styles } from '../themes/year-month-view.base.css.js';
import { all } from '../themes/year-month.js';
let IgcYearsViewComponent = IgcYearsViewComponent_1 = class IgcYearsViewComponent extends EventEmitterMixin(LitElement) {
    static register() {
        registerComponent(IgcYearsViewComponent_1);
    }
    datesChange() {
        this.years = this.generateYears();
    }
    constructor() {
        super();
        this.value = new Date();
        this.yearsPerPage = 15;
        this.setAttribute('role', 'grid');
    }
    focusActiveDate() {
        this.activeYear.focus();
    }
    formattedYear(value) {
        return `${value.getFullYear()}`;
    }
    generateYears() {
        const startYear = calculateYearsRangeStart(this.value, this.yearsPerPage);
        const month = this.value.getMonth();
        const result = [];
        const rows = this.yearsPerPage / YEARS_PER_ROW;
        for (let i = 0; i < rows; i++) {
            const row = [];
            for (let j = 0; j < YEARS_PER_ROW; j++) {
                const year = startYear + i * YEARS_PER_ROW + j;
                const date = new Date(year, month, 1);
                date.setFullYear(year);
                row.push(date);
            }
            result.push(row);
        }
        return result;
    }
    resolveYearPartName(date) {
        const today = new Date();
        return {
            year: true,
            selected: date.getFullYear() === this.value.getFullYear(),
            current: date.getFullYear() === today.getFullYear(),
        };
    }
    selectYear(year) {
        const value = new Date(year);
        setDateSafe(value, this.value.getDate());
        this.value = value;
        this.emitEvent('igcChange', { detail: this.value });
    }
    yearKeyDown(event, year) {
        if (event.key === 'Enter' || event.key === ' ') {
            event.preventDefault();
            this.selectYear(year);
        }
    }
    render() {
        return html `${this.years.map((row) => {
            return html `<div part="years-row" role="row">
        ${row.map((year) => {
                const yearPartName = partNameMap(this.resolveYearPartName(year));
                const yearInnerPartName = yearPartName.replace('year', 'year-inner');
                return html `<span part=${yearPartName}>
            <span
              part=${yearInnerPartName}
              role="gridcell"
              aria-selected=${year.getFullYear() === this.value.getFullYear()}
              tabindex="${year.getFullYear() === this.value.getFullYear()
                    ? 0
                    : -1}"
              @click=${() => this.selectYear(year)}
              @keydown=${(event) => this.yearKeyDown(event, year)}
            >
              ${this.formattedYear(year)}
            </span>
          </span>`;
            })}
      </div>`;
        })}`;
    }
};
IgcYearsViewComponent.tagName = 'igc-years-view';
IgcYearsViewComponent.styles = styles;
__decorate([
    query('[tabindex="0"]')
], IgcYearsViewComponent.prototype, "activeYear", void 0);
__decorate([
    property({ attribute: false })
], IgcYearsViewComponent.prototype, "value", void 0);
__decorate([
    property({ type: Number, attribute: 'years-per-page' })
], IgcYearsViewComponent.prototype, "yearsPerPage", void 0);
__decorate([
    watch('value'),
    watch('yearsPerPage')
], IgcYearsViewComponent.prototype, "datesChange", null);
IgcYearsViewComponent = IgcYearsViewComponent_1 = __decorate([
    blazorIndirectRender,
    blazorSuppressComponent,
    themes(all)
], IgcYearsViewComponent);
export default IgcYearsViewComponent;
//# sourceMappingURL=years-view.js.map