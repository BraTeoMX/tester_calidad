import { type IgcCalendarResourceStrings } from '../../common/i18n/calendar.resources.js';
import type { Constructor } from '../../common/mixins/constructor.js';
import { IgcCalendarBaseComponent, type IgcCalendarBaseEventMap } from '../common/calendar-base.js';
import { type ICalendarDate } from '../common/calendar.model.js';
export interface IgcDaysViewEventMap extends IgcCalendarBaseEventMap {
    igcActiveDateChange: CustomEvent<ICalendarDate>;
    igcRangePreviewDateChange: CustomEvent<Date>;
}
declare const IgcDaysViewComponent_base: Constructor<import("../../common/mixins/event-emitter.js").EventEmitterInterface<IgcDaysViewEventMap>> & Constructor<IgcCalendarBaseComponent>;
/**
 * Instantiate a days view as a separate component in the calendar.
 *
 * @element igc-days-view
 *
 * @fires igcActiveDateChange - Emitted when the active date changes.
 * @fires igcRangePreviewDateChange - Emitted when the range preview date changes.
 *
 * @csspart days-row - The days row container.
 * @csspart label - The label container.
 * @csspart label-inner - The inner label container.
 * @csspart week-number - The week number container.
 * @csspart week-number-inner - The inner week number container.
 */
export default class IgcDaysViewComponent extends IgcDaysViewComponent_base {
    static readonly tagName = "igc-days-view";
    static styles: import("lit").CSSResult;
    static register(): void;
    private labelFormatter;
    private formatterWeekday;
    private dates;
    private activeDay;
    /** Controls the visibility of the leading dates that do not belong to the current month. */
    hideLeadingDays: boolean;
    /** Controls the visibility of the trailing dates that do not belong to the current month. */
    hideTrailingDays: boolean;
    /** Gets/sets the active state of the days view. */
    active: boolean;
    /** The range preview date. */
    rangePreviewDate?: Date;
    /** The format of the days. Defaults to narrow. */
    weekDayFormat: 'long' | 'short' | 'narrow' | undefined;
    /** The resource strings. */
    resourceStrings: IgcCalendarResourceStrings;
    protected formattersChange(): void;
    protected datesChange(): void;
    constructor();
    /** Focuses the active date. */
    focusActiveDate(): void;
    private initFormatters;
    private generateWeekHeader;
    private getCalendarMonth;
    private titleCase;
    private getWeekNumber;
    private formattedDate;
    private get isSingleSelection();
    private isLastInRange;
    private isFirstInRange;
    private isDisabled;
    private isWithinRange;
    private isRangeDate;
    private isRangePreview;
    private isSelected;
    private isToday;
    private isWeekend;
    private isSpecial;
    private dateClicked;
    private selectDay;
    private selectDate;
    private generateDateRange;
    private selectRange;
    private selectSingle;
    private selectMultiple;
    private changeActiveDate;
    private dateKeyDown;
    private changeRangePreview;
    private clearRangePreview;
    private setRangePreviewDate;
    private resolveDayItemPartName;
    private renderWeekHeaders;
    private renderDates;
    protected dayLabelFormatter(value: ICalendarDate): any;
    private renderDateItem;
    protected render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'igc-days-view': IgcDaysViewComponent;
    }
}
export {};
