export interface DateRangeDescriptor {
    type: DateRangeType;
    dateRange?: Date[];
}
export declare enum DateRangeType {
    After = 0,
    Before = 1,
    Between = 2,
    Specific = 3,
    Weekdays = 4,
    Weekends = 5
}
/**
 * @hidden
 */
export declare enum TimeDeltaInterval {
    Second = 0,
    Minute = 1,
    Hour = 2,
    Day = 3,
    Week = 4,
    Month = 5,
    Quarter = 6,
    Year = 7
}
export declare const range: (start: number, stop: number, step?: number) => number[];
/**
 * Returns true for leap years, false for non-leap years.
 *
 * @export
 * @param year
 * @returns
 */
export declare const isLeap: (year: number) => boolean;
export declare const weekDay: (year: number, month: number, day: number) => number;
/**
 * Return weekday and number of days for year, month.
 *
 * @export
 * @param year
 * @param month
 * @returns
 */
export declare const monthRange: (year: number, month: number) => number[];
export declare const isDateInRanges: (date: Date, ranges: DateRangeDescriptor[]) => boolean;
export interface ICalendarDate {
    date: Date;
    isCurrentMonth: boolean;
    isPrevMonth: boolean;
    isNextMonth: boolean;
}
export interface IFormattedParts {
    value: string;
    literal?: string;
    combined: string;
}
export interface IFormattingViews {
    day?: boolean;
    month?: boolean;
    year?: boolean;
}
export type WeekDays = 'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday';
export declare enum WEEKDAYS {
    SUNDAY = 0,
    MONDAY = 1,
    TUESDAY = 2,
    WEDNESDAY = 3,
    THURSDAY = 4,
    FRIDAY = 5,
    SATURDAY = 6
}
export declare class Calendar {
    private _firstWeekDay;
    constructor(firstWeekDay?: number | WEEKDAYS);
    /** Gets the starting day of the week. */
    get firstWeekDay(): number;
    /** Sets the starting day of the week. */
    set firstWeekDay(value: number);
    /**
     * Returns an array of weekdays for one week starting
     * with the currently set `firstWeekDay`
     *
     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]
     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]
     *
     * @returns
     *
     * @memberof Calendar
     */
    weekdays(): number[];
    /**
     * Returns the date values for one month. It will always iterate throught
     * complete weeks, so it will contain dates outside the specified month.
     *
     * @param year
     * @param month
     * @param boolean
     * @returns
     *
     * @memberof Calendar
     */
    monthdates(year: number, month: number, extraWeek?: boolean): ICalendarDate[];
    /**
     * Returns a matrix (array of arrays) representing a month's calendar.
     * Each row represents a full week; week entries are ICalendarDate objects.
     *
     * @param year
     * @param month
     * @returns
     *
     * @memberof Calendar
     */
    monthdatescalendar(year: number, month: number, extraWeek?: boolean): ICalendarDate[][];
    timedelta(date: Date, interval: TimeDeltaInterval, units: number): Date;
    /** Gets the same date the month after. */
    getNextMonth(date: Date): Date;
    /** Gets the same date the month prior. */
    getPrevMonth(date: Date): Date;
    /** Gets the same date the year after. */
    getNextYear(date: Date): Date;
    /** Gets the same date the year prior. */
    getPrevYear(date: Date): Date;
    /** Gets the week number of a given date. */
    getWeekNumber(date: Date): number;
    private generateICalendarDate;
    private isPreviousMonth;
    private isNextMonth;
}
