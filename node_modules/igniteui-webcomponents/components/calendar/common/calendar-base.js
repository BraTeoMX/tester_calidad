var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement } from 'lit';
import { property } from 'lit/decorators.js';
import { blazorDeepImport } from '../../common/decorators/blazorDeepImport.js';
import { blazorIndirectRender } from '../../common/decorators/blazorIndirectRender.js';
import { blazorSuppress } from '../../common/decorators/blazorSuppress.js';
import { watch } from '../../common/decorators/watch.js';
import { Calendar } from './calendar.model.js';
import { getWeekDayNumber } from './utils.js';
export const MONTHS_PER_ROW = 3;
export const YEARS_PER_ROW = 3;
let IgcCalendarBaseComponent = class IgcCalendarBaseComponent extends LitElement {
    constructor() {
        super(...arguments);
        this._activeDate = new Date();
        this._activeDateSetFlag = false;
        this.calendarModel = new Calendar();
        this.selection = 'single';
        this.showWeekNumbers = false;
        this.weekStart = 'sunday';
        this.locale = 'en';
    }
    set activeDate(val) {
        const oldVal = this._activeDate;
        this._activeDate = val;
        this._activeDateSetFlag = true;
        this.requestUpdate('activeDate', oldVal);
    }
    get activeDate() {
        return this._activeDate;
    }
    weekStartChange() {
        this.calendarModel.firstWeekDay = getWeekDayNumber(this.weekStart);
    }
    selectionChange() {
        this.value = undefined;
    }
    async firstUpdated() {
        if (this._activeDateSetFlag) {
            return;
        }
        if (this.selection === 'single') {
            this.activeDate = this.value ?? this.activeDate;
        }
        else {
            this.activeDate = this.values ? this.values[0] : this.activeDate;
        }
    }
};
__decorate([
    blazorSuppress(),
    property({
        converter: {
            fromAttribute: (value) => (value ? new Date(value) : undefined),
            toAttribute: (value) => value.toISOString(),
        },
    })
], IgcCalendarBaseComponent.prototype, "value", void 0);
__decorate([
    blazorSuppress(),
    property({
        converter: {
            fromAttribute: (value) => !value
                ? undefined
                : value
                    .split(',')
                    .map((v) => v.trim())
                    .filter((v) => v)
                    .map((v) => new Date(v)),
            toAttribute: (value) => value.map((v) => v.toISOString()).join(','),
        },
    })
], IgcCalendarBaseComponent.prototype, "values", void 0);
__decorate([
    property()
], IgcCalendarBaseComponent.prototype, "selection", void 0);
__decorate([
    property({ type: Boolean, attribute: 'show-week-numbers', reflect: true })
], IgcCalendarBaseComponent.prototype, "showWeekNumbers", void 0);
__decorate([
    property({ attribute: 'week-start' })
], IgcCalendarBaseComponent.prototype, "weekStart", void 0);
__decorate([
    blazorSuppress(),
    property({
        attribute: 'active-date',
        converter: {
            fromAttribute: (value) => (value ? new Date(value) : new Date()),
            toAttribute: (value) => value.toISOString(),
        },
    })
], IgcCalendarBaseComponent.prototype, "activeDate", null);
__decorate([
    property()
], IgcCalendarBaseComponent.prototype, "locale", void 0);
__decorate([
    property({ attribute: false })
], IgcCalendarBaseComponent.prototype, "disabledDates", void 0);
__decorate([
    property({ attribute: false })
], IgcCalendarBaseComponent.prototype, "specialDates", void 0);
__decorate([
    watch('weekStart')
], IgcCalendarBaseComponent.prototype, "weekStartChange", null);
__decorate([
    watch('selection', { waitUntilFirstUpdate: true })
], IgcCalendarBaseComponent.prototype, "selectionChange", null);
IgcCalendarBaseComponent = __decorate([
    blazorIndirectRender,
    blazorDeepImport
], IgcCalendarBaseComponent);
export { IgcCalendarBaseComponent };
//# sourceMappingURL=calendar-base.js.map