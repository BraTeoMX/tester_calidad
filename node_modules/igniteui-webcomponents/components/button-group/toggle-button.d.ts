import { LitElement } from 'lit';
/**
 * The `igc-toggle-button` wraps a native button element and exposes additional `value` and `selected` properties.
 * It is used in the context of an `igc-button-group` to facilitate the creation of group/toolbar like UX behaviors.
 *
 * @element igc-toggle-button
 *
 * @slot Renders the label/content of the button.
 *
 * @csspart toggle - The native button element.
 */
export default class IgcToggleButtonComponent extends LitElement {
    static styles: import("lit").CSSResult[];
    static readonly tagName = "igc-toggle-button";
    static shadowRootOptions: {
        delegatesFocus: boolean;
        mode: ShadowRootMode;
        serializable?: boolean;
        slotAssignment?: SlotAssignmentMode;
    };
    static register(): void;
    private _kbFocus;
    private _nativeButton;
    /**
     * The value attribute of the control.
     * @attr
     */
    value: string;
    /**
     * Determines whether the button is selected.
     * @attr
     */
    selected: boolean;
    /**
     * Determines whether the button is disabled.
     * @attr
     */
    disabled: boolean;
    /** Sets focus on the button. */
    focus(options?: FocusOptions): void;
    /** Removes focus from the button. */
    blur(): void;
    /** Simulates a mouse click on the element. */
    click(): void;
    protected render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'igc-toggle-button': IgcToggleButtonComponent;
    }
}
