{"version":3,"file":"date-util.js","sourceRoot":"","sources":["../../../src/components/date-time-input/date-util.ts"],"names":[],"mappings":"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","sourcesContent":["import { isDate } from '../calendar/common/utils.js';\nimport { MaskParser } from '../mask-input/mask-parser.js';\n\nexport enum FormatDesc {\n  Numeric = 'numeric',\n  TwoDigits = '2-digit',\n}\n\nexport enum DateParts {\n  Day = 'day',\n  Month = 'month',\n  Year = 'year',\n  Date = 'date',\n  Hours = 'hours',\n  Minutes = 'minutes',\n  Seconds = 'seconds',\n  AmPm = 'amPm',\n  Literal = 'literal',\n}\n\nexport enum DatePart {\n  Month = 'month',\n  Year = 'year',\n  Date = 'date',\n  Hours = 'hours',\n  Minutes = 'minutes',\n  Seconds = 'seconds',\n  AmPm = 'amPm',\n}\n\n/** @ignore */\nexport interface DatePartInfo {\n  type: DateParts;\n  start: number;\n  end: number;\n  format: string;\n}\n\nexport interface DatePartDeltas {\n  date?: number;\n  month?: number;\n  year?: number;\n  hours?: number;\n  minutes?: number;\n  seconds?: number;\n}\n\nexport abstract class DateTimeUtil {\n  public static readonly DEFAULT_INPUT_FORMAT = 'MM/dd/yyyy';\n  public static readonly DEFAULT_TIME_INPUT_FORMAT = 'hh:mm tt';\n  private static readonly SEPARATOR = 'literal';\n  private static readonly DEFAULT_LOCALE = 'en';\n  private static _parser = new MaskParser();\n\n  public static parseValueFromMask(\n    inputData: string,\n    dateTimeParts: DatePartInfo[],\n    promptChar?: string\n  ): Date | null {\n    const parts: { [key in DateParts]: number } = {} as any;\n    dateTimeParts.forEach((dp) => {\n      let value = Number.parseInt(\n        DateTimeUtil.getCleanVal(inputData, dp, promptChar),\n        10\n      );\n      if (!value) {\n        value =\n          dp.type === DateParts.Date || dp.type === DateParts.Month ? 1 : 0;\n      }\n      parts[dp.type] = value;\n    });\n    parts[DateParts.Month] -= 1;\n\n    if (parts[DateParts.Month] < 0 || 11 < parts[DateParts.Month]) {\n      return null;\n    }\n\n    // TODO: Century threshold\n    if (parts[DateParts.Year] < 50) {\n      parts[DateParts.Year] += 2000;\n    }\n\n    if (\n      parts[DateParts.Date] >\n      DateTimeUtil.daysInMonth(parts[DateParts.Year], parts[DateParts.Month])\n    ) {\n      return null;\n    }\n\n    if (\n      parts[DateParts.Hours] > 23 ||\n      parts[DateParts.Minutes] > 59 ||\n      parts[DateParts.Seconds] > 59\n    ) {\n      return null;\n    }\n\n    const amPm = dateTimeParts.find((p) => p.type === DateParts.AmPm);\n    if (amPm) {\n      parts[DateParts.Hours] %= 12;\n    }\n\n    if (\n      amPm &&\n      DateTimeUtil.getCleanVal(inputData, amPm, promptChar).toLowerCase() ===\n        'pm'\n    ) {\n      parts[DateParts.Hours] += 12;\n    }\n\n    return new Date(\n      parts[DateParts.Year] || 2000,\n      parts[DateParts.Month] || 0,\n      parts[DateParts.Date] || 1,\n      parts[DateParts.Hours] || 0,\n      parts[DateParts.Minutes] || 0,\n      parts[DateParts.Seconds] || 0\n    );\n  }\n\n  public static getDefaultMask(locale: string): string {\n    const parts = DateTimeUtil.getDefaultLocaleMask(\n      locale || DateTimeUtil.DEFAULT_LOCALE\n    );\n\n    if (parts !== undefined) {\n      parts.forEach((p: any) => {\n        if (p.type !== DateParts.Year && p.type !== DateTimeUtil.SEPARATOR) {\n          p.formatType = FormatDesc.TwoDigits;\n        }\n      });\n\n      return DateTimeUtil.getMask(parts);\n    }\n\n    return '';\n  }\n\n  public static parseDateTimeFormat(\n    mask: string,\n    locale: string = DateTimeUtil.DEFAULT_LOCALE,\n    noLeadingZero = false\n  ): DatePartInfo[] {\n    const format = mask || DateTimeUtil.getDefaultMask(locale);\n    const dateTimeParts: DatePartInfo[] = [];\n    const formatArray = Array.from(format);\n    let currentPart: DatePartInfo | null = null;\n    let position = 0;\n\n    for (let i = 0; i < formatArray.length; i++, position++) {\n      const type = DateTimeUtil.determineDatePart(formatArray[i]);\n      if (currentPart) {\n        if (currentPart.type === type) {\n          currentPart.format += formatArray[i];\n          if (i < formatArray.length - 1) {\n            continue;\n          }\n        }\n\n        DateTimeUtil.addCurrentPart(currentPart, dateTimeParts, noLeadingZero);\n        position = currentPart.end;\n      }\n\n      currentPart = {\n        start: position,\n        end: position + formatArray[i].length,\n        type,\n        format: formatArray[i],\n      };\n    }\n\n    // make sure the last member of a format like H:m:s is not omitted\n    if (\n      !dateTimeParts.filter((p) => p.format.includes(currentPart!.format))\n        .length\n    ) {\n      DateTimeUtil.addCurrentPart(currentPart!, dateTimeParts, noLeadingZero);\n    }\n    // formats like \"y\" or \"yyy\" are treated like \"yyyy\" while editing\n    const yearPart = dateTimeParts.filter((p) => p.type === DateParts.Year)[0];\n    if (yearPart && yearPart.format !== 'yy') {\n      yearPart.end += 4 - yearPart.format.length;\n      yearPart.format = 'yyyy';\n    }\n\n    return dateTimeParts;\n  }\n\n  public static parseIsoDate(value: string): Date | null {\n    let regex = /^\\d{4}/g;\n    const timeLiteral = 'T';\n    if (regex.test(value)) {\n      return new Date(\n        `${value}${value.indexOf(timeLiteral) === -1 ? 'T00:00:00' : ''}`\n      );\n    }\n\n    regex = /^\\d{2}/g;\n    if (regex.test(value)) {\n      const dateNow = new Date().toISOString();\n      const [datePart, _timePart] = dateNow.split(timeLiteral);\n      return new Date(`${datePart}T${value}`);\n    }\n\n    return null;\n  }\n\n  public static isValidDate(value: any): value is Date {\n    if (isDate(value)) {\n      return !Number.isNaN(value.getTime());\n    }\n\n    return false;\n  }\n\n  public static formatDate(\n    value: Date,\n    locale: string,\n    format: string,\n    noLeadingZero = false\n  ): string {\n    const options: any = {};\n    let formattedDate = '';\n\n    switch (format) {\n      case 'short':\n      case 'long':\n      case 'medium':\n      case 'full':\n        options.dateStyle = format;\n        options.timeStyle = format;\n        break;\n      case 'shortDate':\n      case 'longDate':\n      case 'mediumDate':\n      case 'fullDate':\n        options.dateStyle = format.toLowerCase().split('date')[0];\n        break;\n      case 'shortTime':\n      case 'longTime':\n      case 'mediumTime':\n      case 'fullTime':\n        options.timeStyle = format.toLowerCase().split('time')[0];\n        break;\n      default:\n        return DateTimeUtil.setDisplayFormatOptions(\n          value,\n          format,\n          locale,\n          noLeadingZero\n        );\n    }\n\n    let formatter: Intl.DateTimeFormat;\n    try {\n      formatter = new Intl.DateTimeFormat(locale, options);\n    } catch {\n      formatter = new Intl.DateTimeFormat(DateTimeUtil.DEFAULT_LOCALE, options);\n    }\n\n    formattedDate = formatter.format(value);\n\n    return formattedDate;\n  }\n\n  public static getPartValue(\n    datePartInfo: DatePartInfo,\n    partLength: number,\n    _dateValue: Date | null\n  ): string {\n    let maskedValue: any;\n    const datePart = datePartInfo.type;\n\n    switch (datePart) {\n      case DateParts.Date:\n        maskedValue = _dateValue!.getDate();\n        break;\n      case DateParts.Month:\n        // months are zero based\n        maskedValue = _dateValue!.getMonth() + 1;\n        break;\n      case DateParts.Year:\n        if (partLength === 2) {\n          maskedValue = DateTimeUtil.prependValue(\n            Number.parseInt(_dateValue!.getFullYear().toString().slice(-2), 10),\n            partLength,\n            '0'\n          );\n        } else {\n          maskedValue = _dateValue!.getFullYear();\n        }\n        break;\n      case DateParts.Hours:\n        if (datePartInfo.format.indexOf('h') !== -1) {\n          maskedValue = DateTimeUtil.prependValue(\n            DateTimeUtil.toTwelveHourFormat(_dateValue!.getHours().toString()),\n            partLength,\n            '0'\n          );\n        } else {\n          maskedValue = _dateValue!.getHours();\n        }\n        break;\n      case DateParts.Minutes:\n        maskedValue = _dateValue!.getMinutes();\n        break;\n      case DateParts.Seconds:\n        maskedValue = _dateValue!.getSeconds();\n        break;\n      case DateParts.AmPm:\n        maskedValue = _dateValue!.getHours() >= 12 ? 'PM' : 'AM';\n        break;\n    }\n\n    if (datePartInfo.type !== DateParts.AmPm) {\n      return DateTimeUtil.prependValue(maskedValue, partLength, '0');\n    }\n\n    return maskedValue;\n  }\n\n  public static spinYear(delta: number, newDate: Date): Date {\n    const maxDate = DateTimeUtil.daysInMonth(\n      newDate.getFullYear() + delta,\n      newDate.getMonth()\n    );\n    if (newDate.getDate() > maxDate) {\n      // clip to max to avoid leap year change shifting the entire value\n      newDate.setDate(maxDate);\n    }\n    newDate.setFullYear(newDate.getFullYear() + delta);\n\n    return newDate;\n  }\n\n  public static spinMonth(\n    delta: number,\n    newDate: Date,\n    spinLoop: boolean\n  ): void {\n    const maxDate = DateTimeUtil.daysInMonth(\n      newDate.getFullYear(),\n      newDate.getMonth() + delta\n    );\n    if (newDate.getDate() > maxDate) {\n      newDate.setDate(maxDate);\n    }\n\n    const maxMonth = 11;\n    const minMonth = 0;\n    let month = newDate.getMonth() + delta;\n    if (month > maxMonth) {\n      month = spinLoop ? (month % maxMonth) - 1 : maxMonth;\n    } else if (month < minMonth) {\n      month = spinLoop ? maxMonth + (month % maxMonth) + 1 : minMonth;\n    }\n\n    newDate.setMonth(month);\n  }\n\n  public static spinDate(\n    delta: number,\n    newDate: Date,\n    spinLoop: boolean\n  ): void {\n    const maxDate = DateTimeUtil.daysInMonth(\n      newDate.getFullYear(),\n      newDate.getMonth()\n    );\n    let date = newDate.getDate() + delta;\n    if (date > maxDate) {\n      date = spinLoop ? date % maxDate : maxDate;\n    } else if (date < 1) {\n      date = spinLoop ? maxDate + (date % maxDate) : 1;\n    }\n\n    newDate.setDate(date);\n  }\n\n  public static spinHours(\n    delta: number,\n    newDate: Date,\n    spinLoop: boolean\n  ): void {\n    const maxHour = 23;\n    const minHour = 0;\n    let hours = newDate.getHours() + delta;\n    if (hours > maxHour) {\n      hours = spinLoop ? (hours % maxHour) - 1 : maxHour;\n    } else if (hours < minHour) {\n      hours = spinLoop ? maxHour + (hours % maxHour) + 1 : minHour;\n    }\n\n    newDate.setHours(hours);\n  }\n\n  public static spinMinutes(\n    delta: number,\n    newDate: Date,\n    spinLoop: boolean\n  ): void {\n    const maxMinutes = 59;\n    const minMinutes = 0;\n    let minutes = newDate.getMinutes() + delta;\n    if (minutes > maxMinutes) {\n      minutes = spinLoop ? (minutes % maxMinutes) - 1 : maxMinutes;\n    } else if (minutes < minMinutes) {\n      minutes = spinLoop ? maxMinutes + (minutes % maxMinutes) + 1 : minMinutes;\n    }\n\n    newDate.setMinutes(minutes);\n  }\n\n  public static spinSeconds(\n    delta: number,\n    newDate: Date,\n    spinLoop: boolean\n  ): void {\n    const maxSeconds = 59;\n    const minSeconds = 0;\n    let seconds = newDate.getSeconds() + delta;\n    if (seconds > maxSeconds) {\n      seconds = spinLoop ? (seconds % maxSeconds) - 1 : maxSeconds;\n    } else if (seconds < minSeconds) {\n      seconds = spinLoop ? maxSeconds + (seconds % maxSeconds) + 1 : minSeconds;\n    }\n\n    newDate.setSeconds(seconds);\n  }\n\n  public static spinAmPm(\n    newDate: Date,\n    currentDate: Date,\n    amPmFromMask: string\n  ): Date {\n    let date = new Date(newDate);\n\n    switch (amPmFromMask) {\n      case 'AM':\n        date = new Date(newDate.setHours(newDate.getHours() + 12));\n        break;\n      case 'PM':\n        date = new Date(newDate.setHours(newDate.getHours() - 12));\n        break;\n    }\n    if (date.getDate() !== currentDate.getDate()) {\n      return currentDate;\n    }\n\n    return date;\n  }\n\n  public static greaterThanMaxValue(\n    value: Date,\n    maxValue: Date,\n    includeTime = true,\n    includeDate = true\n  ): boolean {\n    if (includeTime && includeDate) {\n      return value.getTime() > maxValue.getTime();\n    }\n\n    const _value = new Date(value.getTime());\n    const _maxValue = new Date(maxValue.getTime());\n    if (!includeTime) {\n      _value.setHours(0, 0, 0, 0);\n      _maxValue.setHours(0, 0, 0, 0);\n    }\n    if (!includeDate) {\n      _value.setFullYear(0, 0, 0);\n      _maxValue.setFullYear(0, 0, 0);\n    }\n\n    return _value.getTime() > _maxValue.getTime();\n  }\n\n  /**\n   * Determines whether the provided value is less than the provided min value.\n   *\n   * @param includeTime set to false if you want to exclude time portion of the two dates\n   * @param includeDate set to false if you want to exclude the date portion of the two dates\n   * @returns true if provided value is less than provided minValue\n   */\n  public static lessThanMinValue(\n    value: Date,\n    minValue: Date,\n    includeTime = true,\n    includeDate = true\n  ): boolean {\n    if (includeTime && includeDate) {\n      return value.getTime() < minValue.getTime();\n    }\n\n    const _value = new Date(value.getTime());\n    const _minValue = new Date(minValue.getTime());\n    if (!includeTime) {\n      _value.setHours(0, 0, 0, 0);\n      _minValue.setHours(0, 0, 0, 0);\n    }\n    if (!includeDate) {\n      _value.setFullYear(0, 0, 0);\n      _minValue.setFullYear(0, 0, 0);\n    }\n\n    return _value.getTime() < _minValue.getTime();\n  }\n\n  /**\n   * Validates a value within a given min and max value range.\n   *\n   * @param value The value to validate\n   * @param minValue The lowest possible value that `value` can take\n   * @param maxValue The largest possible value that `value` can take\n   */\n  public static validateMinMax(\n    value: Date,\n    minValue: Date | string,\n    maxValue: Date | string,\n    includeTime = true,\n    includeDate = true\n  ) {\n    // if (!value) {\n    //     return null;\n    // }\n    const errors = {};\n    const min = DateTimeUtil.isValidDate(minValue)\n      ? minValue\n      : DateTimeUtil.parseIsoDate(minValue);\n    const max = DateTimeUtil.isValidDate(maxValue)\n      ? maxValue\n      : DateTimeUtil.parseIsoDate(maxValue);\n    if (\n      min &&\n      value &&\n      DateTimeUtil.lessThanMinValue(value, min, includeTime, includeDate)\n    ) {\n      Object.assign(errors, { minValue: true });\n    }\n    if (\n      max &&\n      value &&\n      DateTimeUtil.greaterThanMaxValue(value, max, includeTime, includeDate)\n    ) {\n      Object.assign(errors, { maxValue: true });\n    }\n\n    return errors;\n  }\n\n  private static setDisplayFormatOptions(\n    value: Date,\n    format: string,\n    locale: string,\n    noLeadingZero = false\n  ) {\n    const options: any = {};\n    const parts = DateTimeUtil.parseDateTimeFormat(\n      format,\n      locale,\n      noLeadingZero\n    );\n\n    const datePartFormatOptionMap = new Map([\n      [DateParts.Date, 'day'],\n      [DateParts.Month, 'month'],\n      [DateParts.Year, 'year'],\n      [DateParts.Hours, 'hour'],\n      [DateParts.Minutes, 'minute'],\n      [DateParts.Seconds, 'second'],\n      [DateParts.AmPm, 'dayPeriod'],\n    ]);\n\n    const dateFormatMap = new Map([\n      ['d', 'numeric'],\n      ['dd', '2-digit'],\n      ['M', 'numeric'],\n      ['MM', '2-digit'],\n      ['MMM', 'short'],\n      ['MMMM', 'long'],\n      ['MMMMM', 'narrow'],\n      ['y', 'numeric'],\n      ['yy', '2-digit'],\n      ['yyy', 'numeric'],\n      ['yyyy', 'numeric'],\n      ['h', 'numeric'],\n      ['hh', '2-digit'],\n      ['H', 'numeric'],\n      ['HH', '2-digit'],\n      ['m', 'numeric'],\n      ['mm', '2-digit'],\n      ['s', 'numeric'],\n      ['ss', '2-digit'],\n      ['ttt', 'short'],\n      ['tttt', 'long'],\n      ['ttttt', 'narrow'],\n    ]);\n\n    for (const part of parts) {\n      if (part.type !== DateParts.Literal) {\n        const option = datePartFormatOptionMap.get(part.type);\n        const format =\n          dateFormatMap.get(part.format) ||\n          dateFormatMap.get(part.format.substring(0, 2));\n\n        if (option && format) {\n          options[option] = format;\n\n          if (part.type === DateParts.Hours) {\n            if (part.format.charAt(0) === 'h') {\n              options.hourCycle = 'h12';\n            } else {\n              options.hourCycle = 'h23';\n            }\n          }\n        }\n\n        // Need to be set if we have 't' or 'tt'.\n        if (part.type === DateParts.AmPm && part.format.length <= 2) {\n          options.hour = '2-digit';\n          options.hourCycle = 'h12';\n        }\n      }\n    }\n\n    let formatter: Intl.DateTimeFormat;\n    try {\n      formatter = new Intl.DateTimeFormat(\n        locale,\n        options as Intl.DateTimeFormatOptions\n      );\n    } catch {\n      formatter = new Intl.DateTimeFormat(DateTimeUtil.DEFAULT_LOCALE, options);\n    }\n\n    const formattedParts = formatter.formatToParts(value);\n\n    let result = '';\n\n    for (const part of parts) {\n      if (part.type === DateParts.Literal) {\n        result += part.format;\n        continue;\n      }\n\n      const option = datePartFormatOptionMap.get(part.type)!;\n      result += formattedParts.filter((p) => p.type === option)[0]?.value || '';\n    }\n\n    return result;\n  }\n\n  private static getMask(dateStruct: any[]): string {\n    const mask = [];\n\n    for (const part of dateStruct) {\n      switch (part.formatType) {\n        case FormatDesc.Numeric: {\n          if (part.type === DateParts.Day) {\n            mask.push('d');\n          } else if (part.type === DateParts.Month) {\n            mask.push('M');\n          } else {\n            mask.push('yyyy');\n          }\n          break;\n        }\n        case FormatDesc.TwoDigits: {\n          if (part.type === DateParts.Day) {\n            mask.push('dd');\n          } else if (part.type === DateParts.Month) {\n            mask.push('MM');\n          } else {\n            mask.push('yy');\n          }\n        }\n      }\n\n      if (part.type === DateTimeUtil.SEPARATOR) {\n        mask.push(part.value);\n      }\n    }\n\n    return mask.join('');\n  }\n\n  private static addCurrentPart(\n    currentPart: DatePartInfo,\n    dateTimeParts: DatePartInfo[],\n    noLeadingZero = false\n  ): void {\n    DateTimeUtil.ensureLeadingZero(currentPart, noLeadingZero);\n    currentPart.end = currentPart.start + currentPart.format.length;\n    dateTimeParts.push(currentPart);\n  }\n\n  private static ensureLeadingZero(part: DatePartInfo, noLeadingZero = false) {\n    switch (part.type) {\n      case DateParts.Date:\n      case DateParts.Month:\n      case DateParts.Hours:\n      case DateParts.Minutes:\n      case DateParts.Seconds:\n        if (part.format.length === 1 && !noLeadingZero) {\n          part.format = part.format.repeat(2);\n        }\n        break;\n    }\n  }\n\n  private static determineDatePart(char: string): DateParts {\n    switch (char) {\n      case 'd':\n      case 'D':\n        return DateParts.Date;\n      case 'M':\n        return DateParts.Month;\n      case 'y':\n      case 'Y':\n        return DateParts.Year;\n      case 'h':\n      case 'H':\n        return DateParts.Hours;\n      case 'm':\n        return DateParts.Minutes;\n      case 's':\n      case 'S':\n        return DateParts.Seconds;\n      case 't':\n      case 'T':\n        return DateParts.AmPm;\n      default:\n        return DateParts.Literal;\n    }\n  }\n\n  private static getDefaultLocaleMask(locale: string) {\n    const dateStruct: any = [];\n    let formatter: Intl.DateTimeFormat;\n    try {\n      formatter = new Intl.DateTimeFormat(locale);\n    } catch {\n      return;\n    }\n\n    const formatToParts = formatter.formatToParts(new Date());\n\n    for (const part of formatToParts) {\n      if (part.type === DateTimeUtil.SEPARATOR) {\n        dateStruct.push({\n          type: DateTimeUtil.SEPARATOR,\n          value: part.value,\n        });\n      } else {\n        dateStruct.push({\n          type: part.type,\n        });\n      }\n    }\n\n    const formatterOptions = formatter.resolvedOptions();\n\n    for (const part of dateStruct) {\n      switch (part.type) {\n        case DateParts.Day: {\n          part.formatType = formatterOptions.day;\n          break;\n        }\n        case DateParts.Month: {\n          part.formatType = formatterOptions.month;\n          break;\n        }\n        case DateParts.Year: {\n          part.formatType = formatterOptions.year;\n          break;\n        }\n      }\n    }\n\n    DateTimeUtil.fillDatePartsPositions(dateStruct);\n    return dateStruct;\n  }\n\n  private static fillDatePartsPositions(dateArray: any[]): void {\n    let currentPos = 0;\n\n    for (const part of dateArray) {\n      // Day|Month part positions\n      if (part.type === DateParts.Day || part.type === DateParts.Month) {\n        // Offset 2 positions for number\n        part.position = [currentPos, currentPos + 2];\n        currentPos += 2;\n      } else if (part.type === DateParts.Year) {\n        // Year part positions\n        switch (part.formatType) {\n          case FormatDesc.Numeric: {\n            // Offset 4 positions for full year\n            part.position = [currentPos, currentPos + 4];\n            currentPos += 4;\n            break;\n          }\n          case FormatDesc.TwoDigits: {\n            // Offset 2 positions for short year\n            part.position = [currentPos, currentPos + 2];\n            currentPos += 2;\n            break;\n          }\n        }\n      } else if (part.type === DateTimeUtil.SEPARATOR) {\n        // Separator positions\n        part.position = [currentPos, currentPos + 1];\n        currentPos++;\n      }\n    }\n  }\n\n  private static getCleanVal(\n    inputData: string,\n    datePart: DatePartInfo,\n    prompt?: string\n  ): string {\n    return DateTimeUtil.trimEmptyPlaceholders(\n      inputData.substring(datePart.start, datePart.end),\n      prompt\n    );\n  }\n\n  private static escapeRegExp(string: string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n\n  private static trimEmptyPlaceholders(value: string, prompt?: string): string {\n    const result = value.replace(\n      new RegExp(DateTimeUtil.escapeRegExp(prompt ?? '_'), 'g'),\n      ''\n    );\n    return result;\n  }\n\n  private static daysInMonth(fullYear: number, month: number): number {\n    return new Date(fullYear, month + 1, 0).getDate();\n  }\n\n  private static prependValue(\n    value: number,\n    partLength: number,\n    prependChar: string\n  ): string {\n    return (prependChar + value.toString()).slice(-partLength);\n  }\n\n  private static toTwelveHourFormat(value: string): number {\n    let hour = Number.parseInt(\n      value.replace(\n        new RegExp(DateTimeUtil.escapeRegExp(DateTimeUtil._parser.prompt), 'g'),\n        '0'\n      ),\n      10\n    );\n    if (hour > 12) {\n      hour -= 12;\n    } else if (hour === 0) {\n      hour = 12;\n    }\n\n    return hour;\n  }\n}\n"]}