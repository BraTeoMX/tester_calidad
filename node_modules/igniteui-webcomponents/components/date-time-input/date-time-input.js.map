{"version":3,"file":"date-time-input.js","sourceRoot":"","sources":["../../../src/components/date-time-input/date-time-input.ts"],"names":[],"mappings":"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","sourcesContent":["import { type ComplexAttributeConverter, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\n\nimport {\n  addKeybindings,\n  altKey,\n  arrowDown,\n  arrowLeft,\n  arrowRight,\n  arrowUp,\n  ctrlKey,\n} from '../common/controllers/key-bindings.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { registerComponent } from '../common/definitions/register.js';\nimport type { AbstractConstructor } from '../common/mixins/constructor.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { noop, partNameMap } from '../common/util.js';\nimport {\n  type Validator,\n  maxDateValidator,\n  minDateValidator,\n  requiredValidator,\n} from '../common/validators.js';\nimport type { IgcInputEventMap } from '../input/input-base.js';\nimport {\n  IgcMaskInputBaseComponent,\n  type MaskRange,\n} from '../mask-input/mask-input-base.js';\nimport {\n  DatePart,\n  type DatePartDeltas,\n  type DatePartInfo,\n  DateParts,\n  DateTimeUtil,\n} from './date-util.js';\n\nexport interface IgcDateTimeInputEventMap\n  extends Omit<IgcInputEventMap, 'igcChange'> {\n  igcChange: CustomEvent<Date | null>;\n}\n\nconst converter: ComplexAttributeConverter<Date | null> = {\n  fromAttribute: (value: string) =>\n    !value ? null : DateTimeUtil.parseIsoDate(value),\n  toAttribute: (value: Date) => value.toISOString(),\n};\n\n/**\n * A date time input is an input field that lets you set and edit the date and time in a chosen input element\n * using customizable display and input formats.\n *\n * @element igc-date-time-input\n *\n * @slot prefix - Renders content before the input.\n * @slot suffix - Renders content after input.\n * @slot helper-text - Renders content below the input.\n *\n * @fires igcInput - Emitted when the control input receives user input.\n * @fires igcChange - Emitted when the control's checked state changes.\n * @fires igcFocus - Emitted when the control gains focus.\n * @fires igcBlur - Emitted when the control loses focus.\n *\n * @csspart container - The main wrapper that holds all main input elements.\n * @csspart input - The native input element.\n * @csspart label - The native label element.\n * @csspart prefix - The prefix wrapper.\n * @csspart suffix - The suffix wrapper.\n * @csspart helper-text - The helper text wrapper.\n */\nexport default class IgcDateTimeInputComponent extends EventEmitterMixin<\n  IgcDateTimeInputEventMap,\n  AbstractConstructor<IgcMaskInputBaseComponent>\n>(IgcMaskInputBaseComponent) {\n  public static readonly tagName = 'igc-date-time-input';\n\n  /* blazorSuppress */\n  public static register() {\n    registerComponent(IgcDateTimeInputComponent);\n  }\n\n  protected override validators: Validator<this>[] = [\n    requiredValidator,\n\n    {\n      ...minDateValidator,\n      isValid: () =>\n        this.min\n          ? !DateTimeUtil.lessThanMinValue(\n              this.value || new Date(),\n              this.min,\n              this.hasTimeParts,\n              this.hasDateParts\n            )\n          : true,\n    },\n    {\n      ...maxDateValidator,\n      isValid: () =>\n        this.max\n          ? !DateTimeUtil.greaterThanMaxValue(\n              this.value || new Date(),\n              this.max,\n              this.hasTimeParts,\n              this.hasDateParts\n            )\n          : true,\n    },\n  ];\n\n  protected _defaultMask!: string;\n  protected _value: Date | null = null;\n\n  private _oldValue: Date | null = null;\n  private _inputDateParts!: DatePartInfo[];\n  private _inputFormat!: string;\n  private _datePartDeltas: DatePartDeltas = {\n    date: 1,\n    month: 1,\n    year: 1,\n    hours: 1,\n    minutes: 1,\n    seconds: 1,\n  };\n\n  /**\n   * The date format to apply on the input.\n   * @attr input-format\n   */\n  @property({ attribute: 'input-format' })\n  public get inputFormat(): string {\n    return this._inputFormat || this._defaultMask;\n  }\n\n  public set inputFormat(val: string) {\n    if (val) {\n      this.setMask(val);\n      this._inputFormat = val;\n      if (this.value) {\n        this.updateMask();\n      }\n    }\n  }\n\n  public get value(): Date | null {\n    return this._value;\n  }\n\n  /* @tsTwoWayProperty(true, \"igcChange\", \"detail\", false) */\n  /**\n   * The value of the input.\n   * @attr\n   */\n  @property({ converter: converter })\n  public set value(val: Date | null) {\n    this._value = val\n      ? DateTimeUtil.isValidDate(val)\n        ? val\n        : DateTimeUtil.parseIsoDate(val)\n      : null;\n\n    this.updateMask();\n    this.updateFormValue();\n    this.updateValidity();\n    this.setInvalidState();\n  }\n\n  protected updateFormValue() {\n    this._value\n      ? this.setFormValue(this._value.toISOString())\n      : this.setFormValue(null);\n  }\n\n  /**\n   * The minimum value required for the input to remain valid.\n   * @attr\n   */\n  @property({ converter: converter })\n  public min!: Date;\n\n  /**\n   * The maximum value required for the input to remain valid.\n   * @attr\n   */\n  @property({ converter: converter })\n  public max!: Date;\n\n  /**\n   * The minimum value required for the input to remain valid.\n   * @attr min-value\n   *\n   * @deprecated since v4.4.0. Use the `min` property instead.\n   */\n  @property({ attribute: 'min-value', converter: converter })\n  public set minValue(value: Date) {\n    this.min = value;\n  }\n\n  public get minValue() {\n    return this.min;\n  }\n\n  /**\n   * The maximum value required for the input to remain valid.\n   * @attr max-value\n   *\n   * @deprecated since v4.4.0. Use the `max` property instead.\n   */\n  @property({ attribute: 'max-value', converter: converter })\n  public set maxValue(value: Date) {\n    this.max = value;\n  }\n\n  public get maxValue() {\n    return this.max;\n  }\n\n  /**\n   * Format to display the value in when not editing.\n   * Defaults to the input format if not set.\n   * @attr display-format\n   */\n  @property({ attribute: 'display-format' })\n  public displayFormat!: string;\n\n  /**\n   * Delta values used to increment or decrement each date part on step actions.\n   * All values default to `1`.\n   */\n  @property({ attribute: false })\n  public spinDelta!: DatePartDeltas;\n\n  /**\n   * Sets whether to loop over the currently spun segment.\n   * @attr spin-loop\n   */\n  @property({ type: Boolean, attribute: 'spin-loop' })\n  public spinLoop = true;\n\n  /**\n   * The locale settings used to display the value.\n   * @attr\n   */\n  @property()\n  public locale = 'en';\n\n  @watch('locale', { waitUntilFirstUpdate: true })\n  protected setDefaultMask(): void {\n    if (!this._inputFormat) {\n      this.updateDefaultMask();\n      this.setMask(this._defaultMask);\n    }\n\n    if (this.value) {\n      this.updateMask();\n    }\n  }\n\n  @watch('displayFormat', { waitUntilFirstUpdate: true })\n  protected setDisplayFormat(): void {\n    if (this.value) {\n      this.updateMask();\n    }\n  }\n\n  @watch('prompt', { waitUntilFirstUpdate: true })\n  protected promptChange(): void {\n    if (!this.prompt) {\n      this.prompt = this.parser.prompt;\n    } else {\n      this.parser.prompt = this.prompt;\n    }\n  }\n\n  @watch('min', { waitUntilFirstUpdate: true })\n  @watch('max', { waitUntilFirstUpdate: true })\n  protected constraintChange() {\n    this.updateValidity();\n  }\n\n  private get hasDateParts(): boolean {\n    const parts =\n      this._inputDateParts ||\n      DateTimeUtil.parseDateTimeFormat(this.inputFormat);\n\n    return parts.some(\n      (p) =>\n        p.type === DateParts.Date ||\n        p.type === DateParts.Month ||\n        p.type === DateParts.Year\n    );\n  }\n\n  private get hasTimeParts(): boolean {\n    const parts =\n      this._inputDateParts ||\n      DateTimeUtil.parseDateTimeFormat(this.inputFormat);\n    return parts.some(\n      (p) =>\n        p.type === DateParts.Hours ||\n        p.type === DateParts.Minutes ||\n        p.type === DateParts.Seconds\n    );\n  }\n\n  private get targetDatePart(): DatePart | undefined {\n    let result: DatePart | undefined;\n\n    if (this.focused) {\n      const partType = this._inputDateParts.find(\n        (p) =>\n          p.start <= this.inputSelection.start &&\n          this.inputSelection.start <= p.end &&\n          p.type !== DateParts.Literal\n      )?.type as string as DatePart;\n\n      if (partType) {\n        result = partType;\n      }\n    } else if (this._inputDateParts.some((p) => p.type === DateParts.Date)) {\n      result = DatePart.Date;\n    } else if (this._inputDateParts.some((p) => p.type === DateParts.Hours)) {\n      result = DatePart.Hours;\n    } else {\n      result = this._inputDateParts[0].type as string as DatePart;\n    }\n\n    return result;\n  }\n\n  private get datePartDeltas(): DatePartDeltas {\n    return Object.assign({}, this._datePartDeltas, this.spinDelta);\n  }\n\n  constructor() {\n    super();\n\n    addKeybindings(this, {\n      skip: () => this.readOnly,\n      bindingDefaults: { preventDefault: true, triggers: ['keydownRepeat'] },\n    })\n      // Skip default spin when in the context of a date picker\n      .set([altKey, arrowUp], noop)\n      .set([altKey, arrowDown], noop)\n\n      .set([ctrlKey, ';'], this.setToday)\n      .set(arrowUp, this.keyboardSpin.bind(this, 'up'))\n      .set(arrowDown, this.keyboardSpin.bind(this, 'down'))\n      .set([ctrlKey, arrowLeft], this.navigateParts.bind(this, 0))\n      .set([ctrlKey, arrowRight], this.navigateParts.bind(this, 1));\n  }\n\n  public override connectedCallback() {\n    super.connectedCallback();\n    this.updateDefaultMask();\n    this.setMask(this.inputFormat);\n    this.updateValidity();\n    if (this.value) {\n      this.updateMask();\n    }\n  }\n\n  /** Increments a date/time portion. */\n  public stepUp(datePart?: DatePart, delta?: number): void {\n    const targetPart = datePart || this.targetDatePart;\n\n    if (!targetPart) {\n      return;\n    }\n\n    const { start, end } = this.inputSelection;\n    const newValue = this.trySpinValue(targetPart, delta);\n    this.value = newValue;\n    this.updateComplete.then(() => this.input.setSelectionRange(start, end));\n  }\n\n  /** Decrements a date/time portion. */\n  public stepDown(datePart?: DatePart, delta?: number): void {\n    const targetPart = datePart || this.targetDatePart;\n\n    if (!targetPart) {\n      return;\n    }\n\n    const { start, end } = this.inputSelection;\n    const newValue = this.trySpinValue(targetPart, delta, true);\n    this.value = newValue;\n    this.updateComplete.then(() => this.input.setSelectionRange(start, end));\n  }\n\n  /** Clears the input element of user input. */\n  public clear(): void {\n    this.maskedValue = '';\n    this.value = null;\n  }\n\n  protected setToday() {\n    this.value = new Date();\n    this.handleInput();\n  }\n\n  protected updateMask() {\n    if (this.focused) {\n      this.maskedValue = this.getMaskedValue();\n    } else {\n      if (!DateTimeUtil.isValidDate(this.value)) {\n        this.maskedValue = '';\n        return;\n      }\n\n      const format = this.displayFormat || this.inputFormat;\n\n      if (this.displayFormat) {\n        this.maskedValue = DateTimeUtil.formatDate(\n          this.value,\n          this.locale,\n          format,\n          true\n        );\n      } else if (this.inputFormat) {\n        this.maskedValue = DateTimeUtil.formatDate(\n          this.value,\n          this.locale,\n          format\n        );\n      } else {\n        this.maskedValue = this.value.toLocaleString();\n      }\n    }\n  }\n\n  protected override handleInput() {\n    this.emitEvent('igcInput', { detail: this.value?.toString() });\n  }\n\n  protected handleDragLeave() {\n    if (!this.focused) {\n      this.updateMask();\n    }\n  }\n\n  protected handleDragEnter() {\n    if (!this.focused) {\n      this.maskedValue = this.getMaskedValue();\n    }\n  }\n\n  protected async updateInput(string: string, range: MaskRange) {\n    const { value, end } = this.parser.replace(\n      this.maskedValue,\n      string,\n      range.start,\n      range.end\n    );\n\n    this.maskedValue = value;\n\n    this.updateValue();\n    this.requestUpdate();\n\n    if (range.start !== this.inputFormat.length) {\n      this.handleInput();\n    }\n    await this.updateComplete;\n    this.input.setSelectionRange(end, end);\n  }\n\n  private trySpinValue(\n    datePart: DatePart,\n    delta?: number,\n    negative = false\n  ): Date {\n    // default to 1 if a delta is set to 0 or any other falsy value\n    const _delta =\n      delta || this.datePartDeltas[datePart as keyof DatePartDeltas] || 1;\n\n    const spinValue = negative ? -Math.abs(_delta) : Math.abs(_delta);\n    return this.spinValue(datePart, spinValue);\n  }\n\n  private spinValue(datePart: DatePart, delta: number): Date {\n    if (!(this.value && DateTimeUtil.isValidDate(this.value))) {\n      return new Date();\n    }\n\n    const newDate = new Date(this.value.getTime());\n    let formatPart: DatePartInfo | undefined;\n    let amPmFromMask: string;\n\n    switch (datePart) {\n      case DatePart.Date:\n        DateTimeUtil.spinDate(delta, newDate, this.spinLoop);\n        break;\n      case DatePart.Month:\n        DateTimeUtil.spinMonth(delta, newDate, this.spinLoop);\n        break;\n      case DatePart.Year:\n        DateTimeUtil.spinYear(delta, newDate);\n        break;\n      case DatePart.Hours:\n        DateTimeUtil.spinHours(delta, newDate, this.spinLoop);\n        break;\n      case DatePart.Minutes:\n        DateTimeUtil.spinMinutes(delta, newDate, this.spinLoop);\n        break;\n      case DatePart.Seconds:\n        DateTimeUtil.spinSeconds(delta, newDate, this.spinLoop);\n        break;\n      case DatePart.AmPm:\n        formatPart = this._inputDateParts.find(\n          (dp) => dp.type === DateParts.AmPm\n        );\n        if (formatPart !== undefined) {\n          amPmFromMask = this.maskedValue.substring(\n            formatPart!.start,\n            formatPart!.end\n          );\n          return DateTimeUtil.spinAmPm(newDate, this.value, amPmFromMask);\n        }\n        break;\n    }\n\n    return newDate;\n  }\n\n  private async onWheel(event: WheelEvent) {\n    if (!this.focused || this.readOnly) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    const { start, end } = this.inputSelection;\n    event.deltaY > 0 ? this.stepDown() : this.stepUp();\n    this.handleInput();\n\n    await this.updateComplete;\n    this.setSelectionRange(start, end);\n  }\n\n  private updateDefaultMask(): void {\n    this._defaultMask = DateTimeUtil.getDefaultMask(this.locale);\n  }\n\n  private setMask(string: string): void {\n    const oldFormat = this._inputDateParts?.map((p) => p.format).join('');\n    this._inputDateParts = DateTimeUtil.parseDateTimeFormat(string);\n    const value = this._inputDateParts.map((p) => p.format).join('');\n\n    this._defaultMask = value;\n\n    const newMask = (value || DateTimeUtil.DEFAULT_INPUT_FORMAT).replace(\n      new RegExp(/(?=[^t])[\\w]/, 'g'),\n      '0'\n    );\n\n    this._mask = newMask.includes('tt')\n      ? newMask.replace(/tt/g, 'LL')\n      : newMask;\n\n    this.parser.mask = this._mask;\n    this.parser.prompt = this.prompt;\n\n    if (!this.placeholder || oldFormat === this.placeholder) {\n      this.placeholder = value;\n    }\n  }\n\n  private parseDate(val: string) {\n    return val\n      ? DateTimeUtil.parseValueFromMask(val, this._inputDateParts, this.prompt)\n      : null;\n  }\n\n  private getMaskedValue(): string {\n    let mask = this.emptyMask;\n\n    if (DateTimeUtil.isValidDate(this.value)) {\n      for (const part of this._inputDateParts) {\n        if (part.type === DateParts.Literal) {\n          continue;\n        }\n\n        const targetValue = DateTimeUtil.getPartValue(\n          part,\n          part.format.length,\n          this.value\n        );\n\n        mask = this.parser.replace(\n          mask,\n          targetValue,\n          part.start,\n          part.end\n        ).value;\n      }\n      return mask;\n    }\n\n    return this.maskedValue === '' ? mask : this.maskedValue;\n  }\n\n  private isComplete(): boolean {\n    return !this.maskedValue.includes(this.prompt);\n  }\n\n  private updateValue(): void {\n    if (this.isComplete()) {\n      const parsedDate = this.parseDate(this.maskedValue);\n      this.value = DateTimeUtil.isValidDate(parsedDate) ? parsedDate : null;\n    } else {\n      this.value = null;\n    }\n  }\n\n  protected override _updateSetRangeTextValue() {\n    this.updateValue();\n  }\n\n  private getNewPosition(value: string, direction = 0): number {\n    const cursorPos = this.selection.start;\n\n    if (!direction) {\n      // Last literal before the current cursor position or start of input value\n      const part = this._inputDateParts.findLast(\n        (part) => part.type === DateParts.Literal && part.end < cursorPos\n      );\n      return part?.end ?? 0;\n    }\n\n    // First literal after the current cursor position or end of input value\n    const part = this._inputDateParts.find(\n      (part) => part.type === DateParts.Literal && part.start > cursorPos\n    );\n    return part?.start ?? value.length;\n  }\n\n  protected override async handleFocus() {\n    this.focused = true;\n    super.handleFocus();\n\n    if (this.readOnly) {\n      return;\n    }\n\n    this._oldValue = this.value;\n\n    if (!this._value) {\n      this.maskedValue = this.emptyMask;\n      await this.updateComplete;\n      this.select();\n    }\n  }\n\n  protected override handleBlur() {\n    const isEmptyMask = this.maskedValue === this.emptyMask;\n    const isSameValue = this._oldValue === this.value;\n\n    this.focused = false;\n\n    if (!(this.isComplete() || isEmptyMask)) {\n      const parse = this.parseDate(this.maskedValue);\n\n      if (parse) {\n        this.value = parse;\n      } else {\n        this.value = null;\n        this.maskedValue = '';\n      }\n    } else {\n      this.updateMask();\n    }\n\n    if (!(this.readOnly || isSameValue)) {\n      this.emitEvent('igcChange', { detail: this.value });\n    }\n\n    this.checkValidity();\n    super.handleBlur();\n  }\n\n  protected navigateParts(delta: number) {\n    const position = this.getNewPosition(this.input.value, delta);\n    this.setSelectionRange(position, position);\n  }\n\n  protected async keyboardSpin(direction: 'up' | 'down') {\n    direction === 'up' ? this.stepUp() : this.stepDown();\n    this.handleInput();\n    await this.updateComplete;\n    this.setSelectionRange(this.selection.start, this.selection.end);\n  }\n\n  protected override renderInput() {\n    return html`\n      <input\n        type=\"text\"\n        part=${partNameMap(this.resolvePartNames('input'))}\n        name=${ifDefined(this.name)}\n        .value=${live(this.maskedValue)}\n        .placeholder=${live(this.placeholder || this.emptyMask)}\n        ?readonly=${this.readOnly}\n        ?disabled=${this.disabled}\n        @blur=${this.handleBlur}\n        @focus=${this.handleFocus}\n        @input=${super.handleInput}\n        @wheel=${this.onWheel}\n        @keydown=${super.handleKeydown}\n        @click=${this.handleClick}\n        @cut=${this.handleCut}\n        @compositionstart=${this.handleCompositionStart}\n        @compositionend=${this.handleCompositionEnd}\n        @dragenter=${this.handleDragEnter}\n        @dragleave=${this.handleDragLeave}\n        @dragstart=${this.handleDragStart}\n      />\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-date-time-input': IgcDateTimeInputComponent;\n  }\n}\n"]}