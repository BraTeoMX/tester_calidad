import { LitElement } from 'lit';
import type { Constructor } from '../common/mixins/constructor.js';
export interface IgcDialogEventMap {
    igcClosing: CustomEvent<void>;
    igcClosed: CustomEvent<void>;
}
declare const IgcDialogComponent_base: Constructor<import("../common/mixins/event-emitter.js").EventEmitterInterface<IgcDialogEventMap>> & Constructor<LitElement>;
/**
 * Represents a Dialog component.
 *
 * @element igc-dialog
 *
 * @fires igcClosing - Emitter just before the dialog is closed.
 * @fires igcClosed - Emitted after closing the dialog.
 *
 * @slot - Renders content inside the default slot.
 * @slot title - Renders the title of the dialog header.
 * @slot footer - Renders the dialog footer.
 *
 * @csspart base - The base wrapper of the dialog.
 * @csspart title - The title container.
 * @csspart footer - The footer container.
 * @csspart overlay - The overlay.
 */
export default class IgcDialogComponent extends IgcDialogComponent_base {
    static readonly tagName = "igc-dialog";
    static styles: import("lit").CSSResult[];
    static register(): void;
    private static readonly increment;
    private titleId;
    private dialogRef;
    private animationPlayer;
    private get dialog();
    private titleElements;
    private footerElements;
    /**
     * Whether the dialog should be closed when pressing the 'ESCAPE' button.
     * @deprecated since version 4.2.3. Use `keepOpenOnEscape` instead.
     * @attr close-on-escape
     */
    set closeOnEscape(value: boolean);
    get closeOnEscape(): boolean;
    /**
     * Whether the dialog should be kept open when pressing the 'ESCAPE' button.
     * @attr keep-open-on-escape
     */
    keepOpenOnEscape: boolean;
    /**
     * Whether the dialog should be closed when clicking outside of it.
     * @attr close-on-outside-click
     */
    closeOnOutsideClick: boolean;
    /**
     * Whether to hide the default action button for the dialog.
     *
     * When there is projected content in the `footer` slot this property
     * has no effect.
     * @attr hide-default-action
     */
    hideDefaultAction: boolean;
    /**
     * Whether the dialog is opened.
     * @attr
     */
    open: boolean;
    /**
     * Backdrop animation helper.
     * @hidden @internal
     */
    private animating;
    /**
     * Sets the title of the dialog.
     * @attr
     */
    title: string;
    /** Sets the return value for the dialog. */
    returnValue: string;
    protected resolvePartNames(base: string): {
        [x: string]: string | boolean;
        titled: string | true;
        footed: boolean;
    };
    protected handleOpenState(): void;
    protected firstUpdated(): Promise<void>;
    private toggleAnimation;
    /** Opens the dialog. */
    show(): void;
    /** Closes the dialog. */
    hide(): Promise<void>;
    /** Toggles the open state of the dialog. */
    toggle(): void;
    protected hideWithEvent(): Promise<void>;
    private handleCancel;
    private handleClick;
    private handleClosing;
    protected formSubmitHandler: (e: Event) => void;
    private slotChanged;
    private handleContentChange;
    protected render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'igc-dialog': IgcDialogComponent;
    }
}
export {};
