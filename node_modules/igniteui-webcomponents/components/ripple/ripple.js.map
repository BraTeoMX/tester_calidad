{"version":3,"file":"ripple.js","sourceRoot":"","sources":["../../../src/components/ripple/ripple.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html } from 'lit';\n\nimport { registerComponent } from '../common/definitions/register.js';\nimport { styles } from './ripple.material.css.js';\n\nconst rippleFrames: Keyframe[] = [\n  { opacity: 0.5, transform: 'scale(.3)' },\n  { opacity: 0, transform: 'scale(2)' },\n];\n\nconst rippleAnimation: KeyframeAnimationOptions = {\n  duration: 600, // --igc-ripple-duration,\n  fill: 'forwards',\n  easing: 'linear', // --igc-ripple-easing\n};\n\nlet rippleElement: HTMLElement;\n\nfunction getRippleElement() {\n  if (!rippleElement) {\n    rippleElement = document.createElement('span');\n  }\n  return rippleElement.cloneNode() as HTMLElement;\n}\n\n/**\n * A ripple can be applied to an element to represent\n * interactive surface.\n *\n * @element igc-ripple\n */\nexport default class IgcRippleComponent extends LitElement {\n  public static readonly tagName = 'igc-ripple';\n  public static override styles = styles;\n\n  /* blazorSuppress */\n  public static register() {\n    registerComponent(IgcRippleComponent);\n  }\n\n  constructor() {\n    super();\n    this.addEventListener('pointerdown', this.handler);\n  }\n\n  private handler = ({ clientX, clientY }: PointerEvent) => {\n    const element = getRippleElement();\n    const { radius, top, left } = this.getDimensions(clientX, clientY);\n\n    const styles: Partial<CSSStyleDeclaration> = {\n      position: 'absolute',\n      display: 'block',\n      pointerEvents: 'none',\n      transformOrigin: 'center',\n      transform: 'translate3d(0, 0, 0) scale(0)',\n      willChange: 'opacity, transform',\n      margin: '0 !important',\n      border: 'none !important',\n      width: `${radius}px`,\n      height: `${radius}px`,\n      borderRadius: '50%',\n      top: `${top}px`,\n      left: `${left}px`,\n      background: 'var(--color, hsl(var(--ig-gray-800)))',\n    };\n\n    Object.assign(element.style, styles);\n    this.renderRoot.appendChild(element);\n\n    element\n      .animate(rippleFrames, rippleAnimation)\n      .finished.then(() => element.remove());\n  };\n\n  private getDimensions(x: number, y: number) {\n    const rect = this.getBoundingClientRect();\n    const radius = Math.max(rect.width, rect.height);\n    const halfRadius = radius / 2;\n\n    return {\n      radius,\n      top: Math.round(y - rect.top - halfRadius),\n      left: Math.round(x - rect.left - halfRadius),\n    };\n  }\n\n  protected override render() {\n    return html``;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-ripple': IgcRippleComponent;\n  }\n}\n"]}