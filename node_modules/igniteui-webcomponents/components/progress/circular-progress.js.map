{"version":3,"file":"circular-progress.js","sourceRoot":"","sources":["../../../src/components/progress/circular-progress.ts"],"names":[],"mappings":";;;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAChC,OAAO,EAAE,qBAAqB,EAAE,MAAM,mBAAmB,CAAC;AAC1D,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAEvD,OAAO,EAAE,MAAM,EAAE,MAAM,oCAAoC,CAAC;AAC5D,OAAO,EAAE,iBAAiB,EAAE,MAAM,mCAAmC,CAAC;AACtE,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAC/D,OAAO,EAAE,wBAAwB,EAAE,MAAM,WAAW,CAAC;AACrD,OAAO,4BAA4B,MAAM,wBAAwB,CAAC;AAClE,OAAO,EAAE,MAAM,EAAE,MAAM,iDAAiD,CAAC;AACzE,OAAO,EAAE,MAAM,IAAI,MAAM,EAAE,MAAM,0DAA0D,CAAC;AAC5F,OAAO,EAAE,GAAG,EAAE,MAAM,6BAA6B,CAAC;AA0BnC,IAAM,4BAA4B,oCAAlC,MAAM,4BAA6B,SAAQ,wBAAwB;IAAnE;;QAcL,gBAAW,GAAG,qBAAqB,8BAA4B,CAAC,SAAS,EAAE,EAAE,CAAC;IAmDxF,CAAC;IA1DQ,MAAM,CAAC,QAAQ;QACpB,iBAAiB,CACf,8BAA4B,EAC5B,4BAA4B,CAC7B,CAAC;IACJ,CAAC;IAOS,SAAS;QACjB,MAAM,KAAK,GAAG,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;QACjE,MAAM,MAAM,GAAG;YACb,MAAM,EAAE,QAAQ,IAAI,CAAC,WAAW,GAAG;YACnC,cAAc,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE;YAClC,YAAY,EAAE,GAAG,IAAI,CAAC,iBAAiB,IAAI;SAC5C,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM;YAC9C,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CACzB,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,EAAE,CAC7B,GAAG,CAAA,gBAAgB,MAAM,eAAe,KAAK,iBAAiB,OAAO,IAAI,CAC5E;YACH,CAAC,CAAC,GAAG,CAAA;;;OAGJ,CAAC;QAEJ,OAAO,GAAG,CAAA;qBACO,WAAW,CAAC,KAAK,CAAC;sBACjB,QAAQ,CAAC,MAAM,CAAC;;;+BAGP,IAAI,CAAC,WAAW;YACnC,SAAS;;;KAGhB,CAAC;IACJ,CAAC;IAES,aAAa;QACrB,MAAM,KAAK,GAAG;YACZ,GAAG,EAAE,IAAI;YACT,aAAa,EAAE,IAAI,CAAC,aAAa;SAClC,CAAC;QAEF,OAAO,IAAI,CAAA;kBACG,WAAW,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,EAAE;;QAEhD,IAAI,CAAC,iBAAiB,EAAE;KAC3B,CAAC;IACJ,CAAC;IAEkB,MAAM;QACvB,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9B,CAAC;;AA/DsB,oCAAO,GAAG,uBAAuB,AAA1B,CAA2B;AAClC,mCAAM,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,AAAnB,CAAoB;AAEzB,sCAAS,GAAG,aAAa,EAAE,AAAlB,CAAmB;AAa5C;IADP,qBAAqB,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;wEACqB;AAjB9C,4BAA4B;IADhD,MAAM,CAAC,GAAG,CAAC;GACS,4BAA4B,CAiEhD;eAjEoB,4BAA4B","sourcesContent":["import { html, svg } from 'lit';\nimport { queryAssignedElements } from 'lit/decorators.js';\nimport { styleMap } from 'lit/directives/style-map.js';\n\nimport { themes } from '../../theming/theming-decorator.js';\nimport { registerComponent } from '../common/definitions/register.js';\nimport { createCounter, partNameMap } from '../common/util.js';\nimport { IgcProgressBaseComponent } from './base.js';\nimport IgcCircularGradientComponent from './circular-gradient.js';\nimport { styles } from './themes/circular/circular.progress.base.css.js';\nimport { styles as shared } from './themes/circular/shared/circular.progress.common.css.js';\nimport { all } from './themes/circular/themes.js';\n\n/**\n * A circular progress indicator used to express unspecified wait time or display\n * the length of a process.\n *\n * @element igc-circular-progress\n *\n * @slot - The text area container.\n * @slot gradient - Customize the progress bar in order to use a color gradient instead of a solid color. Accepts `igc-circular-gradient` elements.\n *\n * @csspart svg - The igc-circular-progress SVG element.\n * @csspart gradient_start - The igc-circular-progress linear-gradient start color.\n * @csspart gradient_end - The igc-circular-progress linear-gradient end color.\n * @csspart track - The igc-circular-progress ring track area.\n * @csspart fill - The igc-circular-progress indicator area.\n * @csspart label - The igc-circular-progress label.\n * @csspart value - The igc-circular-progress label value.\n * @csspart indeterminate - The igc-circular-progress indeterminate state.\n * @csspart primary - The igc-circular-progress primary state.\n * @csspart danger - The igc-circular-progress error state.\n * @csspart warning - The igc-circular-progress warning state.\n * @csspart info - The igc-circular-progress info state.\n * @csspart success - The igc-circular-progress success state.\n */\n@themes(all)\nexport default class IgcCircularProgressComponent extends IgcProgressBaseComponent {\n  public static readonly tagName = 'igc-circular-progress';\n  public static override styles = [styles, shared];\n\n  private static readonly increment = createCounter();\n\n  /* blazorSuppress */\n  public static register() {\n    registerComponent(\n      IgcCircularProgressComponent,\n      IgcCircularGradientComponent\n    );\n  }\n\n  private _gradientId = `circular-progress-${IgcCircularProgressComponent.increment()}`;\n\n  @queryAssignedElements({ slot: 'gradient' })\n  private _assignedGradients!: Array<IgcCircularGradientComponent>;\n\n  protected renderSvg() {\n    const parts = { indeterminate: this.indeterminate, track: true };\n    const styles = {\n      stroke: `url(#${this._gradientId})`,\n      '--percentage': `${this.progress}`,\n      '--duration': `${this.animationDuration}ms`,\n    };\n\n    const gradients = this._assignedGradients.length\n      ? this._assignedGradients.map(\n          ({ offset, color, opacity }) =>\n            svg`<stop offset=${offset} stop-color=${color} stop-opacity=${opacity}/>`\n        )\n      : svg`\n        <stop offset=\"0%\" part=\"gradient_start\" />\n        <stop offset=\"100%\" part=\"gradient_end\" />\n      `;\n\n    return svg`\n      <circle part=${partNameMap(parts)}/>\n      <circle style=${styleMap(styles)} part=\"fill\"/>\n\n      <defs>\n          <linearGradient id=${this._gradientId} gradientTransform=\"rotate(90)\">\n          ${gradients}\n          </linearGradient>\n      </defs>\n    `;\n  }\n\n  protected renderWrapper() {\n    const parts = {\n      svg: true,\n      indeterminate: this.indeterminate,\n    };\n\n    return html`\n      <svg part=${partNameMap(parts)}>${this.renderSvg()}</svg>\n      <slot name=\"gradient\"></slot>\n      ${this.renderDefaultSlot()}\n    `;\n  }\n\n  protected override render() {\n    return this.renderWrapper();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-circular-progress': IgcCircularProgressComponent;\n  }\n}\n"]}