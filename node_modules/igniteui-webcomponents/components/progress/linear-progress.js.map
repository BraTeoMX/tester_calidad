{"version":3,"file":"linear-progress.js","sourceRoot":"","sources":["../../../src/components/progress/linear-progress.ts"],"names":[],"mappings":";;;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAC3B,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAEvD,OAAO,EAAE,MAAM,EAAE,MAAM,oCAAoC,CAAC;AAC5D,OAAO,EAAE,iBAAiB,EAAE,MAAM,mCAAmC,CAAC;AACtE,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAE,wBAAwB,EAAE,MAAM,WAAW,CAAC;AACrD,OAAO,EAAE,MAAM,EAAE,MAAM,6CAA6C,CAAC;AACrE,OAAO,EAAE,MAAM,IAAI,MAAM,EAAE,MAAM,sDAAsD,CAAC;AACxF,OAAO,EAAE,GAAG,EAAE,MAAM,2BAA2B,CAAC;AAuBjC,IAAM,0BAA0B,kCAAhC,MAAM,0BAA2B,SAAQ,wBAAwB;IAAjE;;QAcN,YAAO,GAAG,KAAK,CAAC;QAOhB,eAAU,GAME,WAAW,CAAC;IA2BjC,CAAC;IAjDQ,MAAM,CAAC,QAAQ;QACpB,iBAAiB,CAAC,4BAA0B,CAAC,CAAC;IAChD,CAAC;IAsBkB,MAAM;QACvB,MAAM,KAAK,GAAG,WAAW,CAAC;YACxB,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,OAAO,EAAE,IAAI,CAAC,OAAO,KAAK,SAAS;YACnC,OAAO,EAAE,IAAI,CAAC,OAAO,KAAK,SAAS;YACnC,MAAM,EAAE,IAAI,CAAC,OAAO,KAAK,QAAQ;YACjC,OAAO,EAAE,IAAI,CAAC,OAAO,KAAK,SAAS;YACnC,IAAI,EAAE,IAAI,CAAC,OAAO,KAAK,MAAM;SAC9B,CAAC,CAAC;QAEH,MAAM,SAAS,GAAG;YAChB,KAAK,EAAE,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG;YAChC,YAAY,EAAE,GAAG,IAAI,CAAC,iBAAiB,IAAI;SAC5C,CAAC;QAEF,OAAO,IAAI,CAAA;;oBAEK,KAAK,UAAU,QAAQ,CAAC,SAAS,CAAC;qBACjC,KAAK;;QAElB,IAAI,CAAC,iBAAiB,EAAE;KAC3B,CAAC;IACJ,CAAC;;AApDsB,kCAAO,GAAG,qBAAqB,AAAxB,CAAyB;AAChC,iCAAM,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,AAAnB,CAAoB;AAY1C;IADN,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;2DACpB;AAOhB;IADN,QAAQ,CAAC,EAAE,SAAS,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;8DAOvB;AA3BZ,0BAA0B;IAD9C,MAAM,CAAC,GAAG,CAAC;GACS,0BAA0B,CAsD9C;eAtDoB,0BAA0B","sourcesContent":["import { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { styleMap } from 'lit/directives/style-map.js';\n\nimport { themes } from '../../theming/theming-decorator.js';\nimport { registerComponent } from '../common/definitions/register.js';\nimport { partNameMap } from '../common/util.js';\nimport { IgcProgressBaseComponent } from './base.js';\nimport { styles } from './themes/linear/linear.progress.base.css.js';\nimport { styles as shared } from './themes/linear/shared/linear.progress.common.css.js';\nimport { all } from './themes/linear/themes.js';\n\n/**\n * A linear progress indicator used to express unspecified wait time or display\n * the length of a process.\n *\n * @element igc-linear-progress\n *\n * @slot - The text area container.\n *\n * @csspart track - The igc-linear-progress track area.\n * @csspart fill - The igc-linear-progress indicator area.\n * @csspart striped - The igc-linear-progress striped indicator.\n * @csspart label - The igc-linear-progress label.\n * @csspart value - The igc-linear-progress label value.\n * @csspart indeterminate - The igc-linear-progress indeterminate state.\n * @csspart primary - The igc-linear-progress indicator primary state.\n * @csspart danger - The igc-linear-progress indicator error state.\n * @csspart warning - The igc-linear-progress indicator warning state.\n * @csspart info - The igc-linear-progress indicator info state.\n * @csspart success - The igc-linear-progress indicator success state.\n */\n@themes(all)\nexport default class IgcLinearProgressComponent extends IgcProgressBaseComponent {\n  public static readonly tagName = 'igc-linear-progress';\n  public static override styles = [styles, shared];\n\n  /* blazorSuppress */\n  public static register() {\n    registerComponent(IgcLinearProgressComponent);\n  }\n\n  /**\n   * Sets the striped look of the control.\n   * @attr\n   */\n  @property({ type: Boolean, reflect: true })\n  public striped = false;\n\n  /**\n   * The position for the default label of the control.\n   * @attr label-align\n   */\n  @property({ attribute: 'label-align', reflect: true })\n  public labelAlign:\n    | 'top-start'\n    | 'top'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom'\n    | 'bottom-end' = 'top-start';\n\n  protected override render() {\n    const parts = partNameMap({\n      fill: true,\n      striped: this.striped,\n      indeterminate: this.indeterminate,\n      primary: this.variant === 'primary',\n      success: this.variant === 'success',\n      danger: this.variant === 'danger',\n      warning: this.variant === 'warning',\n      info: this.variant === 'info',\n    });\n\n    const animation = {\n      width: `${this.progress * 100}%`,\n      '--duration': `${this.animationDuration}ms`,\n    };\n\n    return html`\n      <div part=\"track\">\n        <div part=${parts} style=${styleMap(animation)}></div>\n        <div part=\"${parts} secondary\"></div>\n      </div>\n      ${this.renderDefaultSlot()}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-linear-progress': IgcLinearProgressComponent;\n  }\n}\n"]}