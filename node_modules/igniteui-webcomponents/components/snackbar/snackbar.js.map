{"version":3,"file":"snackbar.js","sourceRoot":"","sources":["../../../src/components/snackbar/snackbar.ts"],"names":[],"mappings":";;;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,KAAK,CAAC;AACpC,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAY,SAAS,EAAE,GAAG,EAAE,MAAM,uBAAuB,CAAC;AAEjE,OAAO,EAAE,sBAAsB,EAAE,MAAM,4BAA4B,CAAC;AACpE,OAAO,EAAE,MAAM,EAAE,MAAM,oCAAoC,CAAC;AAC5D,OAAO,kBAAkB,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,iBAAiB,EAAE,MAAM,mCAAmC,CAAC;AACtE,OAAO,EAAE,yBAAyB,EAAE,MAAM,2BAA2B,CAAC;AAEtE,OAAO,EAAE,iBAAiB,EAAE,MAAM,mCAAmC,CAAC;AACtE,OAAO,EAAE,MAAM,IAAI,MAAM,EAAE,MAAM,wCAAwC,CAAC;AAC1E,OAAO,EAAE,MAAM,EAAE,MAAM,+BAA+B,CAAC;AACvD,OAAO,EAAE,GAAG,EAAE,MAAM,oBAAoB,CAAC;AAuB1B,IAAM,oBAAoB,4BAA1B,MAAM,oBAAqB,SAAQ,iBAAiB,CAGjE,yBAAyB,CAAC;IAHb;;QAYH,eAAU,GAAqB,SAAS,EAAE,CAAC;QAClC,qBAAgB,GAE/B,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IAkCpD,CAAC;IAzCQ,MAAM,CAAC,QAAQ;QACpB,iBAAiB,CAAC,sBAAoB,EAAE,kBAAkB,CAAC,CAAC;IAC9D,CAAC;IAcO,WAAW;QACjB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAC9B,CAAC;IAEkB,MAAM;QACvB,OAAO,IAAI,CAAA;aACF,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI;;;;;6DAKL,IAAI,CAAC,WAAW;YACjE,IAAI,CAAC,UAAU;YACf,CAAC,CAAC,IAAI,CAAA;;;;;mBAKC,IAAI,CAAC,UAAU;gBAClB;YACJ,CAAC,CAAC,OAAO;;;KAGhB,CAAC;IACJ,CAAC;;AA5CsB,4BAAO,GAAG,cAAc,AAAjB,CAAkB;AAClC,2BAAM,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,AAAnB,CAAoB;AAiBjC;IADN,QAAQ,CAAC,EAAE,SAAS,EAAE,aAAa,EAAE,CAAC;wDACZ;AAtBR,oBAAoB;IADxC,MAAM,CAAC,GAAG,CAAC;GACS,oBAAoB,CAiDxC;eAjDoB,oBAAoB","sourcesContent":["import { html, nothing } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { type Ref, createRef, ref } from 'lit/directives/ref.js';\n\nimport { addAnimationController } from '../../animations/player.js';\nimport { themes } from '../../theming/theming-decorator.js';\nimport IgcButtonComponent from '../button/button.js';\nimport { registerComponent } from '../common/definitions/register.js';\nimport { IgcBaseAlertLikeComponent } from '../common/mixins/alert.js';\nimport type { AbstractConstructor } from '../common/mixins/constructor.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { styles as shared } from './themes/shared/snackbar.common.css.js';\nimport { styles } from './themes/snackbar.base.css.js';\nimport { all } from './themes/themes.js';\n\nexport interface IgcSnackbarEventMap {\n  igcAction: CustomEvent<void>;\n}\n\n/**\n * A snackbar component is used to provide feedback about an operation\n * by showing a brief message at the bottom of the screen.\n *\n * @element igc-snackbar\n *\n * @slot - Default slot to render the snackbar content.\n * @slot action - Renders the action part of the snackbar. Usually an interactive element (button)\n *\n * @fires igcAction - Emitted when the snackbar action button is clicked.\n *\n * @csspart base - The base wrapper of the snackbar component.\n * @csspart message - The snackbar message.\n * @csspart action - The default snackbar action button.\n * @csspart action-container - The area holding the actions.\n */\n@themes(all)\nexport default class IgcSnackbarComponent extends EventEmitterMixin<\n  IgcSnackbarEventMap,\n  AbstractConstructor<IgcBaseAlertLikeComponent>\n>(IgcBaseAlertLikeComponent) {\n  public static readonly tagName = 'igc-snackbar';\n  public static styles = [styles, shared];\n\n  /* blazorSuppress */\n  public static register() {\n    registerComponent(IgcSnackbarComponent, IgcButtonComponent);\n  }\n\n  protected contentRef: Ref<HTMLElement> = createRef();\n  protected override _animationPlayer: ReturnType<\n    typeof addAnimationController\n  > = addAnimationController(this, this.contentRef);\n\n  /**\n   * The snackbar action button.\n   * @attr action-text\n   */\n  @property({ attribute: 'action-text' })\n  public actionText!: string;\n\n  private handleClick() {\n    this.emitEvent('igcAction');\n  }\n\n  protected override render() {\n    return html`\n      <div ${ref(this.contentRef)} part=\"base\" .inert=${!this.open}>\n        <span part=\"message\">\n          <slot></slot>\n        </span>\n\n        <slot name=\"action\" part=\"action-container\" @click=${this.handleClick}>\n          ${this.actionText\n            ? html`<igc-button\n                type=\"button\"\n                part=\"action\"\n                variant=\"flat\"\n                size=\"small\"\n                >${this.actionText}</igc-button\n              >`\n            : nothing}\n        </slot>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-snackbar': IgcSnackbarComponent;\n  }\n}\n"]}