{"version":3,"file":"form-associated.js","sourceRoot":"","sources":["../../../../src/components/common/mixins/form-associated.ts"],"names":[],"mappings":"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","sourcesContent":["import type { LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\n\nimport type { Validator } from '../validators.js';\nimport type { Constructor } from './constructor.js';\n\nexport declare class FormAssociatedElementInterface {\n  public static readonly formAssociated: boolean;\n\n  private __internals: ElementInternals;\n  protected validators: Validator[];\n  protected _disabled: boolean;\n  protected _invalid: boolean;\n  protected _dirty: boolean;\n\n  /**\n   * The default value of the control at \"creation\" time.\n   *\n   * @remarks\n   * This is set by default on `connectedCallback` through the `setDefaultValue` call.\n   * It expects the component to have either a `checked` or a `value` property and binds it to the initial value of the\n   * respective property.\n   *\n   * In use-cases where additional customization is required, make sure to override the `setDefaultValue` method.\n   */\n  protected _defaultValue: unknown;\n\n  /**\n   * Applies the {@link FormAssociatedElementInterface.invalid | `invalid`} attribute on the control and the associated styles\n   * if the element has completed the first update cycle or it has been interacted with by the user.\n   *\n   * Usually, it should be called after {@link FormAssociatedElementInterface.updateValidity | `updateValidity()`}\n   */\n  protected setInvalidState(): void;\n\n  /**\n   * Executes the component validators and updates the internal validity state.\n   */\n  protected updateValidity(message?: string): void;\n\n  /**\n   * Saves the initial value/checked state of the control.\n   *\n   * Called on connectedCallback.\n   */\n  protected setDefaultValue(): void;\n\n  /**\n   * Called when the parent form is reset.\n   *\n   * Restores the initially bound value/checked state of the control.\n   */\n  protected restoreDefaultValue(): void;\n\n  protected setFormValue(\n    value: string | File | FormData | null,\n    state?: string | File | FormData | null | undefined\n  ): void;\n  protected setValidity(\n    flags?: ValidityStateFlags | undefined,\n    message?: string | undefined,\n    anchor?: HTMLElement | undefined\n  ): void;\n\n  protected formResetCallback(): void;\n  protected formDisabledCallback(state: boolean): void;\n  protected formStateRestoreCallback(\n    state: string | FormData | File,\n    mode: 'autocomplete' | 'restore'\n  ): void;\n\n  /**\n   * The disabled state of the component\n   * @attr [disabled=false]\n   */\n  public disabled: boolean;\n\n  /**\n   * Control the validity of the control.\n   * @attr\n   */\n  public invalid: boolean;\n\n  /**\n   * The name attribute of the control.\n   * @attr\n   */\n  public name: string;\n\n  /** Returns the HTMLFormElement associated with this element. */\n  public get form(): HTMLFormElement | null;\n\n  /**\n   * Returns a ValidityState object which represents the different validity states\n   * the element can be in, with respect to constraint validation.\n   */\n  public get validity(): ValidityState;\n\n  /** A string containing the validation message of this element. */\n  public get validationMessage(): string;\n\n  /**\n   * A boolean value which returns true if the element is a submittable element\n   * that is a candidate for constraint validation.\n   */\n  public get willValidate(): boolean;\n\n  /** Checks for validity of the control and emits the invalid event if it invalid. */\n  public checkValidity(): boolean;\n\n  /** Checks for validity of the control and shows the browser message if it invalid. */\n  public reportValidity(): boolean;\n\n  /**\n   * Sets a custom validation message for the control.\n   * As long as `message` is not empty, the control is considered invalid.\n   */\n  public setCustomValidity(message: string): void;\n}\n\n/**\n * Turns the passed class element into a Form Associated Custom Element.\n */\nexport function FormAssociatedMixin<T extends Constructor<LitElement>>(\n  superClass: T\n) {\n  class FormAssociatedElement extends superClass {\n    public static readonly formAssociated = true;\n\n    private __internals: ElementInternals;\n    protected validators: Validator[] = [];\n    protected _disabled = false;\n    protected _invalid = false;\n    protected _dirty = false;\n\n    /**\n     * The default value of the control at \"creation\" time.\n     *\n     * @remarks\n     * This is set by default on `connectedCallback` through the `setDefaultValue` call.\n     * It expects the component to have either a `checked` or a `value` property and binds it to the initial value of the\n     * respective property.\n     *\n     * In use-cases where additional customization is required, make sure to override the `setDefaultValue` method.\n     */\n    protected _defaultValue: unknown;\n\n    /**\n     * The name attribute of the control.\n     * @attr\n     */\n    @property({ reflect: true })\n    public name!: string;\n\n    /** Returns the HTMLFormElement associated with this element. */\n    public get form(): HTMLFormElement | null {\n      return this.__internals.form;\n    }\n\n    /**\n     * Returns a ValidityState object which represents the different validity states\n     * the element can be in, with respect to constraint validation.\n     */\n    public get validity(): ValidityState {\n      return this.__internals.validity;\n    }\n\n    /** A string containing the validation message of this element. */\n    public get validationMessage(): string {\n      return this.__internals.validationMessage;\n    }\n\n    /**\n     * A boolean value which returns true if the element is a submittable element\n     * that is a candidate for constraint validation.\n     */\n    public get willValidate(): boolean {\n      return this.__internals.willValidate;\n    }\n\n    /**\n     * The disabled state of the component\n     *\n     * @attr\n     * @default false\n     */\n    @property({ type: Boolean, reflect: true })\n    public set disabled(value: boolean) {\n      this._disabled = value;\n      this.toggleAttribute('disabled', Boolean(this._disabled));\n    }\n\n    public get disabled(): boolean {\n      return this._disabled;\n    }\n\n    /**\n     * Control the validity of the control.\n     *\n     * @attr\n     * @default false\n     */\n    @property({ type: Boolean, reflect: true })\n    public set invalid(value: boolean) {\n      this._invalid = value;\n      this.toggleAttribute('invalid', Boolean(this._invalid));\n    }\n\n    public get invalid(): boolean {\n      return this._invalid;\n    }\n\n    constructor(...args: any[]) {\n      super(args);\n      this.__internals = this.attachInternals();\n      this.addEventListener('invalid', this.handleInvalid);\n    }\n\n    public override connectedCallback(): void {\n      super.connectedCallback();\n      this._dirty = false;\n      this.setDefaultValue();\n    }\n\n    /**\n     * Saves the initial value/checked state of the control.\n     *\n     * Called on connectedCallback.\n     */\n    protected setDefaultValue() {\n      if ('checked' in this) {\n        this._defaultValue = this.checked;\n      } else if ('value' in this) {\n        this._defaultValue = this.value;\n      }\n    }\n\n    /**\n     * Called when the parent form is reset.\n     *\n     * Restores the initially bound value/checked state of the control.\n     */\n    protected restoreDefaultValue() {\n      if ('checked' in this) {\n        this.checked = this._defaultValue;\n      } else if ('value' in this) {\n        this.value = this._defaultValue;\n      }\n    }\n\n    protected handleInvalid = (event: Event) => {\n      event.preventDefault();\n      this.invalid = true;\n    };\n\n    protected setFormValue(\n      value: string | File | FormData | null,\n      state?: string | File | FormData | null | undefined\n    ) {\n      this.__internals.setFormValue(value, state || value);\n    }\n\n    protected setValidity(\n      flags?: ValidityStateFlags | undefined,\n      message?: string | undefined,\n      anchor?: HTMLElement | undefined\n    ) {\n      this.__internals.setValidity(flags, message, anchor);\n    }\n\n    protected formResetCallback() {\n      this.restoreDefaultValue();\n      this._dirty = false;\n\n      // Apply any changes happening during form reset synchronously\n      this.performUpdate();\n\n      this.invalid = false;\n    }\n\n    protected formDisabledCallback(state: boolean) {\n      this._disabled = state;\n      this.requestUpdate();\n    }\n\n    /**\n     * Executes the component validators and updates the internal validity state.\n     */\n    protected updateValidity(message?: string) {\n      const validity: ValidityStateFlags = {};\n      let validationMessage = '';\n\n      for (const validator of this.validators) {\n        const isValid = validator.isValid(this);\n\n        validity[validator.key] = !isValid;\n\n        if (!isValid) {\n          validationMessage =\n            typeof validator.message === 'function'\n              ? validator.message(this)\n              : validator.message;\n        }\n      }\n\n      if (message) {\n        validity.customError = true;\n        validationMessage = message;\n      }\n\n      this.__internals.setValidity(validity, validationMessage);\n    }\n\n    /**\n     * Applies the {@link FormAssociatedElementInterface.invalid | `invalid`} attribute on the control and the associated styles\n     * if the element has completed the first update cycle or it has been interacted with by the user.\n     *\n     * Usually, it should be called after {@link FormAssociatedElementInterface.updateValidity | `updateValidity()`}\n     */\n    protected setInvalidState() {\n      if (this.hasUpdated || this._dirty) {\n        this.invalid = !this.checkValidity();\n      }\n    }\n\n    /** Checks for validity of the control and shows the browser message if it invalid. */\n    public reportValidity() {\n      return this.__internals.reportValidity();\n    }\n\n    /** Checks for validity of the control and emits the invalid event if it invalid. */\n    public checkValidity() {\n      return this.__internals.checkValidity();\n    }\n\n    /**\n     * Sets a custom validation message for the control.\n     * As long as `message` is not empty, the control is considered invalid.\n     */\n    public setCustomValidity(message: string) {\n      this.updateValidity(message);\n      this.invalid = !this.checkValidity();\n    }\n  }\n\n  return FormAssociatedElement as unknown as Constructor<FormAssociatedElementInterface> &\n    T;\n}\n"]}