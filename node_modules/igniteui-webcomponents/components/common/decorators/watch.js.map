{"version":3,"file":"watch.js","sourceRoot":"","sources":["../../../../src/components/common/decorators/watch.ts"],"names":[],"mappings":"AAkBA,MAAM,UAAU,KAAK,CAAC,QAAgB,EAAE,OAAsB;IAC5D,OAAO,CAAC,iBAAsB,EAAE,IAAY,EAAO,EAAE;QACnD,MAAM,EAAE,UAAU,EAAE,GAAG,iBAAiB,CAAC;QAEzC,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAChC,EAAE,oBAAoB,EAAE,KAAK,EAAE,EAC/B,OAAO,CACQ,CAAC;QAElB,iBAAiB,CAAC,UAAU,GAAG,UAAU,YAA8B;YACrE,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;YAEpC,IAAI,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;gBAC/B,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAC5C,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAEhC,IAAI,QAAQ,KAAK,QAAQ,EAAE,CAAC;oBAC1B,IAAI,CAAC,YAAY,EAAE,oBAAoB,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;wBAC3D,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;oBAC5C,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC","sourcesContent":["// @watch decorator\n//\n// Runs when an observed property changes, e.g. @property or @state, but before the component updates.\n//\n// To wait for an update to complete after a change occurs, use `await this.updateComplete` in the handler. To start\n// watching after the initial update/render, use `{ waitUntilFirstUpdate: true }` or `this.hasUpdated` in the handler.\n//\n// Usage:\n//\n//  @watch('propName')\n//  handlePropChange(oldValue, newValue) {\n//    ...\n//  }\n//\ninterface WatchOptions {\n  waitUntilFirstUpdate?: boolean;\n}\n\nexport function watch(propName: string, options?: WatchOptions) {\n  return (protoOrDescriptor: any, name: string): any => {\n    const { willUpdate } = protoOrDescriptor;\n\n    const watchOptions = Object.assign(\n      { waitUntilFirstUpdate: false },\n      options\n    ) as WatchOptions;\n\n    protoOrDescriptor.willUpdate = function (changedProps: Map<string, any>) {\n      willUpdate.call(this, changedProps);\n\n      if (changedProps.has(propName)) {\n        const oldValue = changedProps.get(propName);\n        const newValue = this[propName];\n\n        if (oldValue !== newValue) {\n          if (!watchOptions?.waitUntilFirstUpdate || this.hasUpdated) {\n            this[name].call(this, oldValue, newValue);\n          }\n        }\n      }\n    };\n  };\n}\n"]}