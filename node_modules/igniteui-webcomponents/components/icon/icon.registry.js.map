{"version":3,"file":"icon.registry.js","sourceRoot":"","sources":["../../../src/components/icon/icon.registry.ts"],"names":[],"mappings":"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","sourcesContent":["import { internalIcons } from './internal-icons-lib.js';\n\nexport type IconCollection = { [name: string]: ParsedIcon };\n\ntype IconCallback = (name: string, collection: string) => void;\n\ninterface ParsedIcon {\n  svg: string;\n  title?: string;\n}\n\nexport class IconsRegistry {\n  private _parser: DOMParser;\n\n  private collections = new Map<string, IconCollection>();\n  private listeners = new Set<IconCallback>();\n\n  constructor() {\n    this._parser = new DOMParser();\n    this.collections.set('internal', internalIcons);\n  }\n\n  public subscribe(callback: IconCallback) {\n    this.listeners.add(callback);\n  }\n\n  public unsubscribe(callback: IconCallback) {\n    this.listeners.delete(callback);\n  }\n\n  private parseSVG(svgString: string): ParsedIcon {\n    const parsed = this._parser.parseFromString(svgString, 'image/svg+xml');\n    const svg = parsed.querySelector('svg');\n\n    if (parsed.querySelector('parsererror') || !svg) {\n      throw new Error('SVG element not found or malformed SVG string.');\n    }\n\n    svg.setAttribute('fit', '');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n\n    return {\n      svg: svg.outerHTML,\n      title: svg.querySelector('title')?.textContent ?? '',\n    };\n  }\n\n  public register(name: string, iconText: string, collection = 'default') {\n    const namespace = this.getOrCreateCollection(collection);\n    namespace[name] = this.parseSVG(iconText);\n\n    for (const listener of this.listeners) {\n      listener(name, collection);\n    }\n  }\n\n  public get(name: string, collection = 'default') {\n    return this.collections.has(collection)\n      ? this.collections.get(collection)![name]\n      : undefined;\n  }\n\n  private getOrCreateCollection(name: string) {\n    if (!this.collections.has(name)) {\n      this.collections.set(name, {});\n    }\n\n    return this.collections.get(name) as IconCollection;\n  }\n}\n\nconst registry = Symbol.for('igc.icons-registry.instance');\n\ntype IgcIconRegistry = typeof globalThis & {\n  [registry]?: IconsRegistry;\n};\n\nexport function getIconRegistry() {\n  const _global = globalThis as IgcIconRegistry;\n  if (!_global[registry]) {\n    _global[registry] = new IconsRegistry();\n  }\n  return _global[registry];\n}\n\nexport async function registerIcon(\n  name: string,\n  url: string,\n  collection = 'default'\n) {\n  const response = await fetch(url);\n\n  if (response.ok) {\n    const value = await response.text();\n    getIconRegistry().register(name, value, collection);\n  } else {\n    throw new Error(`Icon request failed. Status: ${response.status}.`);\n  }\n}\n\nexport function registerIconFromText(\n  name: string,\n  iconText: string,\n  collection = 'default'\n) {\n  getIconRegistry().register(name, iconText, collection);\n}\n"]}