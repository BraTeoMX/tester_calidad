import { internalIcons } from './internal-icons-lib.js';
export class IconsRegistry {
    constructor() {
        this.collections = new Map();
        this.listeners = new Set();
        this._parser = new DOMParser();
        this.collections.set('internal', internalIcons);
    }
    subscribe(callback) {
        this.listeners.add(callback);
    }
    unsubscribe(callback) {
        this.listeners.delete(callback);
    }
    parseSVG(svgString) {
        const parsed = this._parser.parseFromString(svgString, 'image/svg+xml');
        const svg = parsed.querySelector('svg');
        if (parsed.querySelector('parsererror') || !svg) {
            throw new Error('SVG element not found or malformed SVG string.');
        }
        svg.setAttribute('fit', '');
        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
        return {
            svg: svg.outerHTML,
            title: svg.querySelector('title')?.textContent ?? '',
        };
    }
    register(name, iconText, collection = 'default') {
        const namespace = this.getOrCreateCollection(collection);
        namespace[name] = this.parseSVG(iconText);
        for (const listener of this.listeners) {
            listener(name, collection);
        }
    }
    get(name, collection = 'default') {
        return this.collections.has(collection)
            ? this.collections.get(collection)[name]
            : undefined;
    }
    getOrCreateCollection(name) {
        if (!this.collections.has(name)) {
            this.collections.set(name, {});
        }
        return this.collections.get(name);
    }
}
const registry = Symbol.for('igc.icons-registry.instance');
export function getIconRegistry() {
    const _global = globalThis;
    if (!_global[registry]) {
        _global[registry] = new IconsRegistry();
    }
    return _global[registry];
}
export async function registerIcon(name, url, collection = 'default') {
    const response = await fetch(url);
    if (response.ok) {
        const value = await response.text();
        getIconRegistry().register(name, value, collection);
    }
    else {
        throw new Error(`Icon request failed. Status: ${response.status}.`);
    }
}
export function registerIconFromText(name, iconText, collection = 'default') {
    getIconRegistry().register(name, iconText, collection);
}
//# sourceMappingURL=icon.registry.js.map