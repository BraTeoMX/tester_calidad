{"version":3,"file":"tree.selection.js","sourceRoot":"","sources":["../../../src/components/tree/tree.selection.ts"],"names":[],"mappings":"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","sourcesContent":["import type IgcTreeItemComponent from './tree-item.js';\nimport type { IgcSelectionEventArgs } from './tree.common.js';\nimport type IgcTreeComponent from './tree.js';\n\n/* blazorSuppress */\nexport class IgcTreeSelectionService {\n  private tree!: IgcTreeComponent;\n  private itemSelection: Set<IgcTreeItemComponent> =\n    new Set<IgcTreeItemComponent>();\n  private indeterminateItems: Set<IgcTreeItemComponent> =\n    new Set<IgcTreeItemComponent>();\n  private itemsToBeSelected!: Set<IgcTreeItemComponent>;\n  private itemsToBeIndeterminate!: Set<IgcTreeItemComponent>;\n\n  constructor(tree: IgcTreeComponent) {\n    this.tree = tree;\n  }\n\n  /** Select range from last selected item to the current specified item. */\n  public selectMultipleItems(item: IgcTreeItemComponent): void {\n    if (!this.itemSelection.size) {\n      this.selectItem(item);\n      return;\n    }\n    const lastSelectedItemIndex = this.tree.items.indexOf(\n      this.getSelectedItems()[this.itemSelection.size - 1]\n    );\n    const currentItemIndex = this.tree.items.indexOf(item);\n    const items = this.tree.items.slice(\n      Math.min(currentItemIndex, lastSelectedItemIndex),\n      Math.max(currentItemIndex, lastSelectedItemIndex) + 1\n    );\n\n    const added = items.filter(\n      (_item: IgcTreeItemComponent) => !this.isItemSelected(_item)\n    );\n    const newSelection = this.getSelectedItems().concat(added);\n    this.emitItemSelectionEvent(newSelection, added, []);\n  }\n\n  /** Select the specified item and emit event. */\n  public selectItem(item: IgcTreeItemComponent): void {\n    if (this.tree.selection === 'none') {\n      return;\n    }\n    this.emitItemSelectionEvent([...this.getSelectedItems(), item], [item], []);\n  }\n\n  /** Deselect the specified item and emit event. */\n  public deselectItem(item: IgcTreeItemComponent): void {\n    const newSelection = this.getSelectedItems().filter(\n      (_item: IgcTreeItemComponent) => _item !== item\n    );\n    this.emitItemSelectionEvent(newSelection, [], [item]);\n  }\n\n  /** Clears item selection */\n  public clearItemsSelection(): void {\n    const oldSelection = this.getSelectedItems();\n    const oldIndeterminate = this.getIndeterminateItems();\n    this.itemSelection.clear();\n    this.indeterminateItems.clear();\n    oldSelection.forEach((i: IgcTreeItemComponent) => {\n      i.selected = false;\n    });\n    oldIndeterminate.forEach((i: IgcTreeItemComponent) => {\n      i.indeterminate = false;\n    });\n  }\n\n  public isItemSelected(item: IgcTreeItemComponent): boolean {\n    return this.itemSelection.has(item);\n  }\n\n  public isItemIndeterminate(item: IgcTreeItemComponent): boolean {\n    return this.indeterminateItems.has(item);\n  }\n\n  /** Called on item`s disconnectedCallback */\n  public ensureStateOnItemDelete(item: IgcTreeItemComponent): void {\n    // Don't update the internal state of the deleted items because when moving they should keep it\n    // However update the state of their parents\n    this.deselectItemsWithNoEvent(\n      [item, ...item.getChildren({ flatten: true })],\n      true\n    );\n  }\n\n  /** Retrigger the selection state of the item. */\n  public retriggerItemState(item: IgcTreeItemComponent): void {\n    if (item.selected) {\n      this.itemSelection.delete(item);\n      this.selectItemsWithNoEvent([item]);\n    } else {\n      this.itemSelection.add(item);\n      this.deselectItemsWithNoEvent([item]);\n    }\n  }\n\n  private emitItemSelectionEvent(\n    newSelection: IgcTreeItemComponent[],\n    added: IgcTreeItemComponent[],\n    removed: IgcTreeItemComponent[]\n  ): void {\n    const currSelection = this.getSelectedItems();\n    if (this.areEqualCollections(currSelection, newSelection)) {\n      return;\n    }\n\n    if (this.tree.selection === 'cascade') {\n      this.emitCascadeItemSelectionEvent(currSelection, added, removed);\n      return;\n    }\n\n    const args: IgcSelectionEventArgs = {\n      detail: {\n        newSelection,\n      },\n      cancelable: true,\n    };\n\n    const allowed = this.tree.emitEvent('igcSelection', args);\n    if (!allowed) {\n      return;\n    }\n\n    // if newSelection is overwritten do not proceed (Blazor)\n    if (this.areEqualCollections(newSelection, args.detail.newSelection)) {\n      this.itemSelection = new Set(newSelection);\n      this.updateItemsState(currSelection);\n    }\n  }\n\n  /** Select specified items. No event is emitted. */\n  public selectItemsWithNoEvent(items: IgcTreeItemComponent[]): void {\n    const oldSelection = this.getSelectedItems();\n\n    if (this.tree && this.tree.selection === 'cascade') {\n      this.cascadeSelectItemsWithNoEvent(items, oldSelection);\n      return;\n    }\n\n    items.forEach((item: IgcTreeItemComponent) => this.itemSelection.add(item));\n\n    this.updateItemsState(oldSelection);\n  }\n\n  /** Deselect specified items. No event is emitted. */\n  public deselectItemsWithNoEvent(\n    items?: IgcTreeItemComponent[],\n    onDelete = false\n  ): void {\n    if (this.tree && this.tree.selection === 'cascade') {\n      this.cascadeDeselectItemsWithNoEvent(items, onDelete);\n      return;\n    }\n    const itemSet = new Set(items);\n    const oldSelection = onDelete\n      ? this.getSelectedItems().filter(\n          (i: IgcTreeItemComponent) => !itemSet!.has(i)\n        )\n      : this.getSelectedItems();\n\n    if (!items) {\n      this.itemSelection.clear();\n    } else {\n      items.forEach((item: IgcTreeItemComponent) =>\n        this.itemSelection.delete(item)\n      );\n    }\n\n    this.updateItemsState(oldSelection);\n  }\n\n  private emitCascadeItemSelectionEvent(\n    currSelection: IgcTreeItemComponent[],\n    added: IgcTreeItemComponent[],\n    removed: IgcTreeItemComponent[]\n  ): void {\n    const oldIndeterminate = this.getIndeterminateItems();\n\n    this.calculateItemsNewSelectionState(currSelection, added, removed);\n\n    const args: IgcSelectionEventArgs = {\n      detail: {\n        newSelection: Array.from(this.itemsToBeSelected),\n      },\n      cancelable: true,\n    };\n\n    const allowed = this.tree.emitEvent('igcSelection', args);\n\n    if (!allowed) {\n      return;\n    }\n\n    // if newSelection is overwritten do not proceed (Blazor)\n    if (\n      this.areEqualCollections(\n        Array.from(this.itemsToBeSelected),\n        args.detail.newSelection\n      )\n    ) {\n      this.itemSelection = new Set<IgcTreeItemComponent>(\n        this.itemsToBeSelected\n      );\n      this.indeterminateItems = new Set(this.itemsToBeIndeterminate);\n      this.updateItemsState(currSelection, oldIndeterminate);\n    }\n  }\n\n  private cascadeSelectItemsWithNoEvent(\n    items: IgcTreeItemComponent[],\n    oldSelection: IgcTreeItemComponent[]\n  ): void {\n    const oldIndeterminate = this.getIndeterminateItems();\n\n    const newSelection = [...oldSelection, ...items];\n\n    // retrieve only the rows without their parents/children which has to be added to the selection\n    const newSelectionSet = new Set(newSelection);\n    const removed = oldSelection!.filter((x) => !newSelectionSet.has(x));\n    const added = newSelection!.filter((x) => !this.itemSelection.has(x));\n\n    this.calculateItemsNewSelectionState(oldSelection, added, removed);\n\n    this.itemSelection = new Set(this.itemsToBeSelected);\n    this.indeterminateItems = new Set(this.itemsToBeIndeterminate);\n\n    this.updateItemsState(oldSelection, oldIndeterminate);\n  }\n\n  private cascadeDeselectItemsWithNoEvent(\n    items?: IgcTreeItemComponent[],\n    onDelete = false\n  ): void {\n    const itemSet = new Set(items);\n    const oldSelection = onDelete\n      ? this.getSelectedItems().filter(\n          (i: IgcTreeItemComponent) => !itemSet!.has(i)\n        )\n      : this.getSelectedItems();\n    const oldIndeterminate = onDelete\n      ? this.getIndeterminateItems().filter(\n          (i: IgcTreeItemComponent) => !itemSet!.has(i)\n        )\n      : this.getIndeterminateItems();\n\n    if (!items) {\n      this.itemSelection.clear();\n      this.indeterminateItems.clear();\n    } else {\n      this.calculateItemsNewSelectionState(oldSelection, [], items);\n\n      this.itemSelection = new Set<IgcTreeItemComponent>(\n        this.itemsToBeSelected\n      );\n      this.indeterminateItems = new Set<IgcTreeItemComponent>(\n        this.itemsToBeIndeterminate\n      );\n    }\n\n    this.updateItemsState(oldSelection, oldIndeterminate);\n  }\n\n  // OK (disabled children?)\n  /**\n   * populates the itemsToBeSelected and itemsToBeIndeterminate sets\n   * with the items which will be eventually in selected/indeterminate state\n   */\n  private calculateItemsNewSelectionState(\n    oldSelection: IgcTreeItemComponent[],\n    added: IgcTreeItemComponent[],\n    removed: IgcTreeItemComponent[]\n  ): void {\n    this.itemsToBeSelected = new Set<IgcTreeItemComponent>(oldSelection);\n    this.itemsToBeIndeterminate = new Set<IgcTreeItemComponent>(\n      this.getIndeterminateItems()\n    );\n\n    this.cascadeSelectionState(removed, false);\n    this.cascadeSelectionState(added, true);\n  }\n\n  // OK (disabled children?)\n  /** Ensures proper selection state for all predescessors and descendants during a selection event */\n  private cascadeSelectionState(\n    items: IgcTreeItemComponent[] | undefined,\n    selected: boolean\n  ): void {\n    if (!items || items.length === 0) {\n      return;\n    }\n\n    const parents = new Set<IgcTreeItemComponent>();\n    items.forEach((item: IgcTreeItemComponent) => {\n      // select/deselect items passed by event/api\n      this.selectDeselectItem(item, selected);\n\n      // select/deselect all of their children\n      const itemAndAllChildren = item.getChildren({ flatten: true }) || [];\n      itemAndAllChildren.forEach((i: IgcTreeItemComponent) => {\n        this.selectDeselectItem(i, selected);\n      });\n\n      // add their direct parent to the set\n      if (item?.parent) {\n        parents.add(item.parent);\n      }\n    });\n\n    // handle direct parents from the set\n    for (const parent of parents) {\n      this.handleParentSelectionState(parent);\n    }\n  }\n\n  // OK (disabled children?)\n  /**\n   * recursively handle the selection state of the direct and indirect parents\n   */\n  private handleParentSelectionState(item: IgcTreeItemComponent): void {\n    if (!item) {\n      return;\n    }\n    this.handleItemSelectionState(item);\n    if (item.parent) {\n      this.handleParentSelectionState(item.parent);\n    }\n  }\n\n  // OK (disabled children?)\n  /**\n   * Handle the selection state of a given item based the selection states of its direct children\n   */\n  private handleItemSelectionState(item: IgcTreeItemComponent): void {\n    const itemsArray = item?.getChildren() ? item.getChildren() : [];\n    if (itemsArray.length) {\n      if (\n        itemsArray.every((i: IgcTreeItemComponent) =>\n          this.itemsToBeSelected.has(i)\n        )\n      ) {\n        this.selectDeselectItem(item, true);\n      } else if (\n        itemsArray.some(\n          (i: IgcTreeItemComponent) =>\n            this.itemsToBeSelected.has(i) || this.itemsToBeIndeterminate.has(i)\n        )\n      ) {\n        this.selectDeselectItem(item, false, true);\n      } else {\n        this.selectDeselectItem(item, false);\n      }\n    } else if (this.isItemSelected(item)) {\n      // if the children of the item has been deleted and the item was selected do not change its state\n      this.selectDeselectItem(item, true);\n    } else {\n      this.selectDeselectItem(item, false);\n    }\n  }\n\n  /** Emits the `selectedChange` event for each item affected by the selection */\n  private updateItemsState(\n    oldSelection: IgcTreeItemComponent[],\n    oldIndeterminate: IgcTreeItemComponent[] = []\n  ): void {\n    const selected = new Set<IgcTreeItemComponent>(oldSelection);\n    const indeterminated = new Set<IgcTreeItemComponent>(oldIndeterminate);\n\n    this.getSelectedItems().forEach((i: IgcTreeItemComponent) => {\n      if (!selected.has(i)) {\n        i.selected = true;\n      }\n    });\n\n    oldSelection.forEach((i: IgcTreeItemComponent) => {\n      if (!this.itemSelection.has(i)) {\n        i.selected = false;\n      }\n    });\n\n    if (this.tree.selection === 'cascade') {\n      this.indeterminateItems.forEach((i: IgcTreeItemComponent) => {\n        if (!indeterminated.has(i)) {\n          i.indeterminate = true;\n        }\n      });\n\n      oldIndeterminate.forEach((i: IgcTreeItemComponent) => {\n        if (!this.indeterminateItems.has(i)) {\n          i.indeterminate = false;\n        }\n      });\n    }\n  }\n\n  /** Returns array of the selected items. */\n  private getSelectedItems(): IgcTreeItemComponent[] {\n    return this.itemSelection.size ? Array.from(this.itemSelection) : [];\n  }\n\n  /** Returns array of the items in indeterminate state. */\n  private getIndeterminateItems(): IgcTreeItemComponent[] {\n    return this.indeterminateItems.size\n      ? Array.from(this.indeterminateItems)\n      : [];\n  }\n\n  private areEqualCollections(\n    first: IgcTreeItemComponent[],\n    second: IgcTreeItemComponent[]\n  ): boolean {\n    return (\n      first.length === second.length &&\n      new Set(first.concat(second)).size === first.length\n    );\n  }\n\n  private selectDeselectItem(\n    item: IgcTreeItemComponent,\n    select: boolean,\n    indeterminate = false\n  ): void {\n    if (indeterminate) {\n      this.itemsToBeIndeterminate.add(item);\n      this.itemsToBeSelected.delete(item);\n      return;\n    }\n\n    if (select) {\n      this.itemsToBeSelected.add(item);\n      this.itemsToBeIndeterminate.delete(item);\n    } else {\n      this.itemsToBeSelected.delete(item);\n      this.itemsToBeIndeterminate.delete(item);\n    }\n  }\n}\n"]}