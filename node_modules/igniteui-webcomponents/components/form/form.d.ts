import { LitElement } from 'lit';
import type { Constructor } from '../common/mixins/constructor.js';
export interface IgcFormEventMap {
    igcSubmit: CustomEvent<FormData>;
    igcReset: CustomEvent;
}
declare const IgcFormComponent_base: Constructor<import("../common/mixins/event-emitter.js").EventEmitterInterface<IgcFormEventMap>> & Constructor<LitElement>;
/**
 * The form is a component used to collect user input from
 * interactive controls.
 *
 * @element igc-form
 *
 * @slot - Default slot for the form.
 *
 * @fires igcSubmit - Emitted when the form is submitted.
 * @fires igcReset - Emitted when the form is reset.
 *
 * @deprecated since version 4.4.0. Use the native `<form>` element instead.
 */
export default class IgcFormComponent extends IgcFormComponent_base {
    static readonly tagName = "igc-form";
    static styles: import("lit").CSSResult;
    static register(): void;
    private _controlsWithChecked;
    private _controlsWithValue;
    private _controlsThatSubmit;
    /** Specifies if form data validation should be skipped on submit. */
    novalidate: boolean;
    constructor();
    /** Submits the form. */
    submit(): boolean;
    /** Resets the form. */
    reset(): void;
    private getFormElements;
    /** Retrieves the data from the form in the format of a FormData object. */
    getFormData(): FormData;
    /** Checks for validity of the form. */
    reportValidity(): boolean;
    private handleClick;
    protected render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'igc-form': IgcFormComponent;
    }
}
export {};
