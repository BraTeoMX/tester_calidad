{"version":3,"file":"mask-input.js","sourceRoot":"","sources":["../../../src/components/mask-input/mask-input.ts"],"names":[],"mappings":"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","sourcesContent":["import { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\n\nimport { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { registerComponent } from '../common/definitions/register.js';\nimport messages from '../common/localization/validation-en.js';\nimport { partNameMap } from '../common/util.js';\nimport { type Validator, requiredValidator } from '../common/validators.js';\nimport {\n  IgcMaskInputBaseComponent,\n  type MaskRange,\n} from './mask-input-base.js';\n\n/**\n * A masked input is an input field where a developer can control user input and format the visible value,\n * based on configurable rules\n *\n * @element igc-mask-input\n *\n * @slot prefix - Renders content before the input\n * @slot suffix - Renders content after the input\n * @slot helper-text - Renders content below the input\n *\n * @fires igcInput - Emitted when the control receives user input\n * @fires igcChange - Emitted when an alteration of the control's value is committed by the user\n * @fires igcFocus - Emitted when the control gains focus\n * @fires igcBlur - Emitted when the control loses focus\n *\n * @csspart container - The main wrapper that holds all main input elements\n * @csspart input - The native input element\n * @csspart label - The native label element\n * @csspart prefix - The prefix wrapper\n * @csspart suffix - The suffix wrapper\n * @csspart helper-text - The helper text wrapper\n */\nexport default class IgcMaskInputComponent extends IgcMaskInputBaseComponent {\n  public static readonly tagName = 'igc-mask-input';\n\n  /* blazorSuppress */\n  public static register() {\n    registerComponent(IgcMaskInputComponent);\n  }\n\n  protected override validators: Validator<this>[] = [\n    requiredValidator,\n    {\n      key: 'badInput',\n      message: messages.mask,\n      isValid: () => this.parser.isValidString(this.maskedValue),\n    },\n  ];\n\n  protected _value = '';\n\n  /**\n   * Dictates the behavior when retrieving the value of the control:\n   *\n   * - `raw` will return the clean user input.\n   * - `withFormatting` will return the value with all literals and prompts.\n   * @attr value-mode\n   */\n  @property({ attribute: 'value-mode' })\n  public valueMode: 'raw' | 'withFormatting' = 'raw';\n\n  /**\n   * The value of the input.\n   *\n   * Regardless of the currently set `value-mode`, an empty value will return an empty string.\n   * @attr\n   */\n  @property()\n  @blazorTwoWayBind('igcChange', 'detail')\n  public get value(): string {\n    return this.valueMode !== 'raw' ? this.maskedValue : this._value;\n  }\n\n  public set value(string: string) {\n    this._value = string ?? '';\n    this.maskedValue = this.parser.apply(this._value);\n    this.updateMaskedValue();\n    this.updateFormValue();\n  }\n\n  /**\n   * The mask pattern to apply on the input.\n   * @attr\n   */\n  @property()\n  public get mask(): string {\n    return this._mask;\n  }\n\n  /** The mask pattern to apply on the input. */\n  public set mask(value: string) {\n    this._mask = value;\n    this.parser.mask = value;\n    if (this.value) {\n      this.maskedValue = this.parser.apply(this._value);\n    }\n  }\n\n  public override connectedCallback(): void {\n    super.connectedCallback();\n    this.updateValidity();\n  }\n\n  protected override setDefaultValue(): void {\n    this._defaultValue = this._value;\n  }\n\n  protected updateFormValue() {\n    this.valueMode === 'raw'\n      ? this.setFormValue(this.value || null, this.value)\n      : this.setFormValue(this.maskedValue || null, this.maskedValue);\n    this.updateValidity();\n    this.setInvalidState();\n  }\n\n  @watch('prompt')\n  protected promptChange() {\n    this.parser.prompt = this.prompt;\n    if (this.value) {\n      this.maskedValue = this.parser.apply(this._value);\n    }\n  }\n\n  protected async updateInput(string: string, range: MaskRange) {\n    const { value, end } = this.parser.replace(\n      this.maskedValue,\n      string,\n      range.start,\n      range.end\n    );\n\n    this.maskedValue = value;\n    this._value = this.parser.parse(value);\n\n    this.updateFormValue();\n    this.requestUpdate();\n\n    if (range.start !== this.mask.length) {\n      this.emitEvent('igcInput', { detail: this.value });\n    }\n    await this.updateComplete;\n\n    this.input.setSelectionRange(end, end);\n  }\n\n  protected handleDragEnter() {\n    if (!this.focused && !this._value) {\n      this.maskedValue = this.emptyMask;\n    }\n  }\n\n  protected handleDragLeave() {\n    if (!this.focused) {\n      this.updateMaskedValue();\n    }\n  }\n\n  protected override async handleFocus() {\n    this.focused = true;\n    super.handleFocus();\n\n    if (this.readonly) {\n      return;\n    }\n\n    if (!this._value) {\n      // In case of empty value, select the whole mask\n      this.maskedValue = this.emptyMask;\n\n      await this.updateComplete;\n      this.select();\n    }\n  }\n\n  protected override handleBlur() {\n    this.focused = false;\n    this.updateMaskedValue();\n    this.invalid = !this.checkValidity();\n    super.handleBlur();\n  }\n\n  protected handleChange() {\n    this.emitEvent('igcChange', { detail: this.value });\n  }\n\n  protected updateMaskedValue() {\n    if (this.maskedValue === this.emptyMask) {\n      this.maskedValue = '';\n    }\n  }\n\n  protected override _updateSetRangeTextValue() {\n    this.value = this.parser.parse(this.maskedValue);\n  }\n\n  protected override renderInput() {\n    return html`\n      <input\n        type=\"text\"\n        part=${partNameMap(this.resolvePartNames('input'))}\n        name=${ifDefined(this.name)}\n        .value=${live(this.maskedValue)}\n        .placeholder=${live(this.placeholder ?? this.parser.escapedMask)}\n        ?readonly=${this.readonly}\n        ?disabled=${this.disabled}\n        @dragenter=${this.handleDragEnter}\n        @dragleave=${this.handleDragLeave}\n        @dragstart=${this.handleDragStart}\n        @blur=${this.handleBlur}\n        @focus=${this.handleFocus}\n        @cut=${this.handleCut}\n        @change=${this.handleChange}\n        @click=${this.handleClick}\n        @compositionstart=${this.handleCompositionStart}\n        @compositionend=${this.handleCompositionEnd}\n        @input=${this.handleInput}\n        aria-invalid=${this.invalid ? 'true' : 'false'}\n        @keydown=${this.handleKeydown}\n      />\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-mask-input': IgcMaskInputComponent;\n  }\n}\n"]}