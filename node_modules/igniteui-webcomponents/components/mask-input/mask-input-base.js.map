{"version":3,"file":"mask-input-base.js","sourceRoot":"","sources":["../../../src/components/mask-input/mask-input-base.ts"],"names":[],"mappings":"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","sourcesContent":["import { property, state } from 'lit/decorators.js';\n\nimport { blazorDeepImport } from '../common/decorators/blazorDeepImport.js';\nimport { IgcInputBaseComponent } from '../input/input-base.js';\nimport { MaskParser } from './mask-parser.js';\n\nexport type MaskRange = {\n  start: number;\n  end: number;\n};\n\n@blazorDeepImport\nexport abstract class IgcMaskInputBaseComponent extends IgcInputBaseComponent {\n  protected parser = new MaskParser();\n  protected selection: MaskRange = { start: 0, end: 0 };\n  protected compositionStart = 0;\n\n  @state()\n  protected focused = false;\n\n  @state()\n  protected maskedValue = '';\n\n  @state()\n  protected _mask = '';\n\n  /** The prompt symbol to use for unfilled parts of the mask. */\n  @property()\n  public prompt!: string;\n\n  protected get inputSelection(): MaskRange {\n    return {\n      start: this.input.selectionStart || 0,\n      end: this.input.selectionEnd || 0,\n    };\n  }\n\n  protected get emptyMask(): string {\n    return this.parser.apply();\n  }\n\n  public override connectedCallback() {\n    super.connectedCallback();\n\n    this._mask = this._mask || this.parser.mask;\n    this.prompt = this.prompt || this.parser.prompt;\n  }\n\n  /** Selects all text within the input. */\n  public select() {\n    this.input.select();\n  }\n\n  protected handleInput({ inputType, isComposing }: InputEvent) {\n    const EMPTY = '';\n    const value = this.input.value;\n    const { start, end } = this.selection;\n    const deleteEnd = this.parser.getNextNonLiteralPosition(end) + 1;\n\n    switch (inputType) {\n      case 'deleteContentForward':\n        this.updateInput(EMPTY, { start, end: deleteEnd });\n        return this.updateComplete.then(() =>\n          this.input.setSelectionRange(deleteEnd, deleteEnd)\n        );\n\n      case 'deleteContentBackward':\n        if (isComposing) return;\n        return this.updateInput(EMPTY, {\n          start: this.parser.getPreviousNonLiteralPosition(\n            this.inputSelection.start\n          ),\n          end,\n        });\n\n      case 'deleteByCut':\n        return this.updateInput(EMPTY, this.selection);\n\n      case 'insertText':\n        return this.updateInput(\n          value.substring(start, this.inputSelection.end),\n          this.selection\n        );\n\n      case 'insertFromPaste':\n        return this.updateInput(\n          value.substring(start, this.inputSelection.end),\n          {\n            start,\n            end: this.inputSelection.start,\n          }\n        );\n\n      case 'insertFromDrop':\n        return this.updateInput(\n          value.substring(this.inputSelection.start, this.inputSelection.end),\n          { ...this.inputSelection }\n        );\n    }\n  }\n\n  protected handleKeydown({ key }: KeyboardEvent) {\n    if (!key) {\n      return;\n    }\n    this.selection = this.inputSelection;\n  }\n\n  protected handleCut() {\n    this.selection = this.inputSelection;\n  }\n\n  protected handleDragStart() {\n    this.selection = this.inputSelection;\n  }\n\n  protected handleCompositionStart() {\n    this.compositionStart = this.inputSelection.start;\n  }\n\n  protected handleCompositionEnd({ data }: CompositionEvent) {\n    this.updateInput(data, {\n      start: this.compositionStart,\n      end: this.inputSelection.end,\n    });\n  }\n\n  protected handleClick() {\n    const { selectionStart: start, selectionEnd: end } = this.input;\n\n    // Clicking at the end of the input field will select the entire mask\n    if (start === end && start === this.maskedValue.length) {\n      this.select();\n    }\n  }\n\n  /* blazorSuppress */\n  public override setSelectionRange(\n    start: number,\n    end: number,\n    direction?: 'backward' | 'forward' | 'none'\n  ): void {\n    super.setSelectionRange(start, end, direction);\n    this.selection = { start, end };\n  }\n\n  /* blazorSuppress */\n  /** Replaces the selected text in the control and re-applies the mask */\n  public override setRangeText(\n    replacement: string,\n    start?: number,\n    end?: number,\n    selectMode?: 'select' | 'start' | 'end' | 'preserve'\n  ) {\n    const current = this.inputSelection;\n    const _start = start ?? current.start;\n    const _end = end ?? current.end;\n\n    const result = this.parser.replace(\n      this.maskedValue || this.emptyMask,\n      replacement,\n      _start,\n      _end\n    );\n    this.maskedValue = this.parser.apply(this.parser.parse(result.value));\n    this._updateSetRangeTextValue();\n\n    this.updateComplete.then(() => {\n      switch (selectMode) {\n        case 'select':\n          this.setSelectionRange(_start, _end);\n          break;\n        case 'start':\n          this.setSelectionRange(_start, _start);\n          break;\n        case 'end':\n          this.setSelectionRange(_end, _end);\n          break;\n        default:\n          this.setSelectionRange(current.start, current.end);\n      }\n    });\n  }\n\n  protected abstract _updateSetRangeTextValue(): void;\n  protected abstract updateInput(string: string, range: MaskRange): void;\n}\n"]}