{"version":3,"file":"checkbox-base.js","sourceRoot":"","sources":["../../../src/components/checkbox/checkbox-base.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement } from 'lit';\nimport { property, query, queryAssignedNodes, state } from 'lit/decorators.js';\n\nimport { addKeyboardFocusRing } from '../common/controllers/focus-ring.js';\nimport { alternateName } from '../common/decorators/alternateName.js';\nimport { blazorDeepImport } from '../common/decorators/blazorDeepImport.js';\nimport { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';\nimport type { Constructor } from '../common/mixins/constructor.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { FormAssociatedRequiredMixin } from '../common/mixins/form-associated-required.js';\nimport {\n  type Validator,\n  requiredBooleanValidator,\n} from '../common/validators.js';\n\nexport interface IgcCheckboxEventMap {\n  igcChange: CustomEvent<boolean>;\n  igcFocus: CustomEvent<void>;\n  igcBlur: CustomEvent<void>;\n}\n\n@blazorDeepImport\nexport class IgcCheckboxBaseComponent extends FormAssociatedRequiredMixin(\n  EventEmitterMixin<IgcCheckboxEventMap, Constructor<LitElement>>(LitElement)\n) {\n  protected override validators: Validator<this>[] = [requiredBooleanValidator];\n\n  protected _kbFocus = addKeyboardFocusRing(this);\n  protected _value!: string;\n  protected _checked = false;\n\n  @query('input', true)\n  protected input!: HTMLInputElement;\n\n  @queryAssignedNodes({ flatten: true })\n  protected label!: Array<Node>;\n\n  @state()\n  protected hideLabel = false;\n\n  /**\n   * The value attribute of the control.\n   * @attr\n   */\n  @property()\n  public set value(value: string) {\n    this._value = value;\n    if (this.checked) {\n      this.setFormValue(this._value || 'on');\n    }\n  }\n\n  public get value(): string {\n    return this._value;\n  }\n\n  /**\n   * The checked state of the control.\n   * @attr\n   */\n  @property({ type: Boolean })\n  @blazorTwoWayBind('igcChange', 'detail')\n  public set checked(value: boolean) {\n    this._checked = Boolean(value);\n    this.setFormValue(this._checked ? this.value || 'on' : null);\n    this.updateValidity();\n    this.setInvalidState();\n  }\n\n  public get checked(): boolean {\n    return this._checked;\n  }\n\n  /**\n   * The label position of the control.\n   * @attr label-position\n   */\n  @property({ reflect: true, attribute: 'label-position' })\n  public labelPosition: 'before' | 'after' = 'after';\n\n  protected override createRenderRoot() {\n    const root = super.createRenderRoot();\n    root.addEventListener('slotchange', () => {\n      this.hideLabel = this.label.length < 1;\n    });\n    return root;\n  }\n\n  public override connectedCallback() {\n    super.connectedCallback();\n    this.updateValidity();\n  }\n\n  /** Simulates a click on the control. */\n  public override click() {\n    this.input.click();\n  }\n\n  /** Sets focus on the control. */\n  @alternateName('focusComponent')\n  public override focus(options?: FocusOptions) {\n    this.input.focus(options);\n  }\n\n  /** Removes focus from the control. */\n  @alternateName('blurComponent')\n  public override blur() {\n    this.input.blur();\n  }\n\n  protected handleClick() {\n    this.checked = !this.checked;\n    this.emitEvent('igcChange', { detail: this.checked });\n  }\n\n  protected handleBlur() {\n    this.emitEvent('igcBlur');\n    this._kbFocus.reset();\n  }\n\n  protected handleFocus() {\n    this._dirty = true;\n    this.emitEvent('igcFocus');\n  }\n}\n"]}