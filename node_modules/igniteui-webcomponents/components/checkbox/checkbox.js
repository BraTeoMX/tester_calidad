var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var IgcCheckboxComponent_1;
import { html } from 'lit';
import { property } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { live } from 'lit/directives/live.js';
import { themes } from '../../theming/theming-decorator.js';
import { registerComponent } from '../common/definitions/register.js';
import { createCounter, partNameMap } from '../common/util.js';
import { IgcCheckboxBaseComponent } from './checkbox-base.js';
import { all } from './themes/checkbox-themes.js';
import { styles } from './themes/checkbox.base.css.js';
import { styles as shared } from './themes/shared/checkbox/checkbox.common.css.js';
let IgcCheckboxComponent = IgcCheckboxComponent_1 = class IgcCheckboxComponent extends IgcCheckboxBaseComponent {
    constructor() {
        super(...arguments);
        this.inputId = `checkbox-${IgcCheckboxComponent_1.increment()}`;
        this.labelId = `checkbox-label-${this.inputId}`;
        this.indeterminate = false;
    }
    static register() {
        registerComponent(IgcCheckboxComponent_1);
    }
    handleClick() {
        this.indeterminate = false;
        super.handleClick();
    }
    render() {
        const labelledBy = this.getAttribute('aria-labelledby');
        return html `
      <label
        part=${partNameMap({
            base: true,
            checked: this.checked,
            focused: this._kbFocus.focused,
        })}
        for=${this.inputId}
        @pointerdown=${this._kbFocus.reset}
      >
        <input
          id=${this.inputId}
          type="checkbox"
          name=${ifDefined(this.name)}
          value=${ifDefined(this.value)}
          .required=${this.required}
          .disabled=${this.disabled}
          .checked=${live(this.checked)}
          .indeterminate=${live(this.indeterminate)}
          aria-checked=${this.indeterminate && !this.checked
            ? 'mixed'
            : this.checked}
          aria-disabled=${this.disabled ? 'true' : 'false'}
          aria-labelledby=${labelledBy ? labelledBy : this.labelId}
          @click=${this.handleClick}
          @blur=${this.handleBlur}
          @focus=${this.handleFocus}
        />
        <span part=${partNameMap({ control: true, checked: this.checked })}>
          <span part=${partNameMap({ indicator: true, checked: this.checked })}>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
              <path d="M4.1,12.7 9,17.6 20.3,6.3" />
            </svg>
          </span>
        </span>
        <span
          .hidden=${this.hideLabel}
          part=${partNameMap({ label: true, checked: this.checked })}
          id=${this.labelId}
        >
          <slot></slot>
        </span>
      </label>
    `;
    }
};
IgcCheckboxComponent.tagName = 'igc-checkbox';
IgcCheckboxComponent.styles = [styles, shared];
IgcCheckboxComponent.increment = createCounter();
__decorate([
    property({ type: Boolean, reflect: true })
], IgcCheckboxComponent.prototype, "indeterminate", void 0);
IgcCheckboxComponent = IgcCheckboxComponent_1 = __decorate([
    themes(all)
], IgcCheckboxComponent);
export default IgcCheckboxComponent;
//# sourceMappingURL=checkbox.js.map