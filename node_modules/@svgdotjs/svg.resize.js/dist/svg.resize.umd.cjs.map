{"version":3,"file":"svg.resize.umd.cjs","sources":["../node_modules/@svgdotjs/svg.select.js/dist/svg.select.js","../src/ResizeHandler.js","../src/svg.resize.js"],"sourcesContent":["/*!\n* @svgdotjs/svg.select.js - An extension of svg.js which allows to select elements with mouse\n* @version 4.0.1\n* https://github.com/svgdotjs/svg.select.js\n*\n* @copyright Ulrich-Matthias SchÃ¤fer\n* @license MIT\n*\n* BUILT: Mon Jul 01 2024 15:04:42 GMT+0200 (Central European Summer Time)\n*/\n;\nimport { G, getWindow, extend, Element, Polygon, Polyline, Line } from \"@svgdotjs/svg.js\";\nfunction getMoseDownFunc(eventName, el, points, index = null) {\n  return function(ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    var x = ev.pageX || ev.touches[0].pageX;\n    var y = ev.pageY || ev.touches[0].pageY;\n    el.fire(eventName, { x, y, event: ev, index, points });\n  };\n}\nfunction transformPoint([x, y], { a, b, c, d, e, f }) {\n  return [x * a + y * c + e, x * b + y * d + f];\n}\nclass SelectHandler {\n  constructor(el) {\n    this.el = el;\n    el.remember(\"_selectHandler\", this);\n    this.selection = new G();\n    this.order = [\"lt\", \"t\", \"rt\", \"r\", \"rb\", \"b\", \"lb\", \"l\", \"rot\"];\n    this.mutationHandler = this.mutationHandler.bind(this);\n    const win = getWindow();\n    this.observer = new win.MutationObserver(this.mutationHandler);\n  }\n  init(options) {\n    this.createHandle = options.createHandle || this.createHandleFn;\n    this.createRot = options.createRot || this.createRotFn;\n    this.updateHandle = options.updateHandle || this.updateHandleFn;\n    this.updateRot = options.updateRot || this.updateRotFn;\n    this.el.root().put(this.selection);\n    this.updatePoints();\n    this.createSelection();\n    this.createResizeHandles();\n    this.updateResizeHandles();\n    this.createRotationHandle();\n    this.updateRotationHandle();\n    this.observer.observe(this.el.node, { attributes: true });\n  }\n  active(val, options) {\n    if (!val) {\n      this.selection.clear().remove();\n      this.observer.disconnect();\n      return;\n    }\n    this.init(options);\n  }\n  createSelection() {\n    this.selection.polygon(this.handlePoints).addClass(\"svg_select_shape\");\n  }\n  updateSelection() {\n    this.selection.get(0).plot(this.handlePoints);\n  }\n  createResizeHandles() {\n    this.handlePoints.forEach((p, index, arr) => {\n      const name = this.order[index];\n      this.createHandle.call(this, this.selection, p, index, arr, name);\n      this.selection.get(index + 1).addClass(\"svg_select_handle svg_select_handle_\" + name).on(\"mousedown.selection touchstart.selection\", getMoseDownFunc(name, this.el, this.handlePoints, index));\n    });\n  }\n  createHandleFn(group) {\n    group.polyline();\n  }\n  updateHandleFn(shape, point, index, arr) {\n    const before = arr.at(index - 1);\n    const next = arr[(index + 1) % arr.length];\n    const p = point;\n    const diff1 = [p[0] - before[0], p[1] - before[1]];\n    const diff2 = [p[0] - next[0], p[1] - next[1]];\n    const len1 = Math.sqrt(diff1[0] * diff1[0] + diff1[1] * diff1[1]);\n    const len2 = Math.sqrt(diff2[0] * diff2[0] + diff2[1] * diff2[1]);\n    const normalized1 = [diff1[0] / len1, diff1[1] / len1];\n    const normalized2 = [diff2[0] / len2, diff2[1] / len2];\n    const beforeNew = [p[0] - normalized1[0] * 10, p[1] - normalized1[1] * 10];\n    const nextNew = [p[0] - normalized2[0] * 10, p[1] - normalized2[1] * 10];\n    shape.plot([beforeNew, p, nextNew]);\n  }\n  updateResizeHandles() {\n    this.handlePoints.forEach((p, index, arr) => {\n      const name = this.order[index];\n      this.updateHandle.call(this, this.selection.get(index + 1), p, index, arr, name);\n    });\n  }\n  createRotFn(group) {\n    group.line();\n    group.circle(5);\n  }\n  getPoint(name) {\n    return this.handlePoints[this.order.indexOf(name)];\n  }\n  getPointHandle(name) {\n    return this.selection.get(this.order.indexOf(name) + 1);\n  }\n  updateRotFn(group, rotPoint) {\n    const topPoint = this.getPoint(\"t\");\n    group.get(0).plot(topPoint[0], topPoint[1], rotPoint[0], rotPoint[1]);\n    group.get(1).center(rotPoint[0], rotPoint[1]);\n  }\n  createRotationHandle() {\n    const handle = this.selection.group().addClass(\"svg_select_handle_rot\").on(\"mousedown.selection touchstart.selection\", getMoseDownFunc(\"rot\", this.el, this.handlePoints));\n    this.createRot.call(this, handle);\n  }\n  updateRotationHandle() {\n    const group = this.selection.findOne(\"g.svg_select_handle_rot\");\n    this.updateRot(group, this.rotationPoint, this.handlePoints);\n  }\n  // gets new bounding box points and transform them into the elements space\n  updatePoints() {\n    const bbox = this.el.bbox();\n    const fromShapeToUiMatrix = this.el.parent().screenCTM().inverseO().multiplyO(this.el.screenCTM());\n    this.handlePoints = this.getHandlePoints(bbox).map((p) => transformPoint(p, fromShapeToUiMatrix));\n    this.rotationPoint = transformPoint(this.getRotationPoint(bbox), fromShapeToUiMatrix);\n  }\n  // A collection of all the points we need to draw our ui\n  getHandlePoints({ x, x2, y, y2, cx, cy } = this.el.bbox()) {\n    return [\n      [x, y],\n      [cx, y],\n      [x2, y],\n      [x2, cy],\n      [x2, y2],\n      [cx, y2],\n      [x, y2],\n      [x, cy]\n    ];\n  }\n  // A collection of all the points we need to draw our ui\n  getRotationPoint({ y, cx } = this.el.bbox()) {\n    return [cx, y - 20];\n  }\n  mutationHandler() {\n    this.updatePoints();\n    this.updateSelection();\n    this.updateResizeHandles();\n    this.updateRotationHandle();\n  }\n}\nclass PointSelectHandler {\n  constructor(el) {\n    this.el = el;\n    el.remember(\"_pointSelectHandler\", this);\n    this.selection = new G();\n    this.order = [\"lt\", \"t\", \"rt\", \"r\", \"rb\", \"b\", \"lb\", \"l\", \"rot\"];\n    this.mutationHandler = this.mutationHandler.bind(this);\n    const win = getWindow();\n    this.observer = new win.MutationObserver(this.mutationHandler);\n  }\n  init(options) {\n    this.createHandle = options.createHandle || this.createHandleFn;\n    this.updateHandle = options.updateHandle || this.updateHandleFn;\n    this.el.root().put(this.selection);\n    this.updatePoints();\n    this.createSelection();\n    this.createPointHandles();\n    this.updatePointHandles();\n    this.observer.observe(this.el.node, { attributes: true });\n  }\n  active(val, options) {\n    if (!val) {\n      this.selection.clear().remove();\n      this.observer.disconnect();\n      return;\n    }\n    this.init(options);\n  }\n  createSelection() {\n    this.selection.polygon(this.points).addClass(\"svg_select_shape_pointSelect\");\n  }\n  updateSelection() {\n    this.selection.get(0).plot(this.points);\n  }\n  createPointHandles() {\n    this.points.forEach((p, index, arr) => {\n      this.createHandle.call(this, this.selection, p, index, arr);\n      this.selection.get(index + 1).addClass(\"svg_select_handle_point\").on(\"mousedown.selection touchstart.selection\", getMoseDownFunc(\"point\", this.el, this.points, index));\n    });\n  }\n  createHandleFn(group) {\n    group.circle(5);\n  }\n  updateHandleFn(shape, point) {\n    shape.center(point[0], point[1]);\n  }\n  updatePointHandles() {\n    this.points.forEach((p, index, arr) => {\n      this.updateHandle.call(this, this.selection.get(index + 1), p, index, arr);\n    });\n  }\n  // gets new bounding box points and transform them into the elements space\n  updatePoints() {\n    const fromShapeToUiMatrix = this.el.parent().screenCTM().inverseO().multiplyO(this.el.screenCTM());\n    this.points = this.el.array().map((p) => transformPoint(p, fromShapeToUiMatrix));\n  }\n  mutationHandler() {\n    this.updatePoints();\n    this.updateSelection();\n    this.updatePointHandles();\n  }\n}\nconst getSelectFn = (handleClass) => {\n  return function(enabled = true, options = {}) {\n    if (typeof enabled === \"object\") {\n      options = enabled;\n      enabled = true;\n    }\n    let selectHandler = this.remember(\"_\" + handleClass.name);\n    if (!selectHandler) {\n      if (enabled.prototype instanceof SelectHandler) {\n        selectHandler = new enabled(this);\n        enabled = true;\n      } else {\n        selectHandler = new handleClass(this);\n      }\n      this.remember(\"_\" + handleClass.name, selectHandler);\n    }\n    selectHandler.active(enabled, options);\n    return this;\n  };\n};\nextend(Element, {\n  select: getSelectFn(SelectHandler)\n});\nextend([Polygon, Polyline, Line], {\n  pointSelect: getSelectFn(PointSelectHandler)\n});\nexport {\n  PointSelectHandler,\n  SelectHandler\n};\n//# sourceMappingURL=svg.select.js.map\n","import { Point } from '@svgdotjs/svg.js'\nimport { Matrix } from '@svgdotjs/svg.js'\nimport { on, off, Box } from '@svgdotjs/svg.js'\n\nconst getCoordsFromEvent = (ev) => {\n  if (ev.changedTouches) {\n    ev = ev.changedTouches[0]\n  }\n  return { x: ev.clientX, y: ev.clientY }\n}\n\nconst maxBoxFromPoints = (points) => {\n  let x = Infinity\n  let y = Infinity\n  let x2 = -Infinity\n  let y2 = -Infinity\n\n  for (let i = 0; i < points.length; i++) {\n    const p = points[i]\n    x = Math.min(x, p[0])\n    y = Math.min(y, p[1])\n    x2 = Math.max(x2, p[0])\n    y2 = Math.max(y2, p[1])\n  }\n\n  return new Box(x, y, x2 - x, y2 - y)\n}\n\nfunction scaleBox(box, origin, scale) {\n  const points = [\n    [box.x, box.y],\n    [box.x + box.width, box.y],\n    [box.x + box.width, box.y + box.height],\n    [box.x, box.y + box.height],\n  ]\n\n  const newPoints = points.map(([x, y]) => {\n    // Translate to origin\n    const translatedX = x - origin[0]\n    const translatedY = y - origin[1]\n\n    // Scale\n    const scaledX = translatedX * scale\n    const scaledY = translatedY * scale\n\n    // Translate back\n    return [scaledX + origin[0], scaledY + origin[1]]\n  })\n\n  return maxBoxFromPoints(newPoints)\n}\n\nexport class ResizeHandler {\n  constructor(el) {\n    this.el = el\n    el.remember('_ResizeHandler', this)\n    this.lastCoordinates = null\n    this.eventType = ''\n    this.lastEvent = null\n    this.handleResize = this.handleResize.bind(this)\n    this.resize = this.resize.bind(this)\n    this.endResize = this.endResize.bind(this)\n    this.rotate = this.rotate.bind(this)\n    this.movePoint = this.movePoint.bind(this)\n  }\n\n  active(value, options) {\n    this.preserveAspectRatio = options.preserveAspectRatio ?? false\n    this.aroundCenter = options.aroundCenter ?? false\n    this.grid = options.grid ?? 0\n    this.degree = options.degree ?? 0\n\n    // remove all resize events\n    this.el.off('.resize')\n\n    if (!value) return\n\n    this.el.on(\n      [\n        'lt.resize',\n        'rt.resize',\n        'rb.resize',\n        'lb.resize',\n        't.resize',\n        'r.resize',\n        'b.resize',\n        'l.resize',\n        'rot.resize',\n        'point.resize',\n      ],\n      this.handleResize\n    )\n\n    // in case the options were changed mid-resize,\n    // we have to replay the last event to see the immediate effect of the option change\n    if (this.lastEvent) {\n      if (this.eventType === 'rot') {\n        this.rotate(this.lastEvent)\n      } else if (this.eventType === 'point') {\n        this.movePoint(this.lastEvent)\n      } else {\n        this.resize(this.lastEvent)\n      }\n    }\n  }\n\n  // This is called when a user clicks on one of the resize points\n  handleResize(e) {\n    this.eventType = e.type\n    const { event, index, points } = e.detail\n    const isMouse = !event.type.indexOf('mouse')\n\n    // Check for left button\n    if (isMouse && (event.which || event.buttons) !== 1) {\n      return\n    }\n\n    // Fire beforedrag event\n    if (this.el.dispatch('beforeresize', { event: e, handler: this }).defaultPrevented) {\n      return\n    }\n\n    this.box = this.el.bbox()\n    this.startPoint = this.el.point(getCoordsFromEvent(event))\n    this.index = index\n    this.points = points.slice()\n\n    // We consider the resize done, when a touch is canceled, too\n    const eventMove = (isMouse ? 'mousemove' : 'touchmove') + '.resize'\n    const eventEnd = (isMouse ? 'mouseup' : 'touchcancel.resize touchend') + '.resize'\n\n    if (e.type === 'point') {\n      on(window, eventMove, this.movePoint)\n    } else if (e.type === 'rot') {\n      on(window, eventMove, this.rotate)\n    } else {\n      on(window, eventMove, this.resize)\n    }\n    on(window, eventEnd, this.endResize)\n  }\n\n  resize(e) {\n    this.lastEvent = e\n\n    const endPoint = this.snapToGrid(this.el.point(getCoordsFromEvent(e)))\n\n    let dx = endPoint.x - this.startPoint.x\n    let dy = endPoint.y - this.startPoint.y\n\n    if (this.preserveAspectRatio && this.aroundCenter) {\n      dx *= 2\n      dy *= 2\n    }\n\n    const x = this.box.x + dx\n    const y = this.box.y + dy\n    const x2 = this.box.x2 + dx\n    const y2 = this.box.y2 + dy\n\n    let box = new Box(this.box)\n\n    if (this.eventType.includes('l')) {\n      box.x = Math.min(x, this.box.x2)\n      box.x2 = Math.max(x, this.box.x2)\n    }\n\n    if (this.eventType.includes('r')) {\n      box.x = Math.min(x2, this.box.x)\n      box.x2 = Math.max(x2, this.box.x)\n    }\n\n    if (this.eventType.includes('t')) {\n      box.y = Math.min(y, this.box.y2)\n      box.y2 = Math.max(y, this.box.y2)\n    }\n\n    if (this.eventType.includes('b')) {\n      box.y = Math.min(y2, this.box.y)\n      box.y2 = Math.max(y2, this.box.y)\n    }\n\n    box.width = box.x2 - box.x\n    box.height = box.y2 - box.y\n\n    // after figuring out the resulting box,\n    // we have to check if the aspect ratio should be preserved\n    // if so, we have to find the correct scaling factor and scale the box around a fixed point (usually the opposite of the handle)\n    // in case aroundCenter is active, the fixed point is the center of the box\n    if (this.preserveAspectRatio) {\n      const scaleX = box.width / this.box.width\n      const scaleY = box.height / this.box.height\n\n      const order = ['lt', 't', 'rt', 'r', 'rb', 'b', 'lb', 'l']\n\n      const origin = (order.indexOf(this.eventType) + 4) % order.length\n      const constantPoint = this.aroundCenter ? [this.box.cx, this.box.cy] : this.points[origin]\n\n      let scale = this.eventType.includes('t') || this.eventType.includes('b') ? scaleY : scaleX\n      scale = this.eventType.length === 2 ? Math.max(scaleX, scaleY) : scale\n\n      box = scaleBox(this.box, constantPoint, scale)\n    }\n\n    if (\n      this.el.dispatch('resize', {\n        box: new Box(box),\n        angle: 0,\n        eventType: this.eventType,\n        event: e,\n        handler: this,\n      }).defaultPrevented\n    ) {\n      return\n    }\n\n    this.el.size(box.width, box.height).move(box.x, box.y)\n  }\n\n  movePoint(e) {\n    this.lastEvent = e\n    const { x, y } = this.snapToGrid(this.el.point(getCoordsFromEvent(e)))\n    const pointArr = this.el.array().slice()\n    pointArr[this.index] = [x, y]\n\n    if (\n      this.el.dispatch('resize', {\n        box: maxBoxFromPoints(pointArr),\n        angle: 0,\n        eventType: this.eventType,\n        event: e,\n        handler: this,\n      }).defaultPrevented\n    ) {\n      return\n    }\n\n    this.el.plot(pointArr)\n  }\n\n  rotate(e) {\n    this.lastEvent = e\n\n    const startPoint = this.startPoint\n    const endPoint = this.el.point(getCoordsFromEvent(e))\n\n    const { cx, cy } = this.box\n\n    const dx1 = startPoint.x - cx\n    const dy1 = startPoint.y - cy\n\n    const dx2 = endPoint.x - cx\n    const dy2 = endPoint.y - cy\n\n    const c = Math.sqrt(dx1 * dx1 + dy1 * dy1) * Math.sqrt(dx2 * dx2 + dy2 * dy2)\n\n    if (c === 0) {\n      return\n    }\n    let angle = (Math.acos((dx1 * dx2 + dy1 * dy2) / c) / Math.PI) * 180\n\n    // catches 0 angle and NaN angle that are zero as well (but numerically instable)\n    if (!angle) return\n\n    if (endPoint.x < startPoint.x) {\n      angle = -angle\n    }\n\n    const matrix = new Matrix(this.el)\n    const { x: ox, y: oy } = new Point(cx, cy).transformO(matrix)\n\n    const { rotate } = matrix.decompose()\n    const resultAngle = this.snapToAngle(rotate + angle) - rotate\n\n    if (\n      this.el.dispatch('resize', {\n        box: this.box,\n        angle: resultAngle,\n        eventType: this.eventType,\n        event: e,\n        handler: this,\n      }).defaultPrevented\n    ) {\n      return\n    }\n\n    this.el.transform(matrix.rotateO(resultAngle, ox, oy))\n  }\n\n  endResize(ev) {\n    // Unbind resize and end events to window\n    if (this.eventType !== 'rot' && this.eventType !== 'point') {\n      this.resize(ev)\n    }\n\n    this.lastEvent = null\n\n    this.eventType = ''\n    off(window, 'mousemove.resize touchmove.resize')\n    off(window, 'mouseup.resize touchend.resize')\n  }\n\n  snapToGrid(point) {\n    if (this.grid) {\n      point.x = Math.round(point.x / this.grid) * this.grid\n      point.y = Math.round(point.y / this.grid) * this.grid\n    }\n\n    return point\n  }\n\n  snapToAngle(angle) {\n    if (this.degree) {\n      angle = Math.round(angle / this.degree) * this.degree\n    }\n\n    return angle\n  }\n}\n","import { extend, Element } from '@svgdotjs/svg.js'\nimport { ResizeHandler } from './ResizeHandler'\n\nextend(Element, {\n  // Resize element with mouse\n  resize: function (enabled = true, options = {}) {\n    if (typeof enabled === 'object') {\n      options = enabled\n      enabled = true\n    }\n\n    let resizeHandler = this.remember('_ResizeHandler')\n\n    if (!resizeHandler) {\n      if (enabled.prototype instanceof ResizeHandler) {\n        /* eslint new-cap: [\"error\", { \"newIsCap\": false }] */\n        resizeHandler = new enabled(this)\n        enabled = true\n      } else {\n        resizeHandler = new ResizeHandler(this)\n      }\n\n      this.remember('_resizeHandler', resizeHandler)\n    }\n\n    resizeHandler.active(enabled, options)\n\n    return this\n  },\n})\n\nexport { ResizeHandler }\n"],"names":["getMoseDownFunc","eventName","el","points","index","ev","preventDefault","stopPropagation","x","pageX","touches","y","pageY","fire","event","transformPoint","a","b","c","d","e","f","SelectHandler","constructor","this","remember","selection","G","order","mutationHandler","bind","win","getWindow","observer","MutationObserver","init","options","createHandle","createHandleFn","createRot","createRotFn","updateHandle","updateHandleFn","updateRot","updateRotFn","root","put","updatePoints","createSelection","createResizeHandles","updateResizeHandles","createRotationHandle","updateRotationHandle","observe","node","attributes","active","val","clear","remove","disconnect","polygon","handlePoints","addClass","updateSelection","get","plot","forEach","p","arr","name","call","on","group","polyline","shape","point","before","at","next","length","diff1","diff2","len1","Math","sqrt","len2","normalized1","normalized2","beforeNew","nextNew","line","circle","getPoint","indexOf","getPointHandle","rotPoint","topPoint","center","handle","findOne","rotationPoint","bbox","fromShapeToUiMatrix","parent","screenCTM","inverseO","multiplyO","getHandlePoints","map","getRotationPoint","x2","y2","cx","cy","getSelectFn","handleClass","enabled","selectHandler","prototype","svg_js","extend","Element","select","Polygon","Polyline","Line","pointSelect","createPointHandles","updatePointHandles","array","getCoordsFromEvent","changedTouches","clientX","clientY","maxBoxFromPoints","Infinity","i","min","max","Box","ResizeHandler","lastCoordinates","eventType","lastEvent","handleResize","resize","endResize","rotate","movePoint","value","preserveAspectRatio","aroundCenter","grid","degree","off","type","detail","isMouse","which","buttons","dispatch","handler","defaultPrevented","box","startPoint","slice","eventMove","eventEnd","window","endPoint","snapToGrid","dx","dy","includes","width","height","scaleX","scaleY","origin","constantPoint","scale","newPoints","translatedX","scaledY","scaleBox","angle","size","move","pointArr","dx1","dy1","dx2","dy2","acos","PI","matrix","Matrix","ox","oy","Point","transformO","decompose","resultAngle","snapToAngle","transform","rotateO","round","resizeHandler"],"mappings":"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","x_google_ignoreList":[0]}