import ApexGridRow from '../components/row.js';
import { NAVIGATION_STATE, SENTINEL_NODE } from '../internal/constants.js';
export class NavigationController {
    get virtualizer() {
        // @ts-expect-error - Protected member access
        return this.host.scrollContainer;
    }
    get nextNode() {
        const node = this.state.get('current');
        return node === SENTINEL_NODE
            ? { column: this.firstColumn, row: 0 }
            : { ...node };
    }
    get columns() {
        return this.host.columns;
    }
    get firstColumn() {
        var _a;
        return (_a = this.host.getColumn(0).key) !== null && _a !== void 0 ? _a : '';
    }
    getPreviousColumn(key) {
        return this.columns[Math.max(this.columns.indexOf(this.host.getColumn(key)) - 1, 0)].key;
    }
    getNextColumn(key) {
        return this.columns[Math.min(this.columns.indexOf(this.host.getColumn(key)) + 1, this.columns.length - 1)].key;
    }
    scrollToCell(node) {
        var _a;
        const row = Array.from(this.virtualizer.querySelectorAll(ApexGridRow.is)).find(row => row.index === node.row);
        if (row) {
            (_a = row.cells.find(cell => cell.column.key === node.column)) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ block: 'nearest' });
        }
    }
    get active() {
        return this._active;
    }
    set active(node) {
        this._active = node;
        this.state.set('previous', this._active);
        this.state.set('current', node);
        this.host.requestUpdate();
    }
    constructor(host) {
        this.host = host;
        this.handlers = new Map(Object.entries({
            ArrowDown: this.arrowDown,
            ArrowUp: this.arrowUp,
            ArrowLeft: this.arrowLeft,
            ArrowRight: this.arrowRight,
            Home: this.home,
            End: this.end,
        }));
        this.state = NAVIGATION_STATE;
        this._active = SENTINEL_NODE;
        this.host.addController(this);
    }
    home() {
        var _a;
        this.active = Object.assign(this.nextNode, { row: 0 });
        (_a = this.virtualizer.element(this.active.row)) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ block: 'nearest' });
    }
    end() {
        var _a;
        this.active = Object.assign(this.nextNode, { row: this.host.totalItems - 1 });
        (_a = this.virtualizer.element(this.active.row)) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ block: 'nearest' });
    }
    arrowDown() {
        var _a;
        const next = this.nextNode;
        this.active = Object.assign(next, {
            row: Math.min(next.row + 1, this.host.totalItems - 1),
        });
        (_a = this.virtualizer.element(next.row)) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ block: 'nearest' });
    }
    arrowUp() {
        var _a;
        const next = this.nextNode;
        this.active = Object.assign(next, { row: Math.max(0, next.row - 1) });
        (_a = this.virtualizer.element(next.row)) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ block: 'nearest' });
    }
    arrowLeft() {
        const next = this.nextNode;
        this.active = Object.assign(next, { column: this.getPreviousColumn(next.column) });
        this.scrollToCell(this.active);
    }
    arrowRight() {
        const next = this.nextNode;
        this.active = Object.assign(next, { column: this.getNextColumn(next.column) });
        this.scrollToCell(this.active);
    }
    hostConnected() { }
    hostDisconnected() {
        this.active = SENTINEL_NODE;
        this.state = NAVIGATION_STATE;
    }
    navigate(event) {
        if (this.handlers.has(event.key)) {
            event.preventDefault();
            this.handlers.get(event.key).call(this);
        }
    }
}
//# sourceMappingURL=navigation.js.map