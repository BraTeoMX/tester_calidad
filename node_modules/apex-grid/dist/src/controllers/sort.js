var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SortController_instances, _SortController_isMultipleSort_get, _SortController_isTriStateSort_get, _SortController_resolveSortOptions, _SortController_createDefaultExpression, _SortController_orderBy, _SortController_emitSortingEvent, _SortController_emitSortedEvent, _SortController_setExpression;
import { PIPELINE } from '../internal/constants.js';
import { asArray } from '../internal/utils.js';
export class SortController {
    constructor(host) {
        _SortController_instances.add(this);
        this.host = host;
        this.state = new Map();
        this.host.addController(this);
    }
    async sortFromHeaderClick(column) {
        const expression = this.prepareExpression(column);
        if (!__classPrivateFieldGet(this, _SortController_instances, "m", _SortController_emitSortingEvent).call(this, expression)) {
            return;
        }
        if (!__classPrivateFieldGet(this, _SortController_instances, "a", _SortController_isMultipleSort_get)) {
            this.reset();
        }
        this._sort(expression);
        await this.host.updateComplete;
        __classPrivateFieldGet(this, _SortController_instances, "m", _SortController_emitSortedEvent).call(this, expression);
    }
    prepareExpression({ key, sort: options }) {
        if (this.state.has(key)) {
            const expr = this.state.get(key);
            return Object.assign(expr, {
                direction: __classPrivateFieldGet(this, _SortController_instances, "m", _SortController_orderBy).call(this, expr.direction),
                ...__classPrivateFieldGet(this, _SortController_instances, "m", _SortController_resolveSortOptions).call(this, options),
            });
        }
        // Initial state
        return __classPrivateFieldGet(this, _SortController_instances, "m", _SortController_createDefaultExpression).call(this, key);
    }
    reset(key) {
        key ? this.state.delete(key) : this.state.clear();
    }
    _sort(expressions) {
        asArray(expressions).forEach(expr => __classPrivateFieldGet(this, _SortController_instances, "m", _SortController_setExpression).call(this, expr));
        this.host.requestUpdate(PIPELINE);
    }
    sort(expressions) {
        this._sort(asArray(expressions).map(expr => { var _a; return Object.assign((_a = this.state.get(expr.key)) !== null && _a !== void 0 ? _a : __classPrivateFieldGet(this, _SortController_instances, "m", _SortController_createDefaultExpression).call(this, expr.key), expr); }));
    }
    hostConnected() { }
}
_SortController_instances = new WeakSet(), _SortController_isMultipleSort_get = function _SortController_isMultipleSort_get() {
    return this.host.sortConfiguration.multiple;
}, _SortController_isTriStateSort_get = function _SortController_isTriStateSort_get() {
    return this.host.sortConfiguration.triState;
}, _SortController_resolveSortOptions = function _SortController_resolveSortOptions(options) {
    const expr = {
        caseSensitive: false,
        comparer: undefined,
    };
    if (!options || typeof options === 'boolean') {
        return expr;
    }
    return Object.assign(expr, {
        caseSensitive: options.caseSensitive,
        comparer: options.comparer,
    });
}, _SortController_createDefaultExpression = function _SortController_createDefaultExpression(key) {
    var _a;
    const options = (_a = this.host.getColumn(key)) === null || _a === void 0 ? void 0 : _a.sort;
    return {
        key,
        direction: 'ascending',
        ...__classPrivateFieldGet(this, _SortController_instances, "m", _SortController_resolveSortOptions).call(this, options),
    };
}, _SortController_orderBy = function _SortController_orderBy(dir) {
    return __classPrivateFieldGet(this, _SortController_instances, "a", _SortController_isTriStateSort_get)
        ? dir === 'ascending'
            ? 'descending'
            : dir === 'descending'
                ? 'none'
                : 'ascending'
        : dir === 'ascending'
            ? 'descending'
            : 'ascending';
}, _SortController_emitSortingEvent = function _SortController_emitSortingEvent(detail) {
    return this.host.emitEvent('sorting', { detail, cancelable: true });
}, _SortController_emitSortedEvent = function _SortController_emitSortedEvent(detail) {
    return this.host.emitEvent('sorted', { detail });
}, _SortController_setExpression = function _SortController_setExpression(expression) {
    expression.direction === 'none'
        ? this.reset(expression.key)
        : this.state.set(expression.key, { ...expression });
};
//# sourceMappingURL=sort.js.map