var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ResizeController_instances, _ResizeController_maxSize;
import { html, nothing } from 'lit';
import { styleMap } from 'lit/directives/style-map.js';
import { MIN_COL_RESIZE_WIDTH } from '../internal/constants.js';
export class ResizeController {
    constructor(host) {
        _ResizeController_instances.add(this);
        this.host = host;
        this.indicatorActive = false;
        this.indicatorOffset = 0;
        this.host.addController(this);
    }
    /**
     * Begins resizing a column by showing and positioning the resize indicator in relation to the column.
     *
     * @param header the
     */
    start(header) {
        this.indicatorActive = true;
        this.indicatorOffset = header.offsetLeft + header.offsetWidth;
        this.host.requestUpdate();
    }
    /**
     * Stops and resets the resizing state.
     */
    stop() {
        this.indicatorActive = false;
        this.host.requestUpdate();
    }
    resize(column, width, sizerOffset) {
        if (sizerOffset) {
            this.indicatorOffset = sizerOffset;
        }
        column.width = `${width}px`;
        this.host.requestUpdate();
    }
    async autosize(column, header) {
        column.width = `max-content`;
        this.host.requestUpdate();
        await this.host.updateComplete;
        column.width = `${__classPrivateFieldGet(this, _ResizeController_instances, "m", _ResizeController_maxSize).call(this, column.key, header.offsetWidth)}px`;
        this.host.requestUpdate();
    }
    hostConnected() { }
    /**
     * Renders the resize indicator in the grid.
     */
    renderIndicator() {
        return this.indicatorActive
            ? html `<div
          part="resize-indicator"
          style=${styleMap({
                transform: `translateX(${this.indicatorOffset}px)`,
            })}
        ></div>`
            : nothing;
    }
}
_ResizeController_instances = new WeakSet(), _ResizeController_maxSize = function _ResizeController_maxSize(key, headerWidth) {
    const max = this.host.rows
        .map(row => row.cells.find(cell => cell.column.key === key))
        .reduce((prev, current) => (current.offsetWidth > prev ? current.offsetWidth : prev), 0);
    return Math.max(...[MIN_COL_RESIZE_WIDTH, max, headerWidth]);
};
//# sourceMappingURL=resize.js.map