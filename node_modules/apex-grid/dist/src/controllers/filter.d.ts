import { ReactiveController } from 'lit';
import { FilterState } from '../operations/filter/state.js';
import type { ColumnConfiguration, GridHost, Keys } from '../internal/types.js';
import type { FilterExpression } from '../operations/filter/types.js';
export declare class FilterController<T extends object> implements ReactiveController {
    #private;
    protected host: GridHost<T>;
    constructor(host: GridHost<T>);
    state: FilterState<T>;
    get filterRow(): import("../components/filter-row.js").default<T>;
    hostConnected(): void;
    hostUpdate(): void;
    get(key: Keys<T>): import("../operations/filter/tree.js").FilterExpressionTree<T> | undefined;
    reset(key?: Keys<T>): void;
    setActiveColumn(column?: ColumnConfiguration<T>): void;
    getDefaultExpression(column: ColumnConfiguration<T>): FilterExpression<T>;
    removeAllExpressions(key: Keys<T>): Promise<void>;
    removeExpression(expression: FilterExpression<T>): Promise<void>;
    filterWithEvent(expression: FilterExpression<T>, type: 'add' | 'modify' | 'remove'): Promise<void>;
    filter(expression: FilterExpression<T> | FilterExpression<T>[]): void;
}
//# sourceMappingURL=filter.d.ts.map