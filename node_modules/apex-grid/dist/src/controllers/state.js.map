{"version":3,"file":"state.js","sourceRoot":"","sources":["../../../src/controllers/state.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAC/C,OAAO,EAAE,oBAAoB,EAAE,MAAM,iBAAiB,CAAC;AACvD,OAAO,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAC3C,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAG/C,MAAM,OAAO,eAAe;IAM1B,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;IAChC,CAAC;IAED,IAAW,MAAM,CAAC,IAAmB;QACnC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC;IAChC,CAAC;IAED,IAAW,SAAS;QAClB,6CAA6C;QAC7C,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;IAC7B,CAAC;IAED,IAAW,eAAe;QACxB,6CAA6C;QAC7C,OAAO,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC;IACnC,CAAC;IAED,YAAmB,IAAiB;QAAjB,SAAI,GAAJ,IAAI,CAAa;QAClC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAES,IAAI;QACZ,IAAI,CAAC,OAAO,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,SAAS,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,UAAU,GAAG,IAAI,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtD,IAAI,CAAC,QAAQ,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;IAEM,aAAa,KAAI,CAAC;IAElB,UAAU;;QACf,MAAA,IAAI,CAAC,SAAS,0CAAE,aAAa,EAAE,CAAC;QAChC,MAAA,IAAI,CAAC,eAAe,0CAAE,aAAa,EAAE,CAAC;IACxC,CAAC;CACF;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,aAAa,CAAuB,qBAAqB,CAAC,CAAC","sourcesContent":["import { ReactiveController } from 'lit';\nimport { createContext } from '@lit-labs/context';\nimport { FilterController } from './filter.js';\nimport { NavigationController } from './navigation.js';\nimport { SortController } from './sort.js';\nimport { ResizeController } from './resize.js';\nimport type { ActiveNode, GridHost } from '../internal/types.js';\n\nexport class StateController<T extends object> implements ReactiveController {\n  public sorting!: SortController<T>;\n  public filtering!: FilterController<T>;\n  public navigation!: NavigationController<T>;\n  public resizing!: ResizeController<T>;\n\n  public get active() {\n    return this.navigation.active;\n  }\n\n  public set active(node: ActiveNode<T>) {\n    this.navigation.active = node;\n  }\n\n  public get headerRow() {\n    // @ts-expect-error - Protected member access\n    return this.host.headerRow;\n  }\n\n  public get scrollContainer() {\n    // @ts-expect-error - Protected member access\n    return this.host.scrollContainer;\n  }\n\n  constructor(public host: GridHost<T>) {\n    this.host.addController(this);\n    this.init();\n  }\n\n  protected init() {\n    this.sorting = new SortController(this.host);\n    this.filtering = new FilterController(this.host);\n    this.navigation = new NavigationController(this.host);\n    this.resizing = new ResizeController(this.host);\n  }\n\n  public hostConnected() {}\n\n  public hostUpdate(): void {\n    this.headerRow?.requestUpdate();\n    this.scrollContainer?.requestUpdate();\n  }\n}\n\nexport const gridStateContext = createContext<StateController<any>>('gridStateController');\n"]}