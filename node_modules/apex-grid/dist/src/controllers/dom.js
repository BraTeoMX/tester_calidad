var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _GridDOMController_initialSize;
import { html } from 'lit';
import { styleMap } from 'lit/directives/style-map.js';
import { applyColumnWidths } from '../internal/utils.js';
import { registerGridIcons } from '../internal/icon-registry.js';
export class GridDOMController {
    constructor(host, state) {
        this.host = host;
        this.state = state;
        _GridDOMController_initialSize.set(this, () => {
            setTimeout(() => this.setScrollOffset());
        });
        this.columnSizes = {};
        this.rowRenderer = (data, index) => {
            return html `<apex-grid-row
      part="row"
      style=${styleMap({ ...this.columnSizes, ...this.getActiveRowStyles(index) })}
      .index=${index}
      .activeNode=${this.state.active}
      .data=${data}
      .columns=${this.host.columns}
    ></apex-grid-row>`;
        };
        this.host.addController(this);
    }
    get container() {
        // @ts-expect-error: protected member access
        return this.host.scrollContainer;
    }
    async hostConnected() {
        registerGridIcons();
        this.setGridColumnSizes();
        // Wait for the initial paint of the virtualizer and recalculate the scrollbar offset
        // for the next one
        await this.host.updateComplete;
        this.container.addEventListener('visibilityChanged', __classPrivateFieldGet(this, _GridDOMController_initialSize, "f"), { once: true });
    }
    hostUpdate() {
        this.setScrollOffset();
        this.setGridColumnSizes();
    }
    setScrollOffset() {
        const size = this.container ? this.container.offsetWidth - this.container.clientWidth : 0;
        this.host.style.setProperty('--scrollbar-offset', `${size}px`);
    }
    setGridColumnSizes() {
        this.columnSizes = applyColumnWidths(this.host.columns);
    }
    getActiveRowStyles(index) {
        const { row } = this.state.active;
        return row === index ? { 'z-index': '3' } : {};
    }
}
_GridDOMController_initialSize = new WeakMap();
//# sourceMappingURL=dom.js.map