import { ReactiveController } from 'lit';
import type { ActiveNode, GridHost, Keys } from '../internal/types.js';
export declare class NavigationController<T extends object> implements ReactiveController {
    protected host: GridHost<T>;
    protected handlers: Map<string, (() => void) | (() => void) | (() => void) | (() => void) | (() => void) | (() => void)>;
    protected get virtualizer(): import("../components/virtualizer.js").default;
    protected state: Map<import("../internal/types.js").NavigationState, ActiveNode<any>>;
    protected _active: Readonly<ActiveNode<any>>;
    protected get nextNode(): ActiveNode<T>;
    protected get columns(): import("../internal/types.js").ColumnConfiguration<T, keyof T>[];
    protected get firstColumn(): (keyof T & string) | (keyof T & number) | (keyof T & symbol);
    protected getPreviousColumn(key: Keys<T>): (keyof T & string) | (keyof T & number) | (keyof T & symbol);
    protected getNextColumn(key: Keys<T>): (keyof T & string) | (keyof T & number) | (keyof T & symbol);
    protected scrollToCell(node: ActiveNode<T>): void;
    get active(): ActiveNode<T>;
    set active(node: ActiveNode<T>);
    constructor(host: GridHost<T>);
    protected home(): void;
    protected end(): void;
    protected arrowDown(): void;
    protected arrowUp(): void;
    protected arrowLeft(): void;
    protected arrowRight(): void;
    hostConnected(): void;
    hostDisconnected(): void;
    navigate(event: KeyboardEvent): void;
}
//# sourceMappingURL=navigation.d.ts.map