var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FilterController_instances, _FilterController_virtualizer_get, _FilterController_emitFilteringEvent, _FilterController_emitFilteredEvent, _FilterController_filter;
import { PIPELINE } from '../internal/constants.js';
import { asArray, getFilterOperandsFor } from '../internal/utils.js';
import { FilterState } from '../operations/filter/state.js';
export class FilterController {
    constructor(host) {
        _FilterController_instances.add(this);
        this.host = host;
        this.state = new FilterState();
        this.host.addController(this);
    }
    get filterRow() {
        // @ts-expect-error - protected access
        return this.host.filterRow;
    }
    hostConnected() { }
    hostUpdate() {
        var _a;
        (_a = this.filterRow) === null || _a === void 0 ? void 0 : _a.requestUpdate();
    }
    get(key) {
        return this.state.get(key);
    }
    reset(key) {
        key ? this.state.delete(key) : this.state.clear();
    }
    setActiveColumn(column) {
        var _a;
        if ((column === null || column === void 0 ? void 0 : column.filter) && ((_a = this.filterRow) === null || _a === void 0 ? void 0 : _a.active)) {
            this.filterRow.column = column;
            this.filterRow.expression = this.getDefaultExpression(column);
            this.host.requestUpdate();
        }
    }
    getDefaultExpression(column) {
        var _a;
        const caseSensitive = typeof column.filter === 'boolean' ? false : Boolean((_a = column.filter) === null || _a === void 0 ? void 0 : _a.caseSensitive);
        const operands = getFilterOperandsFor(column);
        const keys = Object.keys(operands);
        // XXX: Types
        return {
            key: column.key,
            condition: operands[keys[0]],
            caseSensitive,
        };
    }
    async removeAllExpressions(key) {
        var _a, _b, _c, _d;
        const state = (_b = (_a = this.get(key)) === null || _a === void 0 ? void 0 : _a.all) !== null && _b !== void 0 ? _b : [];
        if (!this.host.emitEvent('filtering', {
            detail: {
                key,
                expressions: state,
                type: 'remove',
            },
            cancelable: true,
        })) {
            return;
        }
        this.reset(key);
        __classPrivateFieldGet(this, _FilterController_instances, "m", _FilterController_filter).call(this, []);
        await this.host.updateComplete;
        __classPrivateFieldGet(this, _FilterController_instances, "m", _FilterController_emitFilteredEvent).call(this, { key, state: (_d = (_c = this.get(key)) === null || _c === void 0 ? void 0 : _c.all) !== null && _d !== void 0 ? _d : [] });
    }
    async removeExpression(expression) {
        var _a;
        const state = this.get(expression.key);
        if (!__classPrivateFieldGet(this, _FilterController_instances, "m", _FilterController_emitFilteringEvent).call(this, expression, 'remove')) {
            return;
        }
        state === null || state === void 0 ? void 0 : state.remove(expression);
        if (state === null || state === void 0 ? void 0 : state.empty) {
            this.reset(state.key);
        }
        __classPrivateFieldGet(this, _FilterController_instances, "m", _FilterController_filter).call(this, []);
        await this.host.updateComplete;
        __classPrivateFieldGet(this, _FilterController_instances, "m", _FilterController_emitFilteredEvent).call(this, { key: expression.key, state: (_a = state === null || state === void 0 ? void 0 : state.all) !== null && _a !== void 0 ? _a : [] });
    }
    async filterWithEvent(expression, type) {
        var _a, _b;
        if (!__classPrivateFieldGet(this, _FilterController_instances, "m", _FilterController_emitFilteringEvent).call(this, expression, type)) {
            return;
        }
        __classPrivateFieldGet(this, _FilterController_instances, "m", _FilterController_filter).call(this, expression);
        await this.host.updateComplete;
        __classPrivateFieldGet(this, _FilterController_instances, "m", _FilterController_emitFilteredEvent).call(this, { key: expression.key, state: (_b = (_a = this.get(expression.key)) === null || _a === void 0 ? void 0 : _a.all) !== null && _b !== void 0 ? _b : [] });
    }
    filter(expression) {
        __classPrivateFieldGet(this, _FilterController_instances, "m", _FilterController_filter).call(this, asArray(expression).map(expr => Object.assign(this.getDefaultExpression(this.host.getColumn(expr.key)), expr)));
    }
}
_FilterController_instances = new WeakSet(), _FilterController_virtualizer_get = function _FilterController_virtualizer_get() {
    // @ts-expect-error - protected access
    return this.host.scrollContainer;
}, _FilterController_emitFilteringEvent = function _FilterController_emitFilteringEvent(expression, type) {
    return this.host.emitEvent('filtering', {
        detail: {
            key: expression.key,
            expressions: [expression],
            type,
        },
        cancelable: true,
    });
}, _FilterController_emitFilteredEvent = function _FilterController_emitFilteredEvent(detail) {
    return this.host.emitEvent('filtered', { detail });
}, _FilterController_filter = function _FilterController_filter(expression) {
    var _a;
    asArray(expression).forEach(expr => this.state.set(expr));
    // HACK: In the case where the scrollTop is a large and amount and a big chunk of data is filtered out
    // HACK: the virtualizer can't recalculate its scroll position correctly. Thus, we reset the scrollTop state.
    (_a = __classPrivateFieldGet(this, _FilterController_instances, "a", _FilterController_virtualizer_get)) === null || _a === void 0 ? void 0 : _a.scrollTo({ top: 0 });
    this.host.requestUpdate(PIPELINE);
};
//# sourceMappingURL=filter.js.map