{"version":3,"file":"cell.js","sourceRoot":"","sources":["../../../src/components/cell.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,iBAAiB,EAAE,MAAM,yBAAyB,CAAC;AAC5D,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAEpD,OAAO,EAAE,MAAM,EAAE,MAAM,6CAA6C,CAAC;AAGrE;;GAEG;AACH,MAAqB,YAA+B,SAAQ,UAAU;IAAtE;;QAuBE;;;WAGG;QAEI,WAAM,GAAG,KAAK,CAAC;IAqBxB,CAAC;IAhDQ,MAAM,KAAK,EAAE;QAClB,OAAO,aAAa,CAAC;IACvB,CAAC;IAIM,MAAM,CAAC,QAAQ;QACpB,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IA0BD,IAAc,OAAO;QACnB,OAAO;YACL,MAAM,EAAE,IAAI;YACZ,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,KAAK,EAAE,IAAI,CAAC,KAAK;SACe,CAAC;IACrC,CAAC;IAEkB,MAAM;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY;YAC7B,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,OAAoC,CAAC;YACrE,CAAC,CAAC,IAAI,CAAA,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;IAC1B,CAAC;;AA3CsB,mBAAM,GAAG,MAAM,AAAT,CAAU;AAUhC;IADN,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;2CACA;AAMxB;IADN,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;4CACQ;AAOhC;IADN,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;4CACrB;eA5BH,YAAY","sourcesContent":["import { html, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { registerComponent } from '../internal/register.js';\nimport { GRID_CELL_TAG } from '../internal/tags.js';\nimport type { ApexCellContext, ColumnConfiguration, PropertyType } from '../internal/types.js';\nimport { styles } from '../styles/body-cell/body-cell-styles.css.js';\nimport type ApexGridRow from './row.js';\n\n/**\n * Component representing a DOM cell of the Apex grid.\n */\nexport default class ApexGridCell<T extends object> extends LitElement {\n  public static get is() {\n    return GRID_CELL_TAG;\n  }\n\n  public static override styles = styles;\n\n  public static register() {\n    registerComponent(this);\n  }\n\n  /**\n   * The value which will be rendered by the component.\n   */\n  @property({ attribute: false })\n  public value!: PropertyType<T>;\n\n  /**\n   * A reference to the column configuration object.\n   */\n  @property({ attribute: false })\n  public column!: ColumnConfiguration<T>;\n\n  /**\n   * Indicates whether this is the active cell in the grid.\n   *\n   */\n  @property({ type: Boolean, reflect: true })\n  public active = false;\n\n  /**\n   * The parent row component holding this cell.\n   */\n  public row!: ApexGridRow<T>;\n\n  protected get context(): ApexCellContext<T> {\n    return {\n      parent: this,\n      row: this.row,\n      column: this.column,\n      value: this.value,\n    } as unknown as ApexCellContext<T>;\n  }\n\n  protected override render() {\n    return this.column.cellTemplate\n      ? this.column.cellTemplate(this.context as ApexCellContext<T> as any)\n      : html`${this.value}`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    [ApexGridCell.is]: ApexGridCell<object>;\n  }\n}\n"]}