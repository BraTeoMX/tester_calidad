var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ApexFilterRow_instances, _ApexFilterRow_setDefaultExpression, _ApexFilterRow_removeExpression, _ApexFilterRow_show, _ApexFilterRow_handleConditionChanged, _ApexFilterRow_handleInput, _ApexFilterRow_handleKeydown, _ApexFilterRow_handleResetClick, _ApexFilterRow_openDropdownList, _ApexFilterRow_chipCriteriaFor, _ApexFilterRow_chipSelectFor, _ApexFilterRow_chipRemoveFor;
import { html, LitElement, nothing } from 'lit';
import { consume } from '@lit-labs/context';
import { property, query } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { gridStateContext } from '../controllers/state.js';
import { DEFAULT_COLUMN_CONFIG } from '../internal/constants.js';
import { GRID_FILTER_ROW_TAG } from '../internal/tags.js';
import { getFilterOperandsFor } from '../internal/utils.js';
import { registerComponent } from '../internal/register.js';
import { watch } from '../internal/watch.js';
import { styles } from '../styles/filter-row/filter-row-styles.css.js';
import { IgcInputComponent, IgcDropdownComponent, } from 'igniteui-webcomponents';
function prefixedIcon(icon) {
    return html `<igc-icon
    slot="prefix"
    name=${ifDefined(icon)}
    collection="internal"
  ></igc-icon>`;
}
class ApexFilterRow extends LitElement {
    constructor() {
        super(...arguments);
        _ApexFilterRow_instances.add(this);
        this.active = false;
        this.column = DEFAULT_COLUMN_CONFIG;
    }
    static get is() {
        return GRID_FILTER_ROW_TAG;
    }
    static register() {
        registerComponent(this);
    }
    get isNumeric() {
        return this.column.type === 'number';
    }
    get filterController() {
        return this.state.filtering;
    }
    get condition() {
        return this.expression.condition;
    }
    activeChanged() {
        this.style.display = this.active ? 'flex' : '';
        if (!this.active) {
            this.column = DEFAULT_COLUMN_CONFIG;
        }
        this.state.host.requestUpdate();
    }
    renderCriteriaButton(expr, index) {
        return index
            ? html `<igc-button
          variant="flat"
          @click=${__classPrivateFieldGet(this, _ApexFilterRow_instances, "m", _ApexFilterRow_chipCriteriaFor).call(this, expr)}
        >
          ${expr.criteria}
        </igc-button>`
            : nothing;
    }
    renderExpressionChip(props) {
        const { name, unary } = props.expression.condition;
        const { searchTerm: term } = props.expression;
        const prefix = html `<span slot="select"></span>${prefixedIcon(name)}`;
        return html `<igc-chip
      selectable
      removable
      ?selected=${props.selected}
      @igcRemove=${props.onRemove}
      @igcSelect=${props.onSelect}
    >
      ${prefix}${unary ? name : term}
    </igc-chip>`;
    }
    renderActiveChips() {
        const state = this.filterController.get(this.column.key);
        return !state
            ? nothing
            : Array.from(state).map((expression, idx) => {
                const props = {
                    expression,
                    selected: this.expression === expression,
                    onRemove: __classPrivateFieldGet(this, _ApexFilterRow_instances, "m", _ApexFilterRow_chipRemoveFor).call(this, expression),
                    onSelect: __classPrivateFieldGet(this, _ApexFilterRow_instances, "m", _ApexFilterRow_chipSelectFor).call(this, expression),
                };
                return html `${this.renderCriteriaButton(expression, idx)}${this.renderExpressionChip(props)}`;
            });
    }
    renderFilterActions() {
        return html `
      <igc-button
        id="reset"
        variant="flat"
        @click=${__classPrivateFieldGet(this, _ApexFilterRow_instances, "m", _ApexFilterRow_handleResetClick)}
      >
        ${prefixedIcon('refresh')} Reset
      </igc-button>
      <igc-button
        id="close"
        variant="flat"
        @click=${() => (this.active = false)}
      >
        ${prefixedIcon('close')} Close
      </igc-button>
    `;
    }
    renderDropdown() {
        return html `<igc-dropdown
      flip
      same-width
      @igcChange=${__classPrivateFieldGet(this, _ApexFilterRow_instances, "m", _ApexFilterRow_handleConditionChanged)}
    >
      ${Object.entries(getFilterOperandsFor(this.column)).map(([key, operand]) => {
            var _a;
            return html `
          <igc-dropdown-item
            .value=${key}
            ?selected=${this.condition.name === key}
          >
            ${prefixedIcon(key)}${(_a = operand === null || operand === void 0 ? void 0 : operand.label) !== null && _a !== void 0 ? _a : key}
          </igc-dropdown-item>
        `;
        })}
    </igc-dropdown>`;
    }
    renderDropdownTarget() {
        return html `<igc-icon
      id="condition"
      slot="prefix"
      collection="internal"
      .name=${this.condition.name}
      @click=${__classPrivateFieldGet(this, _ApexFilterRow_instances, "m", _ApexFilterRow_openDropdownList)}
    >
    </igc-icon>`;
    }
    renderInputArea() {
        return html `<igc-input
        outlined
        value=${ifDefined(this.expression.searchTerm)}
        placeholder="Add filter value"
        ?readonly=${this.condition.unary}
        @igcInput=${__classPrivateFieldGet(this, _ApexFilterRow_instances, "m", _ApexFilterRow_handleInput)}
        @keydown=${__classPrivateFieldGet(this, _ApexFilterRow_instances, "m", _ApexFilterRow_handleKeydown)}
      >
        ${this.renderDropdownTarget()}
      </igc-input>
      ${this.renderDropdown()}`;
    }
    renderActiveState() {
        return html `<div part="active-state">
      <div part="filter-row-input">${this.renderInputArea()}</div>
      <div part="filter-row-filters">${this.renderActiveChips()}</div>
      <div part="filter-row-actions">${this.renderFilterActions()}</div>
    </div> `;
    }
    renderInactiveChips(column, state) {
        return Array.from(state).map((expression, idx) => {
            const props = {
                expression,
                selected: false,
                onRemove: __classPrivateFieldGet(this, _ApexFilterRow_instances, "m", _ApexFilterRow_chipRemoveFor).call(this, expression),
                onSelect: (e) => {
                    e.stopPropagation();
                    this.column = column;
                    this.expression = expression;
                    __classPrivateFieldGet(this, _ApexFilterRow_instances, "m", _ApexFilterRow_show).call(this);
                },
            };
            return html `${this.renderCriteriaButton(expression, idx)}${this.renderExpressionChip(props)}`;
        });
    }
    renderFilterState(column) {
        const state = this.filterController.get(column.key);
        const partial = state && state.length < 3;
        const hidden = state && state.length >= 3;
        const open = () => {
            this.column = column;
            __classPrivateFieldGet(this, _ApexFilterRow_instances, "m", _ApexFilterRow_setDefaultExpression).call(this);
            __classPrivateFieldGet(this, _ApexFilterRow_instances, "m", _ApexFilterRow_show).call(this);
        };
        const count = hidden ? html `<span slot="suffix">${state.length}</span>` : nothing;
        const chip = html `<igc-chip
      data-column=${column.key}
      @click=${open}
      >${prefixedIcon('filter')}Filter${count}</igc-chip
    >`;
        return partial ? this.renderInactiveChips(column, state) : chip;
    }
    renderInactiveState() {
        return this.state.host.columns.map(column => column.hidden
            ? nothing
            : html `<div part="filter-row-preview">
            ${column.filter ? this.renderFilterState(column) : nothing}
          </div>`);
    }
    render() {
        return html `${this.active ? this.renderActiveState() : this.renderInactiveState()}`;
    }
}
_ApexFilterRow_instances = new WeakSet(), _ApexFilterRow_setDefaultExpression = function _ApexFilterRow_setDefaultExpression() {
    this.expression = this.filterController.getDefaultExpression(this.column);
}, _ApexFilterRow_removeExpression = function _ApexFilterRow_removeExpression(expression) {
    this.filterController.removeExpression(expression);
}, _ApexFilterRow_show = async function _ApexFilterRow_show() {
    var _a;
    this.active = true;
    await this.updateComplete;
    (_a = this.input) === null || _a === void 0 ? void 0 : _a.select();
}, _ApexFilterRow_handleConditionChanged = function _ApexFilterRow_handleConditionChanged(event) {
    event.stopPropagation();
    const key = event.detail.value;
    // XXX: Types
    this.expression.condition = getFilterOperandsFor(this.column)[key];
    if (this.input.value || this.expression.condition.unary) {
        this.filterController.filterWithEvent(this.expression, 'modify');
    }
    this.requestUpdate();
}, _ApexFilterRow_handleInput = function _ApexFilterRow_handleInput(event) {
    var _a;
    event.stopPropagation();
    const value = this.isNumeric ? parseFloat(event.detail) : event.detail;
    const shouldUpdate = this.isNumeric ? !isNaN(value) : !!value;
    const type = ((_a = this.filterController.get(this.expression.key)) === null || _a === void 0 ? void 0 : _a.has(this.expression))
        ? 'modify'
        : 'add';
    if (shouldUpdate) {
        this.expression.searchTerm = value;
        this.filterController.filterWithEvent(this.expression, type);
    }
    else {
        __classPrivateFieldGet(this, _ApexFilterRow_instances, "m", _ApexFilterRow_removeExpression).call(this, this.expression);
    }
    this.requestUpdate();
}, _ApexFilterRow_handleKeydown = function _ApexFilterRow_handleKeydown(event) {
    event.stopPropagation();
    switch (event.key) {
        case 'Enter':
            this.input.value = '';
            __classPrivateFieldGet(this, _ApexFilterRow_instances, "m", _ApexFilterRow_setDefaultExpression).call(this);
            return;
        case 'Escape':
            this.active = false;
            return;
        default:
            return;
    }
}, _ApexFilterRow_handleResetClick = function _ApexFilterRow_handleResetClick() {
    this.filterController.removeAllExpressions(this.column.key);
    this.requestUpdate();
}, _ApexFilterRow_openDropdownList = function _ApexFilterRow_openDropdownList() {
    this.dropdown.toggle(this.input);
}, _ApexFilterRow_chipCriteriaFor = function _ApexFilterRow_chipCriteriaFor(expression) {
    return async (e) => {
        e.stopPropagation();
        expression.criteria = expression.criteria === 'and' ? 'or' : 'and';
        this.filterController.filterWithEvent(expression, 'modify');
        this.requestUpdate();
    };
}, _ApexFilterRow_chipSelectFor = function _ApexFilterRow_chipSelectFor(expression) {
    return async (e) => {
        var _a;
        e.stopPropagation();
        this.expression = expression;
        await this.updateComplete;
        (_a = this.input) === null || _a === void 0 ? void 0 : _a.select();
    };
}, _ApexFilterRow_chipRemoveFor = function _ApexFilterRow_chipRemoveFor(expression) {
    return async (e) => {
        e.stopPropagation();
        __classPrivateFieldGet(this, _ApexFilterRow_instances, "m", _ApexFilterRow_removeExpression).call(this, expression);
        if (this.active && this.expression === expression) {
            __classPrivateFieldGet(this, _ApexFilterRow_instances, "m", _ApexFilterRow_setDefaultExpression).call(this);
            await this.updateComplete;
            this.input.focus();
        }
        this.requestUpdate();
    };
};
ApexFilterRow.styles = styles;
__decorate([
    consume({ context: gridStateContext, subscribe: true }),
    property({ attribute: false })
], ApexFilterRow.prototype, "state", void 0);
__decorate([
    property({ attribute: false })
], ApexFilterRow.prototype, "active", void 0);
__decorate([
    query(IgcInputComponent.tagName)
], ApexFilterRow.prototype, "input", void 0);
__decorate([
    query('#condition')
], ApexFilterRow.prototype, "conditionElement", void 0);
__decorate([
    query(IgcDropdownComponent.tagName)
], ApexFilterRow.prototype, "dropdown", void 0);
__decorate([
    property({ attribute: false })
], ApexFilterRow.prototype, "column", void 0);
__decorate([
    property({ attribute: false })
], ApexFilterRow.prototype, "expression", void 0);
__decorate([
    watch('active', { waitUntilFirstUpdate: true })
], ApexFilterRow.prototype, "activeChanged", null);
export default ApexFilterRow;
//# sourceMappingURL=filter-row.js.map