var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ApexGridHeaderRow_instances, _ApexGridHeaderRow_activeFilterColumn;
import { html, LitElement, nothing } from 'lit';
import { consume } from '@lit-labs/context';
import { property, queryAll } from 'lit/decorators.js';
import { map } from 'lit/directives/map.js';
import { gridStateContext } from '../controllers/state.js';
import { partNameMap } from '../internal/part-map.js';
import { GRID_HEADER_ROW_TAG } from '../internal/tags.js';
import { registerComponent } from '../internal/register.js';
import ApexGridHeader from './header.js';
import { styles } from '../styles/header-row/header-row.base-styles.css.js';
class ApexGridHeaderRow extends LitElement {
    static get is() {
        return GRID_HEADER_ROW_TAG;
    }
    static register() {
        registerComponent(this, [ApexGridHeader]);
    }
    get headers() {
        return Array.from(this._headers);
    }
    constructor() {
        super();
        _ApexGridHeaderRow_instances.add(this);
        this.columns = [];
        this.addEventListener('click', __classPrivateFieldGet(this, _ApexGridHeaderRow_instances, "m", _ApexGridHeaderRow_activeFilterColumn));
    }
    connectedCallback() {
        super.connectedCallback();
        this.setAttribute('tabindex', '0');
    }
    shouldUpdate(props) {
        this.headers.forEach(header => header.requestUpdate());
        return super.shouldUpdate(props);
    }
    render() {
        const filterRow = this.state.filtering.filterRow;
        return html `${map(this.columns, column => column.hidden
            ? nothing
            : html `<apex-grid-header
            part=${partNameMap({
                filtered: column === (filterRow === null || filterRow === void 0 ? void 0 : filterRow.column),
            })}
            .column=${column}
          ></apex-grid-header>`)}`;
    }
}
_ApexGridHeaderRow_instances = new WeakSet(), _ApexGridHeaderRow_activeFilterColumn = function _ApexGridHeaderRow_activeFilterColumn(event) {
    const header = event
        .composedPath()
        .filter(target => target instanceof ApexGridHeader)
        .at(0);
    this.state.filtering.setActiveColumn(header === null || header === void 0 ? void 0 : header.column);
};
ApexGridHeaderRow.styles = styles;
__decorate([
    queryAll(ApexGridHeader.is)
], ApexGridHeaderRow.prototype, "_headers", void 0);
__decorate([
    consume({ context: gridStateContext, subscribe: true }),
    property({ attribute: false })
], ApexGridHeaderRow.prototype, "state", void 0);
__decorate([
    property({ attribute: false })
], ApexGridHeaderRow.prototype, "columns", void 0);
export default ApexGridHeaderRow;
//# sourceMappingURL=header-row.js.map