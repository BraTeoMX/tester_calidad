var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ApexGridHeader_instances, _ApexGridHeader_addResizeEventHandlers, _ApexGridHeader_handleClick, _ApexGridHeader_handleResize, _ApexGridHeader_handleResizeStart, _ApexGridHeader_handlePointerLost, _ApexGridHeader_handleAutosize;
import { html, LitElement, nothing } from 'lit';
import { property } from 'lit/decorators.js';
import { consume } from '@lit-labs/context';
import { partNameMap } from '../internal/part-map.js';
import { GRID_HEADER_TAG } from '../internal/tags.js';
import { registerComponent } from '../internal/register.js';
import { MIN_COL_RESIZE_WIDTH, SORT_ICON_ASCENDING, SORT_ICON_DESCENDING, } from '../internal/constants.js';
import { gridStateContext } from '../controllers/state.js';
import { styles } from '../styles/header-cell/header-cell-styles.css.js';
class ApexGridHeader extends LitElement {
    constructor() {
        super(...arguments);
        _ApexGridHeader_instances.add(this);
        _ApexGridHeader_handleResize.set(this, ({ clientX }) => {
            const { left } = this.getBoundingClientRect();
            const width = Math.max(clientX - left, MIN_COL_RESIZE_WIDTH);
            const x = this.offsetLeft + width;
            this.resizeController.resize(this.column, width, x);
        });
        _ApexGridHeader_handlePointerLost.set(this, () => {
            this.resizeController.indicatorActive = false;
            this.removeEventListener('pointermove', __classPrivateFieldGet(this, _ApexGridHeader_handleResize, "f"));
            this.resizeController.stop();
        });
        _ApexGridHeader_handleAutosize.set(this, () => this.resizeController.autosize(this.column, this));
    }
    static get is() {
        return GRID_HEADER_TAG;
    }
    static register() {
        registerComponent(this);
    }
    get context() {
        return {
            parent: this,
            column: this.column,
        };
    }
    get isSortable() {
        return Boolean(this.column.sort);
    }
    get resizeController() {
        return this.state.resizing;
    }
    renderSortPart() {
        const state = this.state.sorting.state.get(this.column.key);
        const idx = Array.from(this.state.sorting.state.values()).indexOf(state);
        const attr = this.state.host.sortConfiguration.multiple
            ? idx > -1
                ? idx + 1
                : nothing
            : nothing;
        const icon = state
            ? state.direction === 'ascending'
                ? SORT_ICON_ASCENDING
                : SORT_ICON_DESCENDING
            : SORT_ICON_ASCENDING;
        return state || this.isSortable
            ? html `<span
          part=${partNameMap({ action: true, sorted: !!(state === null || state === void 0 ? void 0 : state.direction) })}
          @click=${this.isSortable ? __classPrivateFieldGet(this, _ApexGridHeader_instances, "m", _ApexGridHeader_handleClick) : nothing}
        >
          <igc-icon
            part=${partNameMap({ 'sorting-action': !!state })}
            data-sortIndex=${attr}
            name=${icon}
            collection="internal"
          ></igc-icon>
        </span>`
            : nothing;
    }
    renderContentPart() {
        var _a;
        const defaultContent = (_a = this.column.headerText) !== null && _a !== void 0 ? _a : this.column.key;
        const template = this.column.headerTemplate;
        return html `
      <span part="title">
        <span>${template ? template(this.context) : html `${defaultContent}`}</span>
      </span>
    `;
    }
    renderResizePart() {
        return this.column.resizable
            ? html `<span
          part="resizable"
          @dblclick=${__classPrivateFieldGet(this, _ApexGridHeader_handleAutosize, "f")}
          @pointerdown=${__classPrivateFieldGet(this, _ApexGridHeader_instances, "m", _ApexGridHeader_handleResizeStart)}
        ></span>`
            : nothing;
    }
    render() {
        return html `
      <div
        part=${partNameMap({
            content: true,
            sortable: this.isSortable,
            resizing: this.resizeController.indicatorActive,
        })}
      >
        ${this.renderContentPart()}
        <div part="actions">${this.renderSortPart()}</div>
      </div>
      ${this.renderResizePart()}
    `;
    }
}
_ApexGridHeader_handleResize = new WeakMap(), _ApexGridHeader_handlePointerLost = new WeakMap(), _ApexGridHeader_handleAutosize = new WeakMap(), _ApexGridHeader_instances = new WeakSet(), _ApexGridHeader_addResizeEventHandlers = function _ApexGridHeader_addResizeEventHandlers() {
    const config = { once: true };
    this.addEventListener('gotpointercapture', () => (this.resizeController.indicatorActive = true), config);
    this.addEventListener('lostpointercapture', __classPrivateFieldGet(this, _ApexGridHeader_handlePointerLost, "f"), config);
    this.addEventListener('pointerup', e => this.releasePointerCapture(e.pointerId), config);
    this.addEventListener('pointermove', __classPrivateFieldGet(this, _ApexGridHeader_handleResize, "f"));
}, _ApexGridHeader_handleClick = function _ApexGridHeader_handleClick(e) {
    e.stopPropagation();
    this.state.sorting.sortFromHeaderClick(this.column);
}, _ApexGridHeader_handleResizeStart = function _ApexGridHeader_handleResizeStart(ev) {
    const { target, pointerId } = ev;
    ev.preventDefault();
    __classPrivateFieldGet(this, _ApexGridHeader_instances, "m", _ApexGridHeader_addResizeEventHandlers).call(this);
    this.resizeController.start(this);
    target.setPointerCapture(pointerId);
};
ApexGridHeader.styles = styles;
__decorate([
    consume({ context: gridStateContext, subscribe: true }),
    property({ attribute: false })
], ApexGridHeader.prototype, "state", void 0);
__decorate([
    property({ attribute: false })
], ApexGridHeader.prototype, "column", void 0);
export default ApexGridHeader;
//# sourceMappingURL=header.js.map