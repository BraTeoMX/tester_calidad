import { LitElement, nothing } from 'lit';
import { StateController } from '../controllers/state.js';
import type { FilterExpressionTree } from '../operations/filter/tree.js';
import type { FilterExpression, FilterOperation } from '../operations/filter/types.js';
import type { ColumnConfiguration } from '../internal/types.js';
import { IgcInputComponent, IgcDropdownComponent, IgcIconComponent } from 'igniteui-webcomponents';
type ExpressionChipProps<T> = {
    expression: FilterExpression<T>;
    selected: boolean;
    onRemove: Function;
    onSelect: Function;
};
export default class ApexFilterRow<T extends object> extends LitElement {
    #private;
    static get is(): "apex-filter-row";
    static styles: import("lit").CSSResult;
    static register(): void;
    state: StateController<T>;
    protected get isNumeric(): boolean;
    protected get filterController(): import("../controllers/filter.js").FilterController<T>;
    protected get condition(): FilterOperation<T>;
    active: boolean;
    input: IgcInputComponent;
    conditionElement: IgcIconComponent;
    dropdown: IgcDropdownComponent;
    column: ColumnConfiguration<T>;
    expression: FilterExpression<T>;
    protected activeChanged(): void;
    protected renderCriteriaButton(expr: FilterExpression<T>, index: number): typeof nothing | import("lit-html").TemplateResult<1>;
    protected renderExpressionChip(props: ExpressionChipProps<T>): import("lit-html").TemplateResult<1>;
    protected renderActiveChips(): typeof nothing | import("lit-html").TemplateResult<1>[];
    protected renderFilterActions(): import("lit-html").TemplateResult<1>;
    protected renderDropdown(): import("lit-html").TemplateResult<1>;
    protected renderDropdownTarget(): import("lit-html").TemplateResult<1>;
    protected renderInputArea(): import("lit-html").TemplateResult<1>;
    protected renderActiveState(): import("lit-html").TemplateResult<1>;
    protected renderInactiveChips(column: ColumnConfiguration<T>, state: FilterExpressionTree<T>): import("lit-html").TemplateResult<1>[];
    protected renderFilterState(column: ColumnConfiguration<T>): import("lit-html").TemplateResult<1> | import("lit-html").TemplateResult<1>[];
    protected renderInactiveState(): (typeof nothing | import("lit-html").TemplateResult<1>)[];
    protected render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        [ApexFilterRow.is]: ApexFilterRow<object>;
    }
}
export {};
//# sourceMappingURL=filter-row.d.ts.map