var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement } from 'lit';
import { property } from 'lit/decorators.js';
import { registerComponent } from '../internal/register.js';
import { GRID_CELL_TAG } from '../internal/tags.js';
import { styles } from '../styles/body-cell/body-cell-styles.css.js';
/**
 * Component representing a DOM cell of the Apex grid.
 */
class ApexGridCell extends LitElement {
    constructor() {
        super(...arguments);
        /**
         * Indicates whether this is the active cell in the grid.
         *
         */
        this.active = false;
    }
    static get is() {
        return GRID_CELL_TAG;
    }
    static register() {
        registerComponent(this);
    }
    get context() {
        return {
            parent: this,
            row: this.row,
            column: this.column,
            value: this.value,
        };
    }
    render() {
        return this.column.cellTemplate
            ? this.column.cellTemplate(this.context)
            : html `${this.value}`;
    }
}
ApexGridCell.styles = styles;
__decorate([
    property({ attribute: false })
], ApexGridCell.prototype, "value", void 0);
__decorate([
    property({ attribute: false })
], ApexGridCell.prototype, "column", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], ApexGridCell.prototype, "active", void 0);
export default ApexGridCell;
//# sourceMappingURL=cell.js.map