{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/internal/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,0CAA0C,CAAC;AAC3E,OAAO,EAAE,cAAc,EAAE,MAAM,yCAAyC,CAAC;AACzE,OAAO,EAAE,cAAc,EAAE,MAAM,yCAAyC,CAAC;AAKzE,iCAAiC;AACjC,MAAM,UAAU,iBAAiB,CAC/B,OAAsC;IAEtC,OAAO;QACL,uBAAuB,EAAE,OAAO;aAC7B,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;aAC5B,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,oBAAoB,CAAC;aACjD,IAAI,CAAC,GAAG,CAAC;KACb,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAmB,IAAiB;;IACrE,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QAChD,MAAM,MAAM,GAAG,MAAA,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,mCAAI,EAAE,CAAC;QAElC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YACzD,MAAM,IAAI,GACR,OAAO,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC;YAC3F,OAAO,EAAE,GAAG,EAAE,IAAI,EAA4B,CAAC;QACjD,CAAC,CAAC,CAAC;KACJ;AACH,CAAC;AAED,MAAM,UAAU,OAAO,CAAI,KAAc;IACvC,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AAChD,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAmB,MAA8B;IACnF,8CAA8C;IAC9C,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,SAAS;YACZ,OAAO,eAAe,CAAC;QACzB,KAAK,QAAQ;YACX,OAAO,cAAc,CAAC;QACxB;YACE,OAAO,cAAc,CAAC;KACzB;AACH,CAAC","sourcesContent":["import { BooleanOperands } from '../operations/filter/operands/boolean.js';\nimport { NumberOperands } from '../operations/filter/operands/number.js';\nimport { StringOperands } from '../operations/filter/operands/string.js';\n\nimport type { StyleInfo } from 'lit/directives/style-map.js';\nimport type { ColumnConfiguration, DataType, GridHost } from './types.js';\n\n// TODO: Revise if this is needed\nexport function applyColumnWidths<T extends object>(\n  columns: Array<ColumnConfiguration<T>>,\n): StyleInfo {\n  return {\n    'grid-template-columns': columns\n      .filter(each => !each.hidden)\n      .map(({ width }) => width ?? 'minmax(136px, 1fr)')\n      .join(' '),\n  };\n}\n\nexport function autoGenerateColumns<T extends object>(grid: GridHost<T>) {\n  if (grid.autoGenerate && grid.columns.length < 1) {\n    const record = grid.data[0] ?? {};\n\n    grid.columns = Object.entries(record).map(([key, value]) => {\n      const type: DataType =\n        typeof value === 'boolean' ? 'boolean' : typeof value === 'number' ? 'number' : 'string';\n      return { key, type } as ColumnConfiguration<T>;\n    });\n  }\n}\n\nexport function asArray<T>(value: T | T[]) {\n  return Array.isArray(value) ? value : [value];\n}\n\nexport function getFilterOperandsFor<T extends object>(column: ColumnConfiguration<T>) {\n  // Check for custom class in the filter config\n  switch (column.type) {\n    case 'boolean':\n      return BooleanOperands;\n    case 'number':\n      return NumberOperands;\n    default:\n      return StringOperands;\n  }\n}\n"]}