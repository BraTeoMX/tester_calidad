{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/operations/base.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,OAAO,OAAgB,aAAa;IAC/B,YAAY,CAAC,MAAS,EAAE,GAAM;QACtC,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC;IAES,WAAW,CAAW,KAAQ,EAAE,aAAuB;QAC/D,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,aAAa,CAAC,CAAC,CAAE,KAAK,CAAC,WAAW,EAAQ,CAAC,CAAC,CAAC,KAAK,CAAC;IAC1F,CAAC;CAGF","sourcesContent":["import type { Keys } from '../internal/types.js';\n\nexport default abstract class DataOperation<T, K extends Keys<T> = Keys<T>> {\n  protected resolveValue(record: T, key: K) {\n    return record[key];\n  }\n\n  protected resolveCase<U = T[K]>(value: U, caseSensitive?: boolean) {\n    return typeof value === 'string' && !caseSensitive ? (value.toLowerCase() as U) : value;\n  }\n\n  public abstract apply(...args: unknown[]): T[];\n}\n"]}