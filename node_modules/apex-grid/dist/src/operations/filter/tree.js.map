{"version":3,"file":"tree.js","sourceRoot":"","sources":["../../../../src/operations/filter/tree.ts"],"names":[],"mappings":"AAGA,MAAM,OAAO,oBAAoB;IAG/B,YAAmB,GAAY;QAAZ,QAAG,GAAH,GAAG,CAAS;QAFrB,aAAQ,GAA+B,EAAE,CAAC;IAElB,CAAC;IAEnC,IAAW,KAAK;QACd,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;IAClC,CAAC;IAED,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;IAC9B,CAAC;IAED,IAAW,GAAG;QACZ,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IACrC,CAAC;IAED,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,CAAC;IAC/D,CAAC;IAED,IAAW,GAAG;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC;IAC9D,CAAC;IAEM,GAAG,CAAC,UAA+B;QACxC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC;IAEM,GAAG,CAAC,UAA+B;QACxC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE;YACxB,UAAU,CAAC,QAAQ,GAAG,KAAK,CAAC;SAC7B;QAED,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YACtC,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/B,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,MAAM,CAAC,UAA+B;QAC3C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC;QAClE,OAAO,IAAI,CAAC;IACd,CAAC;IAES,CAAC,QAAQ;QACjB,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnC,MAAM,OAAO,CAAC;SACf;IACH,CAAC;IAEM,CAAC,MAAM,CAAC,QAAQ,CAAC;QACtB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;CACF","sourcesContent":["import type { Keys } from '../../internal/types.js';\nimport type { FilterExpression } from './types.js';\n\nexport class FilterExpressionTree<T> {\n  protected operands: Array<FilterExpression<T>> = [];\n\n  constructor(public key: Keys<T>) {}\n\n  public get empty() {\n    return this.operands.length < 1;\n  }\n\n  public get length() {\n    return this.operands.length;\n  }\n\n  public get all() {\n    return Array.from(this.iterator());\n  }\n\n  public get ands() {\n    return this.operands.filter(each => each.criteria === 'and');\n  }\n\n  public get ors() {\n    return this.operands.filter(each => each.criteria === 'or');\n  }\n\n  public has(expression: FilterExpression<T>) {\n    return this.operands.includes(expression);\n  }\n\n  public add(expression: FilterExpression<T>) {\n    if (!expression.criteria) {\n      expression.criteria = 'and';\n    }\n\n    if (this.operands.includes(expression)) {\n      return this;\n    }\n\n    this.operands.push(expression);\n    return this;\n  }\n\n  public remove(expression: FilterExpression<T>) {\n    this.operands = this.operands.filter(each => each !== expression);\n    return this;\n  }\n\n  protected *iterator() {\n    for (const operand of this.operands) {\n      yield operand;\n    }\n  }\n\n  public [Symbol.iterator]() {\n    return this.iterator();\n  }\n}\n"]}