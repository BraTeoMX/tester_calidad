{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/operations/filter/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Keys } from '../../internal/types.js';\nimport type { BooleanOperands } from './operands/boolean.js';\nimport type { NumberOperands } from './operands/number.js';\nimport type { StringOperands } from './operands/string.js';\n\n/**\n * Controls how a data record should resolve in a filter operation:\n *  - `'and'` - the record must pass all the conditions.\n *  - `'or'`  - the record must pass at least one condition.\n */\nexport type FilterCriteria = 'and' | 'or';\n\nexport type FilterOperationLogic<T> = (\n  target: T,\n  searchTerm: T,\n  caseSensitive?: boolean,\n) => boolean;\n\nexport interface FilterOperation<T> {\n  name: string;\n  label?: string;\n  unary: boolean;\n  logic: FilterOperationLogic<T>;\n}\n\nexport type FilterOperands<DataType, Operands extends string> = {\n  [key in Operands]: FilterOperation<DataType>;\n};\n\n/**\n * Represents a filter operation for a given column.\n */\nexport interface BaseFilterExpression<T, K extends Keys<T> = Keys<T>> {\n  /**\n   * The target column for the filter operation.\n   */\n  key: K;\n  /**\n   * The filter function which will be executed against the data records.\n   */\n  condition: FilterOperation<T[K]> | OperandKeys<T[K]>;\n\n  /**\n   * The filtering value used in the filter condition function.\n   *\n   * @remarks\n   * Optional for unary conditions.\n   */\n  searchTerm?: T[K];\n  /**\n   * Dictates how this expression should resolve in the filter operation in relation to\n   * other expressions.\n   */\n  criteria?: FilterCriteria;\n  /**\n   * Whether the sort operation should be case sensitive.\n   *\n   * @remarks\n   * If not provided, the value is resolved based on the column filter configuration (if any).\n   */\n  caseSensitive?: boolean;\n}\n\n/**\n * See {@link BaseFilterExpression} for the full documentation.\n */\nexport type FilterExpression<T, K extends Keys<T> = Keys<T>> = K extends Keys<T>\n  ? BaseFilterExpression<T, K>\n  : never;\n\nexport type OperandKeys<Type> = Type extends number\n  ? keyof typeof NumberOperands\n  : Type extends string\n  ? keyof typeof StringOperands\n  : Type extends boolean\n  ? keyof typeof BooleanOperands\n  : Type;\n"]}