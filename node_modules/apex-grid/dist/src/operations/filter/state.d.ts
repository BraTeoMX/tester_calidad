import { FilterExpressionTree } from './tree.js';
import type { Keys } from '../../internal/types.js';
import type { FilterExpression } from './types.js';
export declare class FilterState<T> {
    protected state: Map<Keys<T>, FilterExpressionTree<T>>;
    get empty(): boolean;
    get keys(): (keyof T)[];
    get values(): FilterExpressionTree<T>[];
    get ands(): FilterExpression<T, keyof T>[];
    get ors(): FilterExpression<T, keyof T>[];
    has(key: Keys<T>): boolean;
    get(key: Keys<T>): FilterExpressionTree<T> | undefined;
    delete(key: Keys<T>): boolean;
    clear(): void;
    set(expression: FilterExpression<T>): void;
}
//# sourceMappingURL=state.d.ts.map