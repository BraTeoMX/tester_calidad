{"version":3,"file":"string.js","sourceRoot":"","sources":["../../../../../src/operations/filter/operands/string.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iCAAiC,CAAC;AAC5D,OAAO,EAAE,aAAa,EAAE,MAAM,qCAAqC,CAAC;AAapE,MAAM,CAAC,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAqC;IAC9E,QAAQ,EAAE;QACR,IAAI,EAAE,UAAU;QAChB,KAAK,EAAE,UAAU;QACjB,KAAK,EAAE,KAAK;QACZ,KAAK,EAAE,CAAC,MAAM,EAAE,IAAI,EAAE,aAAc,EAAE,EAAE,CACtC,aAAa,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;KACpF;IACD,cAAc,EAAE;QACd,IAAI,EAAE,gBAAgB;QACtB,KAAK,EAAE,kBAAkB;QACzB,KAAK,EAAE,KAAK;QACZ,KAAK,EAAE,CAAC,MAAM,EAAE,IAAI,EAAE,aAAc,EAAE,EAAE,CACtC,CAAC,aAAa,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;KACrF;IACD,UAAU,EAAE;QACV,IAAI,EAAE,YAAY;QAClB,KAAK,EAAE,aAAa;QACpB,KAAK,EAAE,KAAK;QACZ,KAAK,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,aAAc,EAAE,EAAE,CAC5C,aAAa,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;KAC5F;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,UAAU;QAChB,KAAK,EAAE,WAAW;QAClB,KAAK,EAAE,KAAK;QACZ,KAAK,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,aAAc,EAAE,EAAE,CAC5C,aAAa,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;KAC1F;IACD,MAAM,EAAE;QACN,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,QAAQ;QACf,KAAK,EAAE,KAAK;QACZ,KAAK,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,aAAa,EAAE,EAAE,CAC3C,aAAa,CAAC,MAAM,EAAE,aAAa,CAAC,KAAK,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC;KACpF;IAED,YAAY,EAAE;QACZ,IAAI,EAAE,cAAc;QACpB,KAAK,EAAE,gBAAgB;QACvB,KAAK,EAAE,KAAK;QACZ,KAAK,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,aAAa,EAAE,EAAE,CAC3C,aAAa,CAAC,MAAM,EAAE,aAAa,CAAC,KAAK,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC;KACpF;IAED,KAAK,EAAE;QACL,IAAI,EAAE,OAAO;QACb,KAAK,EAAE,OAAO;QACd,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC;KACzD;IAED,QAAQ,EAAE;QACR,IAAI,EAAE,UAAU;QAChB,KAAK,EAAE,WAAW;QAClB,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC;KACxD;CACF,CAAC,CAAC","sourcesContent":["import { isDefined } from '../../../internal/is-defined.js';\nimport { normalizeCase } from '../../../internal/normalize-case.js';\nimport type { FilterOperands } from '../types.js';\n\nexport type StringKeys =\n  | 'contains'\n  | 'doesNotContain'\n  | 'startsWith'\n  | 'endsWith'\n  | 'equals'\n  | 'doesNotEqual'\n  | 'empty'\n  | 'notEmpty';\n\nexport const StringOperands = Object.freeze<FilterOperands<string, StringKeys>>({\n  contains: {\n    name: 'contains',\n    label: 'Contains',\n    unary: false,\n    logic: (target, term, caseSensitive?) =>\n      normalizeCase(target, caseSensitive).includes(normalizeCase(term, caseSensitive)),\n  },\n  doesNotContain: {\n    name: 'doesNotContain',\n    label: 'Does not contain',\n    unary: false,\n    logic: (target, term, caseSensitive?) =>\n      !normalizeCase(target, caseSensitive).includes(normalizeCase(term, caseSensitive)),\n  },\n  startsWith: {\n    name: 'startsWith',\n    label: 'Starts with',\n    unary: false,\n    logic: (target, searchTerm, caseSensitive?) =>\n      normalizeCase(target, caseSensitive).startsWith(normalizeCase(searchTerm, caseSensitive)),\n  },\n  endsWith: {\n    name: 'endsWith',\n    label: 'Ends with',\n    unary: false,\n    logic: (target, searchTerm, caseSensitive?) =>\n      normalizeCase(target, caseSensitive).endsWith(normalizeCase(searchTerm, caseSensitive)),\n  },\n  equals: {\n    name: 'equals',\n    label: 'Equals',\n    unary: false,\n    logic: (target, searchTerm, caseSensitive) =>\n      normalizeCase(target, caseSensitive) === normalizeCase(searchTerm, caseSensitive),\n  },\n\n  doesNotEqual: {\n    name: 'doesNotEqual',\n    label: 'Does not equal',\n    unary: false,\n    logic: (target, searchTerm, caseSensitive) =>\n      normalizeCase(target, caseSensitive) !== normalizeCase(searchTerm, caseSensitive),\n  },\n\n  empty: {\n    name: 'empty',\n    label: 'Empty',\n    unary: true,\n    logic: target => !isDefined(target) || target.length < 1,\n  },\n\n  notEmpty: {\n    name: 'notEmpty',\n    label: 'Not empty',\n    unary: true,\n    logic: target => isDefined(target) && target.length > 0,\n  },\n});\n"]}