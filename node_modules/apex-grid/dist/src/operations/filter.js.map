{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../../src/operations/filter.ts"],"names":[],"mappings":"AAAA,OAAO,aAAa,MAAM,WAAW,CAAC;AAItC,MAAM,CAAC,OAAO,OAAO,mBAAsC,SAAQ,aAAgB;IACvE,aAAa,CAAC,MAAS,EAAE,IAAyB;QAC1D,MAAM,SAAS,GAAG,IAAI,CAAC,SAA+B,CAAC;QACvD,OAAO,SAAS,CAAC,KAAK;QACpB,aAAa;QACb,6BAA6B;QAC7B,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,EACnC,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,aAAa,CACnB,CAAC;IACJ,CAAC;IAES,KAAK,CAAC,MAAS,EAAE,IAA2B,EAAE,GAA0B;QAChF,KAAK,MAAM,EAAE,IAAI,GAAG,EAAE;YACpB,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,KAAK,CACf,MAAM,EACN,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,CAAC,EAClC,EAAE,CACH,CAAC;aACH;SACF;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC;IAEM,KAAK,CAAC,IAAS,EAAE,KAAqB;QAC3C,IAAI,KAAK,CAAC,KAAK;YAAE,OAAO,IAAI,CAAC;QAE7B,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC;QAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;IAC9D,CAAC;CACF","sourcesContent":["import DataOperation from './base.js';\nimport type { FilterState } from './filter/state.js';\nimport type { FilterExpression, FilterOperation } from './filter/types.js';\n\nexport default class FilterDataOperation<T extends object> extends DataOperation<T> {\n  protected resolveFilter(record: T, expr: FilterExpression<T>) {\n    const condition = expr.condition as FilterOperation<T>;\n    return condition.logic(\n      // XXX: Types\n      // @ts-expect-error - resolve\n      this.resolveValue(record, expr.key),\n      expr.searchTerm,\n      expr.caseSensitive,\n    );\n  }\n\n  protected match(record: T, ands: FilterExpression<T>[], ors: FilterExpression<T>[]): boolean {\n    for (const or of ors) {\n      if (this.resolveFilter(record, or)) {\n        return this.match(\n          record,\n          ands.filter(f => f.key !== or.key),\n          [],\n        );\n      }\n    }\n    return ands.every(f => this.resolveFilter(record, f));\n  }\n\n  public apply(data: T[], state: FilterState<T>): T[] {\n    if (state.empty) return data;\n\n    const { ands, ors } = state;\n    return data.filter(record => this.match(record, ands, ors));\n  }\n}\n"]}