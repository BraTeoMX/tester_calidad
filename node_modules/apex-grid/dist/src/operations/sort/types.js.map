{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/operations/sort/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Keys } from '../../internal/types.js';\n\n/**\n * Sort direction for a given sort expression.\n *\n * @remarks\n * `none` is used\n */\nexport type SortingDirection = 'ascending' | 'descending' | 'none';\n\n/**\n * Custom comparer function for a given column used when sorting is performed.\n */\nexport type BaseSortComparer<T, K extends Keys<T> = Keys<T>> = (a: T[K], b: T[K]) => number;\n\n/**\n * See {@link BaseSortComparer} for the full documentation.\n */\nexport type SortComparer<T, K extends Keys<T> = Keys<T>> = K extends Keys<T>\n  ? BaseSortComparer<T, K>\n  : never;\n\n/**\n * Represents a sort operation for a given column.\n */\nexport interface BaseSortExpression<T, K extends Keys<T> = Keys<T>> {\n  /**\n   * The target column.\n   */\n  key: K;\n  /**\n   * Sort direction for this operation.\n   */\n  direction: SortingDirection;\n  /**\n   * Whether the sort operation should be case sensitive.\n   *\n   * @remarks\n   * If not provided, the value is resolved based on the column sort configuration (if any).\n   */\n  caseSensitive?: boolean;\n  /**\n   * Custom comparer function for this operation.\n   *\n   * @remarks\n   * If not provided, the value is resolved based on the column sort configuration (if any).\n   */\n  comparer?: SortComparer<T, K>;\n}\n\n/**\n * See {@link BaseSortExpression} for the full documentation.\n */\nexport type SortExpression<T, K extends Keys<T> = Keys<T>> = K extends Keys<T>\n  ? BaseSortExpression<T, K>\n  : never;\n\n/** Represents the sort state of the grid. */\nexport type SortState<T> = Map<Keys<T>, SortExpression<T>>;\n"]}