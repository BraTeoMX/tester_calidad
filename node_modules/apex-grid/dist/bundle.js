import { css as b, LitElement as $, html as n, nothing as g } from "lit";
import { createContext as Ne, consume as ne, ContextProvider as Pe } from "@lit-labs/context";
import { property as o, queryAll as oe, query as S, state as He, eventOptions as We } from "lit/decorators.js";
import { styleMap as N } from "lit/directives/style-map.js";
import { map as be } from "lit/directives/map.js";
import { registerIconFromText as Fe, IgcInputComponent as ye, IgcDropdownComponent as xe, defineComponents as Ue, IgcButtonComponent as Be, IgcChipComponent as je, IgcIconComponent as Ge } from "igniteui-webcomponents";
import { LitVirtualizer as Ve } from "@lit-labs/virtualizer/LitVirtualizer.js";
import { ifDefined as fe } from "lit/directives/if-defined.js";
import { themes as Ze } from "igniteui-webcomponents/theming/theming-decorator.js";
const Qe = "apex-grid", Ke = "apex-virtualizer", Xe = "apex-grid-header-row", Ye = "apex-grid-header", Je = "apex-grid-row", et = "apex-grid-cell", tt = "apex-filter-row", it = Symbol(), _ = "pipeline", ue = "arrow-upward", rt = "arrow-downward", we = 80, I = Object.freeze({ column: "", row: -1 }), G = Object.freeze({
  key: it,
  type: "string",
  resizable: !1,
  hidden: !1,
  sort: !1,
  filter: !1
}), ve = /* @__PURE__ */ new Map([
  ["previous", I],
  ["current", I]
]);
function x(t) {
  return t != null;
}
const at = Object.freeze({
  all: {
    name: "all",
    label: "All",
    unary: !0,
    logic: (t) => !0
  },
  true: {
    name: "true",
    label: "True",
    unary: !0,
    logic: (t) => t === !0
  },
  false: {
    name: "false",
    label: "False",
    unary: !0,
    logic: (t) => t === !1
  },
  empty: {
    name: "empty",
    label: "Empty",
    unary: !0,
    logic: (t) => !x(t)
  },
  notEmpty: {
    name: "notEmpty",
    label: "Not empty",
    unary: !0,
    logic: (t) => x(t)
  }
}), st = Object.freeze({
  equals: {
    name: "equals",
    label: "Equals",
    unary: !1,
    logic: (t, e) => t === e
  },
  doesNotEqual: {
    name: "doesNotEqual",
    label: "Does not equal",
    unary: !1,
    logic: (t, e) => t !== e
  },
  greaterThan: {
    name: "greaterThan",
    label: "Greater than",
    unary: !1,
    logic: (t, e) => t > e
  },
  lessThan: {
    name: "lessThan",
    label: "Less than",
    unary: !1,
    logic: (t, e) => t < e
  },
  greaterThanOrEqual: {
    name: "greaterThanOrEqual",
    label: "Greater than or equal",
    unary: !1,
    logic: (t, e) => t >= e
  },
  lessThanOrEqual: {
    name: "lessThanOrEqual",
    label: "Less than or equal",
    unary: !1,
    logic: (t, e) => t <= e
  },
  empty: {
    name: "empty",
    label: "Empty",
    unary: !0,
    logic: (t) => !x(t) || isNaN(t)
  },
  notEmpty: {
    name: "notEmpty",
    label: "Not empty",
    unary: !0,
    logic: (t) => x(t) && !isNaN(t)
  }
});
function m(t, e) {
  return e ? t : t.toLowerCase();
}
const lt = Object.freeze({
  contains: {
    name: "contains",
    label: "Contains",
    unary: !1,
    logic: (t, e, i) => m(t, i).includes(m(e, i))
  },
  doesNotContain: {
    name: "doesNotContain",
    label: "Does not contain",
    unary: !1,
    logic: (t, e, i) => !m(t, i).includes(m(e, i))
  },
  startsWith: {
    name: "startsWith",
    label: "Starts with",
    unary: !1,
    logic: (t, e, i) => m(t, i).startsWith(m(e, i))
  },
  endsWith: {
    name: "endsWith",
    label: "Ends with",
    unary: !1,
    logic: (t, e, i) => m(t, i).endsWith(m(e, i))
  },
  equals: {
    name: "equals",
    label: "Equals",
    unary: !1,
    logic: (t, e, i) => m(t, i) === m(e, i)
  },
  doesNotEqual: {
    name: "doesNotEqual",
    label: "Does not equal",
    unary: !1,
    logic: (t, e, i) => m(t, i) !== m(e, i)
  },
  empty: {
    name: "empty",
    label: "Empty",
    unary: !0,
    logic: (t) => !x(t) || t.length < 1
  },
  notEmpty: {
    name: "notEmpty",
    label: "Not empty",
    unary: !0,
    logic: (t) => x(t) && t.length > 0
  }
});
function nt(t) {
  return {
    "grid-template-columns": t.filter((e) => !e.hidden).map(({ width: e }) => e ?? "minmax(136px, 1fr)").join(" ")
  };
}
function ot(t) {
  if (t.autoGenerate && t.columns.length < 1) {
    const e = t.data[0] ?? {};
    t.columns = Object.entries(e).map(([i, r]) => ({ key: i, type: typeof r == "boolean" ? "boolean" : typeof r == "number" ? "number" : "string" }));
  }
}
function E(t) {
  return Array.isArray(t) ? t : [t];
}
function W(t) {
  switch (t.type) {
    case "boolean":
      return at;
    case "number":
      return st;
    default:
      return lt;
  }
}
class dt {
  constructor(e) {
    this.key = e, this.operands = [];
  }
  get empty() {
    return this.operands.length < 1;
  }
  get length() {
    return this.operands.length;
  }
  get all() {
    return Array.from(this.iterator());
  }
  get ands() {
    return this.operands.filter((e) => e.criteria === "and");
  }
  get ors() {
    return this.operands.filter((e) => e.criteria === "or");
  }
  has(e) {
    return this.operands.includes(e);
  }
  add(e) {
    return e.criteria || (e.criteria = "and"), this.operands.includes(e) ? this : (this.operands.push(e), this);
  }
  remove(e) {
    return this.operands = this.operands.filter((i) => i !== e), this;
  }
  *iterator() {
    for (const e of this.operands)
      yield e;
  }
  [Symbol.iterator]() {
    return this.iterator();
  }
}
class ht {
  constructor() {
    this.state = /* @__PURE__ */ new Map();
  }
  get empty() {
    return this.state.size < 1;
  }
  get keys() {
    return Array.from(this.state.keys());
  }
  get values() {
    return Array.from(this.state.values());
  }
  get ands() {
    return this.values.map((e) => e.ands).flat();
  }
  get ors() {
    return this.values.map((e) => e.ors).flat();
  }
  has(e) {
    return this.state.has(e);
  }
  get(e) {
    return this.state.get(e);
  }
  delete(e) {
    return this.state.delete(e);
  }
  clear() {
    this.state.clear();
  }
  set(e) {
    if (this.has(e.key)) {
      this.get(e.key)?.add(e);
      return;
    }
    this.state.set(e.key, new dt(e.key).add(e));
  }
}
class ct {
  constructor(e) {
    this.host = e, this.state = new ht(), this.host.addController(this);
  }
  get filterRow() {
    return this.host.filterRow;
  }
  get #e() {
    return this.host.scrollContainer;
  }
  #r(e, i) {
    return this.host.emitEvent("filtering", {
      detail: {
        key: e.key,
        expressions: [e],
        type: i
      },
      cancelable: !0
    });
  }
  #i(e) {
    return this.host.emitEvent("filtered", { detail: e });
  }
  #t(e) {
    E(e).forEach((i) => this.state.set(i)), this.#e?.scrollTo({ top: 0 }), this.host.requestUpdate(_);
  }
  hostConnected() {
  }
  hostUpdate() {
    this.filterRow?.requestUpdate();
  }
  get(e) {
    return this.state.get(e);
  }
  reset(e) {
    e ? this.state.delete(e) : this.state.clear();
  }
  setActiveColumn(e) {
    e?.filter && this.filterRow?.active && (this.filterRow.column = e, this.filterRow.expression = this.getDefaultExpression(e), this.host.requestUpdate());
  }
  getDefaultExpression(e) {
    const i = typeof e.filter == "boolean" ? !1 : !!e.filter?.caseSensitive, r = W(e), a = Object.keys(r);
    return {
      key: e.key,
      condition: r[a[0]],
      caseSensitive: i
    };
  }
  async removeAllExpressions(e) {
    const i = this.get(e)?.all ?? [];
    this.host.emitEvent("filtering", {
      detail: {
        key: e,
        expressions: i,
        type: "remove"
      },
      cancelable: !0
    }) && (this.reset(e), this.#t([]), await this.host.updateComplete, this.#i({ key: e, state: this.get(e)?.all ?? [] }));
  }
  async removeExpression(e) {
    const i = this.get(e.key);
    this.#r(e, "remove") && (i?.remove(e), i?.empty && this.reset(i.key), this.#t([]), await this.host.updateComplete, this.#i({ key: e.key, state: i?.all ?? [] }));
  }
  async filterWithEvent(e, i) {
    this.#r(e, i) && (this.#t(e), await this.host.updateComplete, this.#i({ key: e.key, state: this.get(e.key)?.all ?? [] }));
  }
  filter(e) {
    this.#t(
      E(e).map(
        (i) => Object.assign(this.getDefaultExpression(this.host.getColumn(i.key)), i)
      )
    );
  }
}
function w(t, e = []) {
  for (const i of e)
    i.register();
  customElements.get(t.is) || customElements.define(t.is, t);
}
const gt = b`/* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */
:host {
  --is-large: clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-large, 3), 1);
  --is-medium:
      min(
          clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-medium, 2), 1),
          clamp(0, var(--ig-size-large, 3) - var(--component-size, 1), 1)
      );
  --is-small: clamp(0, var(--ig-size-medium) - var(--component-size, 1), 1);
  --component-size: 3;
}

:host {
  position: relative;
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-flex: 1;
      -ms-flex: 1 0 0px;
          flex: 1 0 0;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  padding: 0 max(var(--is-large, 1) * max(1.5rem, -1 * 1.5rem), var(--is-medium, 1) * max(1rem, -1 * 1rem), var(--is-small, 1) * max(0.5rem, -1 * 0.5rem));
  color: inherit;
  border-right: var(--igx-row-border-width, var(--row-border-width)) solid transparent;
  font-size: 0.8125rem;
  overflow-wrap: anywhere;
}
:host:last-of-type {
  border-right: 0;
}

:host([active]) {
  outline: none;
  -webkit-box-shadow: inset 0 0 0 0.0625rem var(--igx-cell-active-border-color, var(--cell-active-border-color));
          box-shadow: inset 0 0 0 0.0625rem var(--igx-cell-active-border-color, var(--cell-active-border-color));
}

:host(:last-child) {
  -webkit-border-end: none;
          border-inline-end: none;
}

igc-input {
  position: absolute;
  left: 0;
  height: calc(100% - 0.0625rem * 2);
  width: 100%;
}
igc-input::part(container), igc-input::part(input) {
  border-color: transparent;
  -webkit-box-shadow: none;
          box-shadow: none;
  height: 100%;
}

igc-input::part(container), igc-input::part(input),
igc-select::part(container),
igc-select::part(input) {
  background: inherit;
  color: inherit;
  font-size: 0.8125rem;
}
igc-input::part(helper-text)::after, igc-input::part(container)::after,
igc-select::part(helper-text)::after,
igc-select::part(container)::after {
  display: none;
}`;
var mt = Object.defineProperty, pt = Object.getOwnPropertyDescriptor, de = (t, e, i, r) => {
  for (var a = r > 1 ? void 0 : r ? pt(e, i) : e, s = t.length - 1, l; s >= 0; s--)
    (l = t[s]) && (a = (r ? l(e, i, a) : l(a)) || a);
  return r && a && mt(e, i, a), a;
};
class z extends $ {
  constructor() {
    super(...arguments), this.active = !1;
  }
  static get is() {
    return et;
  }
  static register() {
    w(this);
  }
  get context() {
    return {
      parent: this,
      row: this.row,
      column: this.column,
      value: this.value
    };
  }
  render() {
    return this.column.cellTemplate ? this.column.cellTemplate(this.context) : n`${this.value}`;
  }
}
z.styles = gt;
de([
  o({ attribute: !1 })
], z.prototype, "value", 2);
de([
  o({ attribute: !1 })
], z.prototype, "column", 2);
de([
  o({ type: Boolean, reflect: !0 })
], z.prototype, "active", 2);
const ut = b`/* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */
:host {
  --is-large: clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-large, 3), 1);
  --is-medium:
      min(
          clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-medium, 2), 1),
          clamp(0, var(--ig-size-large, 3) - var(--component-size, 1), 1)
      );
  --is-small: clamp(0, var(--ig-size-medium) - var(--component-size, 1), 1);
  --component-size: 3;
}

:host {
  display: grid;
  width: 100%;
  min-height: max(var(--is-large, 1) * max(3.125rem, -1 * 3.125rem), var(--is-medium, 1) * max(2.125rem, -1 * 2.125rem), var(--is-small, 1) * max(1.5rem, -1 * 1.5rem));
  -webkit-border-after: var(--igx-row-border-width, var(--header-border-width)) var(--igx-row-border-style, var(--header-border-style)) var(--igx-row-border-color, var(--header-border-color));
          border-block-end: var(--igx-row-border-width, var(--header-border-width)) var(--igx-row-border-style, var(--header-border-style)) var(--igx-row-border-color, var(--header-border-color));
  background: var(--igx-row-odd-background, var(--row-odd-background));
  color: var(--igx-row-odd-text-color, var(--row-odd-text-color));
  z-index: var(--z-index-base);
}

:host(:last-of-type) {
  border-bottom: 0;
}

:host(:nth-of-type(even)) {
  background: var(--igx-row-even-background, var(--row-even-background));
  color: var(--igx-row-even-text-color, var(--row-even-text-color));
}

:host(:hover) {
  background: var(--igx-row-hover-background, var(--row-hover-background));
  color: var(--igx-row-hover-text-color, var(--row-hover-text-color));
}`;
var vt = Object.defineProperty, bt = Object.getOwnPropertyDescriptor, M = (t, e, i, r) => {
  for (var a = r > 1 ? void 0 : r ? bt(e, i) : e, s = t.length - 1, l; s >= 0; s--)
    (l = t[s]) && (a = (r ? l(e, i, a) : l(a)) || a);
  return r && a && vt(e, i, a), a;
};
class y extends $ {
  constructor() {
    super(...arguments), this.columns = [], this.index = -1;
  }
  static get is() {
    return Je;
  }
  static register() {
    w(this, [z]);
  }
  get cells() {
    return Array.from(this._cells);
  }
  connectedCallback() {
    super.connectedCallback(), this.setAttribute("exportparts", "cell");
  }
  render() {
    const { column: e, row: i } = this.activeNode;
    return n`
      ${be(
      this.columns,
      (r) => r.hidden ? g : n`<apex-grid-cell
              part="cell"
              .active=${e === r.key && i === this.index}
              .column=${r}
              .row=${this}
              .value=${this.data[r.key]}
            ></apex-grid-cell>`
    )}
    `;
  }
}
y.styles = ut;
M([
  oe(z.is)
], y.prototype, "_cells", 2);
M([
  o({ attribute: !1 })
], y.prototype, "data", 2);
M([
  o({ attribute: !1 })
], y.prototype, "columns", 2);
M([
  o({ attribute: !1 })
], y.prototype, "activeNode", 2);
M([
  o({ attribute: !1, type: Number })
], y.prototype, "index", 2);
class yt {
  constructor(e) {
    this.host = e, this.handlers = new Map(
      Object.entries({
        ArrowDown: this.arrowDown,
        ArrowUp: this.arrowUp,
        ArrowLeft: this.arrowLeft,
        ArrowRight: this.arrowRight,
        Home: this.home,
        End: this.end
      })
    ), this.state = ve, this._active = I, this.host.addController(this);
  }
  get virtualizer() {
    return this.host.scrollContainer;
  }
  get nextNode() {
    const e = this.state.get("current");
    return e === I ? { column: this.firstColumn, row: 0 } : { ...e };
  }
  get columns() {
    return this.host.columns;
  }
  get firstColumn() {
    return this.host.getColumn(0).key ?? "";
  }
  getPreviousColumn(e) {
    return this.columns[Math.max(this.columns.indexOf(this.host.getColumn(e)) - 1, 0)].key;
  }
  getNextColumn(e) {
    return this.columns[Math.min(this.columns.indexOf(this.host.getColumn(e)) + 1, this.columns.length - 1)].key;
  }
  scrollToCell(e) {
    const i = Array.from(this.virtualizer.querySelectorAll(y.is)).find(
      (r) => r.index === e.row
    );
    i && i.cells.find((r) => r.column.key === e.column)?.scrollIntoView({ block: "nearest" });
  }
  get active() {
    return this._active;
  }
  set active(e) {
    this._active = e, this.state.set("previous", this._active), this.state.set("current", e), this.host.requestUpdate();
  }
  home() {
    this.active = Object.assign(this.nextNode, { row: 0 }), this.virtualizer.element(this.active.row)?.scrollIntoView({ block: "nearest" });
  }
  end() {
    this.active = Object.assign(this.nextNode, { row: this.host.totalItems - 1 }), this.virtualizer.element(this.active.row)?.scrollIntoView({ block: "nearest" });
  }
  arrowDown() {
    const e = this.nextNode;
    this.active = Object.assign(e, {
      row: Math.min(e.row + 1, this.host.totalItems - 1)
    }), this.virtualizer.element(e.row)?.scrollIntoView({ block: "nearest" });
  }
  arrowUp() {
    const e = this.nextNode;
    this.active = Object.assign(e, { row: Math.max(0, e.row - 1) }), this.virtualizer.element(e.row)?.scrollIntoView({ block: "nearest" });
  }
  arrowLeft() {
    const e = this.nextNode;
    this.active = Object.assign(e, { column: this.getPreviousColumn(e.column) }), this.scrollToCell(this.active);
  }
  arrowRight() {
    const e = this.nextNode;
    this.active = Object.assign(e, { column: this.getNextColumn(e.column) }), this.scrollToCell(this.active);
  }
  hostConnected() {
  }
  hostDisconnected() {
    this.active = I, this.state = ve;
  }
  navigate(e) {
    this.handlers.has(e.key) && (e.preventDefault(), this.handlers.get(e.key).call(this));
  }
}
class xt {
  constructor(e) {
    this.host = e, this.state = /* @__PURE__ */ new Map(), this.host.addController(this);
  }
  get #e() {
    return this.host.sortConfiguration.multiple;
  }
  get #r() {
    return this.host.sortConfiguration.triState;
  }
  #i(e) {
    const i = {
      caseSensitive: !1,
      comparer: void 0
    };
    return !e || typeof e == "boolean" ? i : Object.assign(i, {
      caseSensitive: e.caseSensitive,
      comparer: e.comparer
    });
  }
  #t(e) {
    const i = this.host.getColumn(e)?.sort;
    return {
      key: e,
      direction: "ascending",
      ...this.#i(i)
    };
  }
  #a(e) {
    return this.#r ? e === "ascending" ? "descending" : e === "descending" ? "none" : "ascending" : e === "ascending" ? "descending" : "ascending";
  }
  #s(e) {
    return this.host.emitEvent("sorting", { detail: e, cancelable: !0 });
  }
  #l(e) {
    return this.host.emitEvent("sorted", { detail: e });
  }
  #n(e) {
    e.direction === "none" ? this.reset(e.key) : this.state.set(e.key, { ...e });
  }
  async sortFromHeaderClick(e) {
    const i = this.prepareExpression(e);
    this.#s(i) && (this.#e || this.reset(), this._sort(i), await this.host.updateComplete, this.#l(i));
  }
  prepareExpression({ key: e, sort: i }) {
    if (this.state.has(e)) {
      const r = this.state.get(e);
      return Object.assign(r, {
        direction: this.#a(r.direction),
        ...this.#i(i)
      });
    }
    return this.#t(e);
  }
  reset(e) {
    e ? this.state.delete(e) : this.state.clear();
  }
  _sort(e) {
    E(e).forEach((i) => this.#n(i)), this.host.requestUpdate(_);
  }
  sort(e) {
    this._sort(
      E(e).map(
        (i) => Object.assign(this.state.get(i.key) ?? this.#t(i.key), i)
      )
    );
  }
  hostConnected() {
  }
}
class ft {
  constructor(e) {
    this.host = e, this.indicatorActive = !1, this.indicatorOffset = 0, this.host.addController(this);
  }
  #e(e, i) {
    const r = this.host.rows.map((a) => a.cells.find((s) => s.column.key === e)).reduce((a, s) => s.offsetWidth > a ? s.offsetWidth : a, 0);
    return Math.max(we, r, i);
  }
  /**
   * Begins resizing a column by showing and positioning the resize indicator in relation to the column.
   *
   * @param header the
   */
  start(e) {
    this.indicatorActive = !0, this.indicatorOffset = e.offsetLeft + e.offsetWidth, this.host.requestUpdate();
  }
  /**
   * Stops and resets the resizing state.
   */
  stop() {
    this.indicatorActive = !1, this.host.requestUpdate();
  }
  resize(e, i, r) {
    r && (this.indicatorOffset = r), e.width = `${i}px`, this.host.requestUpdate();
  }
  async autosize(e, i) {
    e.width = "max-content", this.host.requestUpdate(), await this.host.updateComplete, e.width = `${this.#e(e.key, i.offsetWidth)}px`, this.host.requestUpdate();
  }
  hostConnected() {
  }
  /**
   * Renders the resize indicator in the grid.
   */
  renderIndicator() {
    return this.indicatorActive ? n`<div
          part="resize-indicator"
          style=${N({
      transform: `translateX(${this.indicatorOffset}px)`
    })}
        ></div>` : g;
  }
}
class wt {
  constructor(e) {
    this.host = e, this.host.addController(this), this.init();
  }
  get active() {
    return this.navigation.active;
  }
  set active(e) {
    this.navigation.active = e;
  }
  get headerRow() {
    return this.host.headerRow;
  }
  get scrollContainer() {
    return this.host.scrollContainer;
  }
  init() {
    this.sorting = new xt(this.host), this.filtering = new ct(this.host), this.navigation = new yt(this.host), this.resizing = new ft(this.host);
  }
  hostConnected() {
  }
  hostUpdate() {
    this.headerRow?.requestUpdate(), this.scrollContainer?.requestUpdate();
  }
}
const F = Ne("gridStateController");
class ze {
  resolveValue(e, i) {
    return e[i];
  }
  resolveCase(e, i) {
    return typeof e == "string" && !i ? e.toLowerCase() : e;
  }
}
class zt extends ze {
  constructor() {
    super(...arguments), this.orderBy = new Map(
      Object.entries({
        ascending: 1,
        descending: -1
      })
    );
  }
  compareValues(e, i) {
    return typeof e == "string" && typeof i == "string" ? e.localeCompare(i) : e > i ? 1 : e < i ? -1 : 0;
  }
  compareObjects(e, i, r) {
    const { direction: a, key: s, caseSensitive: l, comparer: v } = r, C = this.resolveCase(this.resolveValue(e, s), l), pe = this.resolveCase(this.resolveValue(i, s), l);
    return this.orderBy.get(a) * (v?.(C, pe) ?? this.compareValues(C, pe));
  }
  apply(e, i) {
    const r = Array.from(i.values()), a = r.length;
    return e.sort((s, l) => {
      let v = 0, C = 0;
      for (; v < a && !C; )
        C = this.compareObjects(s, l, r[v]), v++;
      return C;
    }), e;
  }
}
class Ct extends ze {
  resolveFilter(e, i) {
    return i.condition.logic(
      // XXX: Types
      // @ts-expect-error - resolve
      this.resolveValue(e, i.key),
      i.searchTerm,
      i.caseSensitive
    );
  }
  match(e, i, r) {
    for (const a of r)
      if (this.resolveFilter(e, a))
        return this.match(
          e,
          i.filter((s) => s.key !== a.key),
          []
        );
    return i.every((a) => this.resolveFilter(e, a));
  }
  apply(e, i) {
    if (i.empty)
      return e;
    const { ands: r, ors: a } = i;
    return e.filter((s) => this.match(s, r, a));
  }
}
class kt {
  constructor(e) {
    this.host = e, this.sorting = new zt(), this.filtering = new Ct(), this.host.addController(this);
  }
  hostConnected() {
  }
  get hasCustomSort() {
    return x(this.host.dataPipelineConfiguration?.sort);
  }
  get hasCustomFilter() {
    return x(this.host.dataPipelineConfiguration?.filter);
  }
  get customFilter() {
    return this.host.dataPipelineConfiguration.filter;
  }
  get customSort() {
    return this.host.dataPipelineConfiguration.sort;
  }
  async apply(e, i) {
    const { filtering: r, sorting: a } = i;
    return e = this.hasCustomFilter ? await this.customFilter({ data: e, grid: this.host, type: "filter" }) : this.filtering.apply(e, r.state), e = this.hasCustomSort ? await this.customSort({ data: e, grid: this.host, type: "sort" }) : this.sorting.apply(e, a.state), e;
  }
}
const _t = {
  "arrow-upward": '<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="arrow-downward" role="img" viewBox="0 0 45 45"><path d="M22.5 40V13.7L10.1 26.1 8 24 24 8l16 16-2.1 2.1-12.4-12.4V40Z"/></svg>',
  "arrow-downward": '<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="arrow-downward" role="img" viewBox="0 0 45 45"><path fill="currentColor" d="M24 40 8 24l2.1-2.1 12.4 12.4V8h3v26.3l12.4-12.4L40 24Z"/></svg>',
  all: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-labelledby="agall-desc agall-title"><title id="agall-title">Select All Icon</title><desc id="agall-desc">A picture showing tree lines and a check mark.</desc><path d="M2 14h8v2H2zm0-8h12v2H2zm14 11l-3-3-1.5 1.5L16 20l7-7-1.5-1.5L16 17zM2 10h12v2H2z"/></svg>',
  contains: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-labelledby="czcontains-desc czcontains-title"><title id="czcontains-title">Contains Icon</title><desc id="czcontains-desc">A picture showing the lowercase letter A in a square box.</desc><path d="M3 3v18h18V3zm16 16H5V5h14z"/><path d="M12 11.3a4.39 4.39 0 00-2.54.63 2.07 2.07 0 00-.9 1.78 2.29 2.29 0 00.66 1.74 2.63 2.63 0 001.89.63 2.39 2.39 0 001.32-.37 3.05 3.05 0 001-.93 3.72 3.72 0 00.08.57c0 .19.1.38.16.58h1.79a4.51 4.51 0 01-.21-.88 5.57 5.57 0 01-.07-.93v-3.5a2.44 2.44 0 00-.84-2 3.34 3.34 0 00-2.22-.7 3.54 3.54 0 00-2.3.72A1.93 1.93 0 009 10.29h1.71a.93.93 0 01.29-.71 1.5 1.5 0 011-.29 1.45 1.45 0 011 .35 1.3 1.3 0 01.37 1v.69zm1.4 1.08v1.17a1.61 1.61 0 01-.71.77 2.27 2.27 0 01-1.21.34 1.18 1.18 0 01-.84-.27.92.92 0 01-.3-.72 1.16 1.16 0 01.44-.9 1.76 1.76 0 011.22-.39z"/></svg>',
  doesNotContain: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-labelledby="eadoes-not-contain-desc eadoes-not-contain-title"><title id="eadoes-not-contain-title">Does-Not-Contain Icon</title><desc id="eadoes-not-contain-desc">A picture showing the lowercase letter A in a crossed-out square box.</desc><path d="M21 19.74V3H4.26L2.89 1.63 1.63 2.92 3 4.29V21h16.73l1.37 1.37 1.27-1.26zM5 19V6.28l5.28 5.27a3.19 3.19 0 00-.81.38 2.07 2.07 0 00-.9 1.78 2.29 2.29 0 00.66 1.74 2.63 2.63 0 001.89.63 2.39 2.39 0 001.32-.37 3.05 3.05 0 001-.93 3.72 3.72 0 00.08.57c0 .19.1.38.16.58h1L17.73 19zm5.79-6.23a1.31 1.31 0 01.45-.25l1.37 1.36.28.29a1.57 1.57 0 01-.19.15 2.27 2.27 0 01-1.21.34 1.18 1.18 0 01-.84-.27.92.92 0 01-.3-.72 1.16 1.16 0 01.44-.9zm2.6-1.47h-.83l-1.62-1.62.08-.1a1.5 1.5 0 011-.29 1.45 1.45 0 011 .35 1.3 1.3 0 01.37 1zM19 17.74l-3.85-3.85v-3.27a2.44 2.44 0 00-.84-2 3.34 3.34 0 00-2.22-.7 3.64 3.64 0 00-2.24.67L6.26 5H19z"/></svg>',
  greaterThan: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-labelledby="fygreater-than-desc fygreater-than-title"><title id="fygreater-than-title">Greater Than Icon</title><desc id="fygreater-than-desc">A picture showing the greater-than symbol.</desc><path d="M6 7.11L15.09 12 6 16.89V19l12-6.46v-1.08L6 5v2.11z"/></svg>',
  greaterThanOrEqual: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-labelledby="fzgreater-than-or-equal-desc fzgreater-than-or-equal-title"><title id="fzgreater-than-or-equal-title">Greater Than or Equal Icon</title><desc id="fzgreater-than-or-equal-desc">A picture showing the grater-than or equal symbol.</desc><path d="M5.99 19h12.02v2H5.99zM18 9.47L6 3v2.11L15.09 10 6 14.9v2.11l12-6.47V9.47z"/></svg>',
  empty: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-labelledby="gsis-empty-desc gsis-empty-title"><title id="gsis-empty-title">Is Empty Icon</title><desc id="gsis-empty-desc">A picture showing a dotted square.</desc><path d="M5 17h2v2H5zm8 0h2v2h-2zm-8-4h2v2H5zm12 4h2v2h-2zM13 5h2v2h-2zM9 17h2v2H9zm8-8h2v2h-2zm0 4h2v2h-2zm0-8h2v2h-2zM5 9h2v2H5zm0-4h2v2H5zm4 0h2v2H9z"/></svg>',
  endsWith: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-labelledby="enends-with-desc enends-with-title"><title id="enends-with-title">Ends With Icon</title><desc id="enends-with-desc">A picture showing three dots followed by lowercase a.</desc><path d="M3 14.5h2v2H3zm8 0h2v2h-2zm-4 0h2v2H7zm13.8.3v-3A2.1 2.1 0 0020 10a3 3 0 00-2-.6 3 3 0 00-2 .6 1.7 1.7 0 00-.7 1.5h1.5a.8.8 0 01.3-.7 1.3 1.3 0 01.9-.3 1.3 1.3 0 01.9.4 1.1 1.1 0 01.3.8v.6H18a3.8 3.8 0 00-2.2.6 1.8 1.8 0 00-.8 1.5 2 2 0 00.6 1.6 2.3 2.3 0 001.6.6 2.1 2.1 0 001.2-.4 2.8 2.8 0 00.8-.8 4.3 4.3 0 00.1.5l.1.5H21a4.1 4.1 0 01-.2-.7 5.4 5.4 0 010-1zm-1.6-.5a1.5 1.5 0 01-.6.7 2 2 0 01-1 .2 1.1 1.1 0 01-.8-.2.8.8 0 01-.2-.6 1 1 0 01.3-.8 1.5 1.5 0 011.1-.3h1.2z"/></svg>',
  equals: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-labelledby="eoequals-desc eoequals-title"><title id="eoequals-title">Equals Icon</title><desc id="eoequals-desc">A picture showing the equals sign.</desc><path d="M5 13.5h14v2H5zm0-5h14v2H5z"/></svg>',
  false: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-labelledby="gtis-false-desc gtis-false-title"><title id="gtis-false-title">Is False Icon</title><desc id="gtis-false-desc">A picture showing an encircled X symbol.</desc><path d="M8 5a7 7 0 107 7 7 7 0 00-7-7zm4.31 9.79l-1.52 1.52L8 13.52l-2.79 2.79-1.52-1.52L6.48 12 3.69 9.21l1.52-1.52L8 10.48l2.79-2.79 1.52 1.52L9.52 12zM18 7a5 5 0 00-3 1.06 7.48 7.48 0 01.49 1 3.89 3.89 0 110 5.82 8.08 8.08 0 01-.49 1A5 5 0 1018 7z"/><path d="M17.52 13.85l2.91-2.92-.78-.78-2.13 2.12-1.17-1.15-.38.37-.41.41.42.42L17 13.34l.52.51z"/></svg>',
  lessThan: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-labelledby="hhless-than-desc hhless-than-title"><title id="hhless-than-title">Less Than Icon</title><desc id="hhless-than-desc">A picture showing the less-than symbol.</desc><path d="M6 12.54L18 19v-2.11L8.91 12 18 7.11V5L6 11.46v1.08z"/></svg>',
  lessThanOrEqual: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-labelledby="hiless-than-or-equal-desc hiless-than-or-equal-title"><title id="hiless-than-or-equal-title">Less Than or Equal Icon</title><desc id="hiless-than-or-equal-desc">A picture showing the lass-than or equal symbol.</desc><path d="M5.99 19h12.02v2H5.99zM18 14.9L8.91 10 18 5.11V3L6 9.47v1.07l12 6.47V14.9z"/></svg>',
  notEmpty: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-labelledby="ionot-empty-desc ionot-empty-title"><title id="ionot-empty-title">Not Empty Icon</title><desc id="ionot-empty-desc">A picture showing a crossed-out dotted square.</desc><path d="M5 9h2v2H5zm4 8h2v2H9zm4 0h2v2h-2zm4-8h2v2h-2zm0-4h2v2h-2zM5 17h2v2H5zm8-12h2v2h-2zm-8 8h2v2H5zm14 2v-2h-2v.47L18.53 15H19zm-8-8V5H9v.46L10.54 7H11zM2.76 1.76L1.5 3.06 20.97 22.5l1.26-1.26-8.89-8.89L2.76 1.76z"/></svg>',
  doesNotEqual: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-labelledby="ipnot-equal-desc ipnot-equal-title"><title id="ipnot-equal-title">Not Equal Icon</title><desc id="ipnot-equal-desc">A picture showing a crossed-out equals symbol.</desc><path d="M17.37 4.71l-1.74-1-2.76 4.79H5v2h6.71l-1.73 3H5v2h3.82l-2.19 3.79 1.74 1 2.76-4.79H19v-2h-6.71l1.73-3H19v-2h-3.82l2.19-3.79z"/></svg>',
  startsWith: '<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" width="512" height="512" aria-labelledby="lqstarts-with-desc lqstarts-with-title"><title id="lqstarts-with-title">Starts With Icon</title><desc id="lqstarts-with-desc">A picture showing the uppercase letter A followed by three dots.</desc><path d="M5.9 7.5l-3.9 9h1.7l.7-1.8h4.1l.7 1.8H11l-3.9-9H5.9zM5 13.2l1.5-4.1L8 13.2H5zm7 1.3h2v2h-2v-2zm8 0h2v2h-2v-2zm-4 0h2v2h-2v-2z"/></svg>',
  true: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="512" height="512" aria-labelledby="gwis-true-desc gwis-true-title"><title id="gwis-true-title">is True Icon</title><desc id="gwis-true-desc">A picture showing an encircled check mark symbol.</desc><path d="M19.44 14.22zm-2.88 0zm0 0L18 12.79l1.44 1.43.78-.78L18.79 12l1.43-1.44-.78-.78L18 11.21l-1.44-1.43-.78.78L17.21 12l-1.43 1.44.78.78z"/><path d="M18 7a5 5 0 00-3 1.06 7.48 7.48 0 01.49 1 3.89 3.89 0 110 5.82 8.08 8.08 0 01-.49 1A5 5 0 1018 7zM8 5a7 7 0 107 7 7 7 0 00-7-7zm-.93 10.18l-3.38-3.37 1.13-1.12 2.25 2.25 4.11-4.12 1.13 1.12z"/></svg>',
  filter: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 45 45"><path d="M20 36v-3h8v3Zm-8-10.5v-3h24v3ZM6 15v-3h36v3Z"/></svg>',
  close: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48"><path d="m12.45 37.65-2.1-2.1L21.9 24 10.35 12.45l2.1-2.1L24 21.9l11.55-11.55 2.1 2.1L26.1 24l11.55 11.55-2.1 2.1L24 26.1Z"/></svg>',
  refresh: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48"><path d="M24 40q-6.65 0-11.325-4.675Q8 30.65 8 24q0-6.65 4.675-11.325Q17.35 8 24 8q4.25 0 7.45 1.725T37 14.45V8h3v12.7H27.3v-3h8.4q-1.9-3-4.85-4.85Q27.9 11 24 11q-5.45 0-9.225 3.775Q11 18.55 11 24q0 5.45 3.775 9.225Q18.55 37 24 37q4.15 0 7.6-2.375 3.45-2.375 4.8-6.275h3.1q-1.45 5.25-5.75 8.45Q29.45 40 24 40Z"/></svg>'
};
function Et() {
  for (const [t, e] of Object.entries(_t))
    Fe(t, e, "internal");
}
class $t {
  constructor(e, i) {
    this.host = e, this.state = i, this.#e = () => {
      setTimeout(() => this.setScrollOffset());
    }, this.columnSizes = {}, this.rowRenderer = (r, a) => n`<apex-grid-row
      part="row"
      style=${N({ ...this.columnSizes, ...this.getActiveRowStyles(a) })}
      .index=${a}
      .activeNode=${this.state.active}
      .data=${r}
      .columns=${this.host.columns}
    ></apex-grid-row>`, this.host.addController(this);
  }
  #e;
  get container() {
    return this.host.scrollContainer;
  }
  async hostConnected() {
    Et(), this.setGridColumnSizes(), await this.host.updateComplete, this.container.addEventListener("visibilityChanged", this.#e, { once: !0 });
  }
  hostUpdate() {
    this.setScrollOffset(), this.setGridColumnSizes();
  }
  setScrollOffset() {
    const e = this.container ? this.container.offsetWidth - this.container.clientWidth : 0;
    this.host.style.setProperty("--scrollbar-offset", `${e}px`);
  }
  setGridColumnSizes() {
    this.columnSizes = nt(this.host.columns);
  }
  getActiveRowStyles(e) {
    const { row: i } = this.state.active;
    return i === e ? { "z-index": "3" } : {};
  }
}
class St extends $ {
  addEventListener(e, i, r) {
    super.addEventListener(e, i, r);
  }
  removeEventListener(e, i, r) {
    super.removeEventListener(e, i, r);
  }
  emitEvent(e, i) {
    return this.dispatchEvent(
      new CustomEvent(
        e,
        Object.assign(
          {
            bubbles: !0,
            cancelable: !1,
            composed: !0,
            detail: {}
          },
          i
        )
      )
    );
  }
}
function U(t, e) {
  return (i, r) => {
    const { willUpdate: a } = i;
    e = Object.assign({ waitUntilFirstUpdate: !1 }, e), i.willUpdate = function(s) {
      if (a.call(this, s), s.has(t)) {
        const l = s.get(t), v = this[t];
        l !== v && (!e?.waitUntilFirstUpdate || this.hasUpdated) && this[r].call(this, l, v);
      }
    };
  };
}
const Ce = b`/* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */
:host {
  --is-large: clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-large, 3), 1);
  --is-medium:
      min(
          clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-medium, 2), 1),
          clamp(0, var(--ig-size-large, 3) - var(--component-size, 1), 1)
      );
  --is-small: clamp(0, var(--ig-size-medium) - var(--component-size, 1), 1);
  --component-size: 3;
}

:host {
  display: grid;
  height: 100%;
  position: relative;
  font-family: var(--ig-font-family);
  -webkit-box-shadow: var(--ig-elevation-2);
          box-shadow: var(--ig-elevation-2);
  overflow: auto hidden;
  grid-template-rows: [header-row] -webkit-max-content [filter-row] -webkit-max-content [virtualized-container] auto;
  grid-template-rows: [header-row] max-content [filter-row] max-content [virtualized-container] auto;
  --scrollbar-offset: 0;
  --z-index-base: 1;
}

apex-virtualizer {
  grid-row: virtualized-container;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-flow: column;
          flex-flow: column;
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
  background: var(--igx-content-background, var(--content-background));
  color: var(--igx-content-text-color, var(--content-text-color));
  overflow: hidden auto !important;
}
apex-virtualizer:focus {
  outline: none;
}

[part~=resize-indicator] {
  position: absolute;
  height: 100%;
  background-color: var(--igx-grid-resize-line-color, var(--grid-resize-line-color));
  width: 0.125rem;
  inset-inline-start: 0;
  top: 0;
  z-index: calc(var(--z-index-base) + 1);
}

:host {
  --content-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --content-text-color: var(--ig-gray-50-contrast);
  --header-background: hsla(var(--ig-surface-500), var(--ig-surface-a));
  --header-text-color: var(--ig-surface-500-contrast);
  --header-border-width: 0.0625rem;
  --header-border-style: solid;
  --header-border-color: hsla(var(--ig-gray-400), 0.38);
  --filtering-header-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --filtering-row-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --filtering-row-text-color: var(--ig-gray-50-contrast);
  --sorted-header-icon-color: hsla(var(--ig-primary-500), var(--ig-primary-a));
  --icon-color: "currentColor";
  --row-hover-background: hsla(var(--ig-gray-200), var(--ig-gray-a));
  --row-hover-text-color: var(--ig-gray-200-contrast);
  --row-even-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --row-even-text-color: var(--ig-gray-50-contrast);
  --row-odd-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --row-odd-text-color: var(--ig-gray-50-contrast);
  --row-border-color: hsla(var(--ig-gray-300), 0.38);
  --row-border-style: solid;
  --row-border-width: 0.0625rem;
  --cell-active-border-color: hsla(var(--ig-primary-500), var(--ig-primary-a));
  --grid-resize-line-color: hsla(var(--ig-primary-500), var(--ig-primary-a));
}`, At = b`/* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */
:host {
  --is-large: clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-large, 3), 1);
  --is-medium:
      min(
          clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-medium, 2), 1),
          clamp(0, var(--ig-size-large, 3) - var(--component-size, 1), 1)
      );
  --is-small: clamp(0, var(--ig-size-medium) - var(--component-size, 1), 1);
  --component-size: 3;
}

:host {
  display: grid;
  height: 100%;
  position: relative;
  font-family: var(--ig-font-family);
  -webkit-box-shadow: var(--ig-elevation-2);
          box-shadow: var(--ig-elevation-2);
  overflow: auto hidden;
  grid-template-rows: [header-row] -webkit-max-content [filter-row] -webkit-max-content [virtualized-container] auto;
  grid-template-rows: [header-row] max-content [filter-row] max-content [virtualized-container] auto;
  --scrollbar-offset: 0;
  --z-index-base: 1;
}

apex-virtualizer {
  grid-row: virtualized-container;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-flow: column;
          flex-flow: column;
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
  background: var(--igx-content-background, var(--content-background));
  color: var(--igx-content-text-color, var(--content-text-color));
  overflow: hidden auto !important;
}
apex-virtualizer:focus {
  outline: none;
}

[part~=resize-indicator] {
  position: absolute;
  height: 100%;
  background-color: var(--igx-grid-resize-line-color, var(--grid-resize-line-color));
  width: 0.125rem;
  inset-inline-start: 0;
  top: 0;
  z-index: calc(var(--z-index-base) + 1);
}

:host {
  --content-background: var(hsla(var(--ig-gray-50), var(--ig-gray-a)));
  --content-text-color: var(var(--ig-gray-50-contrast));
  --header-background: hsla(var(--ig-surface-500), var(--ig-surface-a));
  --header-text-color: var(--ig-surface-500-contrast);
  --header-border-width: 0.0625rem;
  --header-border-style: solid;
  --header-border-color: hsla(var(--ig-gray-100), var(--ig-gray-a));
  --filtering-header-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --filtering-row-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --filtering-row-text-color: var(--ig-gray-50-contrast);
  --sorted-header-icon-color: hsla(var(--ig-secondary-500), var(--ig-secondary-a));
  --icon-color: "currentColor";
  --row-hover-background: hsla(var(--ig-gray-200), var(--ig-gray-a));
  --row-hover-text-color: var(--ig-gray-200-contrast);
  --row-even-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --row-even-text-color: var(--ig-gray-50-contrast);
  --row-odd-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --row-odd-text-color: var(--ig-gray-50-contrast);
  --row-border-color: hsla(var(--ig-gray-100), var(--ig-gray-a));
  --row-border-style: var(--header-border-style);
  --row-border-width: var(--header-border-width);
  --cell-active-border-color: hsla(var(--ig-primary-500), var(--ig-primary-a));
  --grid-resize-line-color: hsla(var(--ig-primary-500), var(--ig-primary-a));
}`, Ot = b`/* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */
:host {
  --is-large: clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-large, 3), 1);
  --is-medium:
      min(
          clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-medium, 2), 1),
          clamp(0, var(--ig-size-large, 3) - var(--component-size, 1), 1)
      );
  --is-small: clamp(0, var(--ig-size-medium) - var(--component-size, 1), 1);
  --component-size: 3;
}

:host {
  display: grid;
  height: 100%;
  position: relative;
  font-family: var(--ig-font-family);
  -webkit-box-shadow: var(--ig-elevation-2);
          box-shadow: var(--ig-elevation-2);
  overflow: auto hidden;
  grid-template-rows: [header-row] -webkit-max-content [filter-row] -webkit-max-content [virtualized-container] auto;
  grid-template-rows: [header-row] max-content [filter-row] max-content [virtualized-container] auto;
  --scrollbar-offset: 0;
  --z-index-base: 1;
}

apex-virtualizer {
  grid-row: virtualized-container;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-flow: column;
          flex-flow: column;
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
  background: var(--igx-content-background, var(--content-background));
  color: var(--igx-content-text-color, var(--content-text-color));
  overflow: hidden auto !important;
}
apex-virtualizer:focus {
  outline: none;
}

[part~=resize-indicator] {
  position: absolute;
  height: 100%;
  background-color: var(--igx-grid-resize-line-color, var(--grid-resize-line-color));
  width: 0.125rem;
  inset-inline-start: 0;
  top: 0;
  z-index: calc(var(--z-index-base) + 1);
}

:host {
  --content-background: var(hsla(var(--ig-gray-50), var(--ig-gray-a)));
  --content-text-color: var(var(--ig-gray-50-contrast));
  --header-background: hsla(var(--ig-gray-100), var(--ig-gray-a));
  --header-text-color: hsla(var(--ig-primary-500), var(--ig-primary-a));
  --header-border-width: 0.0625rem;
  --header-border-style: solid;
  --header-border-color: hsla(var(--ig-primary-500), 0.24);
  --filtering-header-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --filtering-row-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --filtering-row-text-color: var(--ig-gray-50-contrast);
  --sorted-header-icon-color: hsla(var(--ig-primary-500), var(--ig-primary-a));
  --icon-color: "currentColor";
  --row-hover-background: hsla(var(--ig-primary-50), var(--ig-primary-a));
  --row-hover-text-color: var(--ig-gray-200-contrast);
  --row-even-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --row-even-text-color: var(--ig-gray-50-contrast);
  --row-odd-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --row-odd-text-color: var(--ig-gray-50-contrast);
  --row-border-color: hsla(var(--ig-primary-50), var(--ig-primary-a));
  --row-border-style: var(--header-border-style);
  --row-border-width: var(--header-border-width);
  --cell-active-border-color: hsla(var(--ig-primary-500), var(--ig-primary-a));
  --grid-resize-line-color: hsla(var(--ig-primary-500), var(--ig-primary-a));
}`, qt = b`/* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */
:host {
  --is-large: clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-large, 3), 1);
  --is-medium:
      min(
          clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-medium, 2), 1),
          clamp(0, var(--ig-size-large, 3) - var(--component-size, 1), 1)
      );
  --is-small: clamp(0, var(--ig-size-medium) - var(--component-size, 1), 1);
  --component-size: 3;
}

:host {
  display: grid;
  height: 100%;
  position: relative;
  font-family: var(--ig-font-family);
  -webkit-box-shadow: var(--ig-elevation-2);
          box-shadow: var(--ig-elevation-2);
  overflow: auto hidden;
  grid-template-rows: [header-row] -webkit-max-content [filter-row] -webkit-max-content [virtualized-container] auto;
  grid-template-rows: [header-row] max-content [filter-row] max-content [virtualized-container] auto;
  --scrollbar-offset: 0;
  --z-index-base: 1;
}

apex-virtualizer {
  grid-row: virtualized-container;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-flow: column;
          flex-flow: column;
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
  background: var(--igx-content-background, var(--content-background));
  color: var(--igx-content-text-color, var(--content-text-color));
  overflow: hidden auto !important;
}
apex-virtualizer:focus {
  outline: none;
}

[part~=resize-indicator] {
  position: absolute;
  height: 100%;
  background-color: var(--igx-grid-resize-line-color, var(--grid-resize-line-color));
  width: 0.125rem;
  inset-inline-start: 0;
  top: 0;
  z-index: calc(var(--z-index-base) + 1);
}

:host {
  --content-background: var(hsla(var(--ig-gray-50), var(--ig-gray-a)));
  --content-text-color: var(var(--ig-gray-50-contrast));
  --header-background: hsla(var(--ig-gray-100), var(--ig-gray-a));
  --header-text-color: hsla(var(--ig-gray-800), 0.7);
  --header-border-width: 0.0625rem;
  --header-border-style: solid;
  --header-border-color: hsla(var(--ig-gray-400), 0.38);
  --filtering-header-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --filtering-row-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --filtering-row-text-color: var(--ig-gray-50-contrast);
  --sorted-header-icon-color: hsla(var(--ig-secondary-500), var(--ig-secondary-a));
  --icon-color: "currentColor";
  --row-hover-background: hsla(var(--ig-gray-200), var(--ig-gray-a));
  --row-hover-text-color: var(--ig-gray-200-contrast);
  --row-even-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --row-even-text-color: hsla(var(--ig-gray-800), var(--ig-gray-a));
  --row-odd-background: hsla(var(--ig-gray-50), var(--ig-gray-a));
  --row-odd-text-color: hsla(var(--ig-gray-800), var(--ig-gray-a));
  --row-border-color: hsla(var(--ig-gray-300), 0.38);
  --row-border-style: var(--header-border-style);
  --row-border-width: var(--header-border-width);
  --cell-active-border-color: hsla(var(--ig-secondary-500), var(--ig-secondary-a));
  --grid-resize-line-color: hsla(var(--ig-secondary-500), var(--ig-secondary-a));
}`;
class ke extends Ve {
  constructor() {
    super(...arguments), this.scroller = !0;
  }
  static get is() {
    return Ke;
  }
  static register() {
    w(this);
  }
  async connectedCallback() {
    await super.layoutComplete, super.connectedCallback(), this.setAttribute("tabindex", "0");
  }
}
function D(t) {
  return Object.keys(t).filter((e) => t[e]).join(" ");
}
const It = b`/* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */
:host {
  --is-large: clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-large, 3), 1);
  --is-medium:
      min(
          clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-medium, 2), 1),
          clamp(0, var(--ig-size-large, 3) - var(--component-size, 1), 1)
      );
  --is-small: clamp(0, var(--ig-size-medium) - var(--component-size, 1), 1);
  --component-size: 3;
}

:host {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  position: relative;
  -webkit-border-end: var(--igx-header-border-width, var(--header-border-width)) var(--igx-header-border-style, var(--header-border-style)) var(--igx-header-border-color, var(--header-border-color));
          border-inline-end: var(--igx-header-border-width, var(--header-border-width)) var(--igx-header-border-style, var(--header-border-style)) var(--igx-header-border-color, var(--header-border-color));
  font-weight: 600;
  font-size: 0.75rem;
}

:host(:last-of-type) {
  -webkit-border-end: none;
          border-inline-end: none;
}

[part~=content] {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  width: 100%;
  height: 100%;
  padding: 0 max(var(--is-large, 1) * max(1.5rem, -1 * 1.5rem), var(--is-medium, 1) * max(1rem, -1 * 1rem), var(--is-small, 1) * max(0.5rem, -1 * 0.5rem));
  font-weight: 500;
  overflow: hidden;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
}

[part~=title] {
  display: block;
  position: relative;
  cursor: initial;
  white-space: nowrap;
  -o-text-overflow: ellipsis;
     text-overflow: ellipsis;
  overflow: hidden;
  min-width: 3ch;
}

[part~=actions] {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  gap: 0.25rem;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

[part~=action] {
  cursor: pointer;
  opacity: 0.7;
  -webkit-transition: opacity 0.25s ease-in-out;
  -o-transition: opacity 0.25s ease-in-out;
  transition: opacity 0.25s ease-in-out;
}
[part~=action]:hover, [part~=action]:focus {
  opacity: 1;
}
[part~=action] igc-icon {
  --size: 0.9375rem;
  color: var(--igx-icon-color, var(--icon-color));
}
[part~=action] igc-icon::after {
  content: attr(data-sortIndex);
  position: absolute;
  top: -5px;
  inset-inline-end: -1px;
  font-size: 0.625rem;
  text-align: end;
  font-family: sans-serif;
  line-height: 0.625rem;
  color: var(--igx-sorted-header-icon-color, var(--sorted-header-icon-color));
}

[part~=sorted],
[part~=filtered] {
  color: var(--igx-sorted-header-icon-color, var(--sorted-header-icon-color));
}
[part~=sorted] igc-icon,
[part~=filtered] igc-icon {
  color: var(--igx-sorted-header-icon-color, var(--sorted-header-icon-color));
}

[part~=filtered] {
  background: var(--igx-filtering-header-background, var(--filtering-header-background));
}

[part~=action]:empty {
  display: none;
}

[part~=resizable] {
  width: 0.25rem;
  height: 100%;
  position: absolute;
  inset-inline-end: -0.125rem;
  z-index: var(--z-index-base);
  cursor: col-resize;
}

[part~=filter] {
  position: relative;
}

[part~=filter-count] {
  position: absolute;
  top: -5px;
  inset-inline-end: -1px;
  font-size: 0.625rem;
  text-align: end;
  font-family: sans-serif;
  line-height: 0.625rem;
  color: currentcolor;
}`;
var Lt = Object.defineProperty, Mt = Object.getOwnPropertyDescriptor, _e = (t, e, i, r) => {
  for (var a = r > 1 ? void 0 : r ? Mt(e, i) : e, s = t.length - 1, l; s >= 0; s--)
    (l = t[s]) && (a = (r ? l(e, i, a) : l(a)) || a);
  return r && a && Lt(e, i, a), a;
}, Ee = (t, e, i) => {
  if (!e.has(t))
    throw TypeError("Cannot " + i);
}, P = (t, e, i) => (Ee(t, e, "read from private field"), i ? i.call(t) : e.get(t)), k = (t, e, i) => {
  if (e.has(t))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(t) : e.set(t, i);
}, V = (t, e, i) => (Ee(t, e, "access private method"), i), he, $e, Z, Se, H, Q, Ae, ce, K;
class A extends $ {
  constructor() {
    super(...arguments), k(this, he), k(this, Z), k(this, Q), k(this, H, ({ clientX: e }) => {
      const { left: i } = this.getBoundingClientRect(), r = Math.max(e - i, we), a = this.offsetLeft + r;
      this.resizeController.resize(this.column, r, a);
    }), k(this, ce, () => {
      this.resizeController.indicatorActive = !1, this.removeEventListener("pointermove", P(this, H)), this.resizeController.stop();
    }), k(this, K, () => this.resizeController.autosize(this.column, this));
  }
  static get is() {
    return Ye;
  }
  static register() {
    w(this);
  }
  get context() {
    return {
      parent: this,
      column: this.column
    };
  }
  get isSortable() {
    return !!this.column.sort;
  }
  get resizeController() {
    return this.state.resizing;
  }
  renderSortPart() {
    const e = this.state.sorting.state.get(this.column.key), i = Array.from(this.state.sorting.state.values()).indexOf(e), r = this.state.host.sortConfiguration.multiple ? i > -1 ? i + 1 : g : g, a = e ? e.direction === "ascending" ? ue : rt : ue;
    return e || this.isSortable ? n`<span
          part=${D({ action: !0, sorted: !!e?.direction })}
          @click=${this.isSortable ? V(this, Z, Se) : g}
        >
          <igc-icon
            part=${D({ "sorting-action": !!e })}
            data-sortIndex=${r}
            name=${a}
            collection="internal"
          ></igc-icon>
        </span>` : g;
  }
  renderContentPart() {
    const e = this.column.headerText ?? this.column.key, i = this.column.headerTemplate;
    return n`
      <span part="title">
        <span>${i ? i(this.context) : n`${e}`}</span>
      </span>
    `;
  }
  renderResizePart() {
    return this.column.resizable ? n`<span
          part="resizable"
          @dblclick=${P(this, K)}
          @pointerdown=${V(this, Q, Ae)}
        ></span>` : g;
  }
  render() {
    return n`
      <div
        part=${D({
      content: !0,
      sortable: this.isSortable,
      resizing: this.resizeController.indicatorActive
    })}
      >
        ${this.renderContentPart()}
        <div part="actions">${this.renderSortPart()}</div>
      </div>
      ${this.renderResizePart()}
    `;
  }
}
he = /* @__PURE__ */ new WeakSet();
$e = function() {
  const t = { once: !0 };
  this.addEventListener(
    "gotpointercapture",
    () => this.resizeController.indicatorActive = !0,
    t
  ), this.addEventListener("lostpointercapture", P(this, ce), t), this.addEventListener("pointerup", (e) => this.releasePointerCapture(e.pointerId), t), this.addEventListener("pointermove", P(this, H));
};
Z = /* @__PURE__ */ new WeakSet();
Se = function(t) {
  t.stopPropagation(), this.state.sorting.sortFromHeaderClick(this.column);
};
H = /* @__PURE__ */ new WeakMap();
Q = /* @__PURE__ */ new WeakSet();
Ae = function(t) {
  const { target: e, pointerId: i } = t;
  t.preventDefault(), V(this, he, $e).call(this), this.resizeController.start(this), e.setPointerCapture(i);
};
ce = /* @__PURE__ */ new WeakMap();
K = /* @__PURE__ */ new WeakMap();
A.styles = It;
_e([
  ne({ context: F, subscribe: !0 }),
  o({ attribute: !1 })
], A.prototype, "state", 2);
_e([
  o({ attribute: !1 })
], A.prototype, "column", 2);
const Dt = b`/* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */
:host {
  --is-large: clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-large, 3), 1);
  --is-medium:
      min(
          clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-medium, 2), 1),
          clamp(0, var(--ig-size-large, 3) - var(--component-size, 1), 1)
      );
  --is-small: clamp(0, var(--ig-size-medium) - var(--component-size, 1), 1);
  --component-size: 3;
}

:host {
  display: grid;
  grid-row: header-row;
  min-height: max(var(--is-large, 1) * max(3.125rem, -1 * 3.125rem), var(--is-medium, 1) * max(2.125rem, -1 * 2.125rem), var(--is-small, 1) * max(1.5rem, -1 * 1.5rem));
  background: var(--igx-header-background, var(--header-background));
  color: var(--igx-header-text-color, var(--header-text-color));
  contain: content;
  -webkit-border-after: var(--igx-header-border-width, var(--header-border-width)) var(--igx-header-border-style, var(--header-border-style)) var(--igx-header-border-color, var(--header-border-color));
          border-block-end: var(--igx-header-border-width, var(--header-border-width)) var(--igx-header-border-style, var(--header-border-style)) var(--igx-header-border-color, var(--header-border-color));
  z-index: var(--z-index-base);
  -webkit-padding-end: var(--scrollbar-offset);
          padding-inline-end: var(--scrollbar-offset);
}

:host(:focus) {
  outline: none;
}

[part=filtered] {
  background: var(--igx-filtering-header-background, var(--filtering-header-background));
}`;
var Rt = Object.defineProperty, Tt = Object.getOwnPropertyDescriptor, ge = (t, e, i, r) => {
  for (var a = r > 1 ? void 0 : r ? Tt(e, i) : e, s = t.length - 1, l; s >= 0; s--)
    (l = t[s]) && (a = (r ? l(e, i, a) : l(a)) || a);
  return r && a && Rt(e, i, a), a;
}, Nt = (t, e, i) => {
  if (!e.has(t))
    throw TypeError("Cannot " + i);
}, Pt = (t, e, i) => {
  if (e.has(t))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(t) : e.set(t, i);
}, Ht = (t, e, i) => (Nt(t, e, "access private method"), i), X, Oe;
class O extends $ {
  constructor() {
    super(), Pt(this, X), this.columns = [], this.addEventListener("click", Ht(this, X, Oe));
  }
  static get is() {
    return Xe;
  }
  static register() {
    w(this, [A]);
  }
  get headers() {
    return Array.from(this._headers);
  }
  connectedCallback() {
    super.connectedCallback(), this.setAttribute("tabindex", "0");
  }
  shouldUpdate(e) {
    return this.headers.forEach((i) => i.requestUpdate()), super.shouldUpdate(e);
  }
  render() {
    const e = this.state.filtering.filterRow;
    return n`${be(
      this.columns,
      (i) => i.hidden ? g : n`<apex-grid-header
            part=${D({
        filtered: i === e?.column
      })}
            .column=${i}
          ></apex-grid-header>`
    )}`;
  }
}
X = /* @__PURE__ */ new WeakSet();
Oe = function(t) {
  const e = t.composedPath().filter((i) => i instanceof A).at(0);
  this.state.filtering.setActiveColumn(e?.column);
};
O.styles = Dt;
ge([
  oe(A.is)
], O.prototype, "_headers", 2);
ge([
  ne({ context: F, subscribe: !0 }),
  o({ attribute: !1 })
], O.prototype, "state", 2);
ge([
  o({ attribute: !1 })
], O.prototype, "columns", 2);
const Wt = b`/* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */ /* stylelint-disable max-line-length */
:host {
  --is-large: clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-large, 3), 1);
  --is-medium:
      min(
          clamp(0, (var(--component-size, 1) + 1) - var(--ig-size-medium, 2), 1),
          clamp(0, var(--ig-size-large, 3) - var(--component-size, 1), 1)
      );
  --is-small: clamp(0, var(--ig-size-medium) - var(--component-size, 1), 1);
  --component-size: 3;
}

:host {
  --ig-size: 1;
  display: grid;
  grid-row: filter-row;
  min-height: max(var(--is-large, 1) * max(3.125rem, -1 * 3.125rem), var(--is-medium, 1) * max(2.125rem, -1 * 2.125rem), var(--is-small, 1) * max(1.5rem, -1 * 1.5rem));
  background: var(--igx-header-background, var(--header-background));
  color: var(--igx-header-text-color, var(--header-text-color));
  -webkit-border-after: var(--igx-header-border-width, var(--header-border-width)) var(--igx-header-border-style, var(--header-border-style)) var(--igx-header-border-color, var(--header-border-color));
          border-block-end: var(--igx-header-border-width, var(--header-border-width)) var(--igx-header-border-style, var(--header-border-style)) var(--igx-header-border-color, var(--header-border-color));
  z-index: var(--z-index-base);
  -webkit-padding-end: var(--scrollbar-offset);
          padding-inline-end: var(--scrollbar-offset);
}

[part=filter-row-preview] {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  overflow: hidden;
  padding: 0 max(var(--is-large, 1) * max(1.5rem, -1 * 1.5rem), var(--is-medium, 1) * max(1rem, -1 * 1rem), var(--is-small, 1) * max(0.5rem, -1 * 0.5rem));
  background: var(--igx-filtering-row-background, var(--filtering-row-background));
  color: var(--igx-filtering-row-text-color, var(--filtering-row-text-color));
  -webkit-border-end: var(--igx-header-border-width, var(--header-border-width)) var(--igx-header-border-style, var(--header-border-style)) var(--igx-header-border-color, var(--header-border-color));
          border-inline-end: var(--igx-header-border-width, var(--header-border-width)) var(--igx-header-border-style, var(--header-border-style)) var(--igx-header-border-color, var(--header-border-color));
}

[part~=active-state] {
  background: var(--igx-filtering-row-background, var(--filtering-row-background));
  color: var(--igx-filtering-row-text-color, var(--filtering-row-text-color));
  min-height: max(var(--is-large, 1) * max(3.125rem, -1 * 3.125rem), var(--is-medium, 1) * max(2.125rem, -1 * 2.125rem), var(--is-small, 1) * max(1.5rem, -1 * 1.5rem));
  min-width: 100%;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  gap: 0.5rem;
  position: relative;
  inset-block-start: -0.0625rem;
}

[part=filter-row-preview]:last-of-type {
  -webkit-border-end: none;
          border-inline-end: none;
}

[part~=filter-row-input] {
  -webkit-padding-start: max(var(--is-large, 1) * max(1.5rem, -1 * 1.5rem), var(--is-medium, 1) * max(1rem, -1 * 1rem), var(--is-small, 1) * max(0.5rem, -1 * 0.5rem));
          padding-inline-start: max(var(--is-large, 1) * max(1.5rem, -1 * 1.5rem), var(--is-medium, 1) * max(1rem, -1 * 1rem), var(--is-small, 1) * max(0.5rem, -1 * 0.5rem));
}

[part~=filter-row-actions] {
  -webkit-padding-end: max(var(--is-large, 1) * max(1.5rem, -1 * 1.5rem), var(--is-medium, 1) * max(1rem, -1 * 1rem), var(--is-small, 1) * max(0.5rem, -1 * 0.5rem));
          padding-inline-end: max(var(--is-large, 1) * max(1.5rem, -1 * 1.5rem), var(--is-medium, 1) * max(1rem, -1 * 1rem), var(--is-small, 1) * max(0.5rem, -1 * 0.5rem));
}

[part~=filter-row-input],
[part~=filter-row-filters],
[part~=filter-row-actions] {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

[part~=filter-row-filters] {
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
  overflow: hidden;
}

igc-input::part(container), igc-input::part(input) {
  background: inherit;
  color: inherit;
}`;
var Ft = Object.defineProperty, Ut = Object.getOwnPropertyDescriptor, f = (t, e, i, r) => {
  for (var a = r > 1 ? void 0 : r ? Ut(e, i) : e, s = t.length - 1, l; s >= 0; s--)
    (l = t[s]) && (a = (r ? l(e, i, a) : l(a)) || a);
  return r && a && Ft(e, i, a), a;
}, Bt = (t, e, i) => {
  if (!e.has(t))
    throw TypeError("Cannot " + i);
}, p = (t, e, i) => {
  if (e.has(t))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(t) : e.set(t, i);
}, c = (t, e, i) => (Bt(t, e, "access private method"), i), L, B, j, me, R, Y, J, qe, ee, Ie, te, Le, ie, Me, re, De, ae, Re, se, Te, T, le;
function q(t) {
  return n`<igc-icon
    slot="prefix"
    name=${fe(t)}
    collection="internal"
  ></igc-icon>`;
}
class u extends $ {
  constructor() {
    super(...arguments), p(this, L), p(this, j), p(this, R), p(this, J), p(this, ee), p(this, te), p(this, ie), p(this, re), p(this, ae), p(this, se), p(this, T), this.active = !1, this.column = G;
  }
  static get is() {
    return tt;
  }
  static register() {
    w(this);
  }
  get isNumeric() {
    return this.column.type === "number";
  }
  get filterController() {
    return this.state.filtering;
  }
  get condition() {
    return this.expression.condition;
  }
  activeChanged() {
    this.style.display = this.active ? "flex" : "", this.active || (this.column = G), this.state.host.requestUpdate();
  }
  renderCriteriaButton(e, i) {
    return i ? n`<igc-button
          variant="flat"
          @click=${c(this, ae, Re).call(this, e)}
        >
          ${e.criteria}
        </igc-button>` : g;
  }
  renderExpressionChip(e) {
    const { name: i, unary: r } = e.expression.condition, { searchTerm: a } = e.expression, s = n`<span slot="select"></span>${q(i)}`;
    return n`<igc-chip
      selectable
      removable
      ?selected=${e.selected}
      @igcRemove=${e.onRemove}
      @igcSelect=${e.onSelect}
    >
      ${s}${r ? i : a}
    </igc-chip>`;
  }
  renderActiveChips() {
    const e = this.filterController.get(this.column.key);
    return e ? Array.from(e).map((i, r) => {
      const a = {
        expression: i,
        selected: this.expression === i,
        onRemove: c(this, T, le).call(this, i),
        onSelect: c(this, se, Te).call(this, i)
      };
      return n`${this.renderCriteriaButton(i, r)}${this.renderExpressionChip(
        a
      )}`;
    }) : g;
  }
  renderFilterActions() {
    return n`
      <igc-button
        id="reset"
        variant="flat"
        @click=${c(this, ie, Me)}
      >
        ${q("refresh")} Reset
      </igc-button>
      <igc-button
        id="close"
        variant="flat"
        @click=${() => this.active = !1}
      >
        ${q("close")} Close
      </igc-button>
    `;
  }
  renderDropdown() {
    return n`<igc-dropdown
      flip
      same-width
      @igcChange=${c(this, J, qe)}
    >
      ${Object.entries(W(this.column)).map(
      ([e, i]) => n`
          <igc-dropdown-item
            .value=${e}
            ?selected=${this.condition.name === e}
          >
            ${q(e)}${i?.label ?? e}
          </igc-dropdown-item>
        `
    )}
    </igc-dropdown>`;
  }
  renderDropdownTarget() {
    return n`<igc-icon
      id="condition"
      slot="prefix"
      collection="internal"
      .name=${this.condition.name}
      @click=${c(this, re, De)}
    >
    </igc-icon>`;
  }
  renderInputArea() {
    return n`<igc-input
        outlined
        value=${fe(this.expression.searchTerm)}
        placeholder="Add filter value"
        ?readonly=${this.condition.unary}
        @igcInput=${c(this, ee, Ie)}
        @keydown=${c(this, te, Le)}
      >
        ${this.renderDropdownTarget()}
      </igc-input>
      ${this.renderDropdown()}`;
  }
  renderActiveState() {
    return n`<div part="active-state">
      <div part="filter-row-input">${this.renderInputArea()}</div>
      <div part="filter-row-filters">${this.renderActiveChips()}</div>
      <div part="filter-row-actions">${this.renderFilterActions()}</div>
    </div> `;
  }
  renderInactiveChips(e, i) {
    return Array.from(i).map((r, a) => {
      const s = {
        expression: r,
        selected: !1,
        onRemove: c(this, T, le).call(this, r),
        onSelect: (l) => {
          l.stopPropagation(), this.column = e, this.expression = r, c(this, R, Y).call(this);
        }
      };
      return n`${this.renderCriteriaButton(r, a)}${this.renderExpressionChip(s)}`;
    });
  }
  renderFilterState(e) {
    const i = this.filterController.get(e.key), r = i && i.length < 3, a = i && i.length >= 3, s = () => {
      this.column = e, c(this, L, B).call(this), c(this, R, Y).call(this);
    }, l = a ? n`<span slot="suffix">${i.length}</span>` : g, v = n`<igc-chip
      data-column=${e.key}
      @click=${s}
      >${q("filter")}Filter${l}</igc-chip
    >`;
    return r ? this.renderInactiveChips(e, i) : v;
  }
  renderInactiveState() {
    return this.state.host.columns.map(
      (e) => e.hidden ? g : n`<div part="filter-row-preview">
            ${e.filter ? this.renderFilterState(e) : g}
          </div>`
    );
  }
  render() {
    return n`${this.active ? this.renderActiveState() : this.renderInactiveState()}`;
  }
}
L = /* @__PURE__ */ new WeakSet();
B = function() {
  this.expression = this.filterController.getDefaultExpression(this.column);
};
j = /* @__PURE__ */ new WeakSet();
me = function(t) {
  this.filterController.removeExpression(t);
};
R = /* @__PURE__ */ new WeakSet();
Y = async function() {
  this.active = !0, await this.updateComplete, this.input?.select();
};
J = /* @__PURE__ */ new WeakSet();
qe = function(t) {
  t.stopPropagation();
  const e = t.detail.value;
  this.expression.condition = W(this.column)[e], (this.input.value || this.expression.condition.unary) && this.filterController.filterWithEvent(this.expression, "modify"), this.requestUpdate();
};
ee = /* @__PURE__ */ new WeakSet();
Ie = function(t) {
  t.stopPropagation();
  const e = this.isNumeric ? parseFloat(t.detail) : t.detail, i = this.isNumeric ? !isNaN(e) : !!e, r = this.filterController.get(this.expression.key)?.has(this.expression) ? "modify" : "add";
  i ? (this.expression.searchTerm = e, this.filterController.filterWithEvent(this.expression, r)) : c(this, j, me).call(this, this.expression), this.requestUpdate();
};
te = /* @__PURE__ */ new WeakSet();
Le = function(t) {
  switch (t.stopPropagation(), t.key) {
    case "Enter":
      this.input.value = "", c(this, L, B).call(this);
      return;
    case "Escape":
      this.active = !1;
      return;
    default:
      return;
  }
};
ie = /* @__PURE__ */ new WeakSet();
Me = function() {
  this.filterController.removeAllExpressions(this.column.key), this.requestUpdate();
};
re = /* @__PURE__ */ new WeakSet();
De = function() {
  this.dropdown.toggle(this.input);
};
ae = /* @__PURE__ */ new WeakSet();
Re = function(t) {
  return async (e) => {
    e.stopPropagation(), t.criteria = t.criteria === "and" ? "or" : "and", this.filterController.filterWithEvent(t, "modify"), this.requestUpdate();
  };
};
se = /* @__PURE__ */ new WeakSet();
Te = function(t) {
  return async (e) => {
    e.stopPropagation(), this.expression = t, await this.updateComplete, this.input?.select();
  };
};
T = /* @__PURE__ */ new WeakSet();
le = function(t) {
  return async (e) => {
    e.stopPropagation(), c(this, j, me).call(this, t), this.active && this.expression === t && (c(this, L, B).call(this), await this.updateComplete, this.input.focus()), this.requestUpdate();
  };
};
u.styles = Wt;
f([
  ne({ context: F, subscribe: !0 }),
  o({ attribute: !1 })
], u.prototype, "state", 2);
f([
  o({ attribute: !1 })
], u.prototype, "active", 2);
f([
  S(ye.tagName)
], u.prototype, "input", 2);
f([
  S("#condition")
], u.prototype, "conditionElement", 2);
f([
  S(xe.tagName)
], u.prototype, "dropdown", 2);
f([
  o({ attribute: !1 })
], u.prototype, "column", 2);
f([
  o({ attribute: !1 })
], u.prototype, "expression", 2);
f([
  U("active", { waitUntilFirstUpdate: !0 })
], u.prototype, "activeChanged", 1);
var jt = Object.defineProperty, Gt = Object.getOwnPropertyDescriptor, h = (t, e, i, r) => {
  for (var a = r > 1 ? void 0 : r ? Gt(e, i) : e, s = t.length - 1, l; s >= 0; s--)
    (l = t[s]) && (a = (r ? l(e, i, a) : l(a)) || a);
  return r && a && jt(e, i, a), a;
};
let d = class extends St {
  constructor() {
    super(...arguments), this.stateController = new wt(this), this.DOM = new $t(this, this.stateController), this.dataController = new kt(this), this.stateProvider = new Pe(this, {
      context: F,
      initialValue: this.stateController
    }), this.dataState = [], this.columns = [], this.data = [], this.autoGenerate = !1, this.sortConfiguration = {
      multiple: !0,
      triState: !0
    };
  }
  static get is() {
    return Qe;
  }
  static register() {
    w(this, [ke, y, O, u]), Ue(
      Be,
      je,
      ye,
      xe,
      Ge
    );
  }
  /**
   * Set the sort state for the grid.
   */
  set sortExpressions(t) {
    t.length && this.sort(t);
  }
  get sortExpressions() {
    return Array.from(this.stateController.sorting.state.values());
  }
  /**
   * Set the filter state for the grid.
   */
  set filterExpressions(t) {
    t.length && this.filter(t);
  }
  get filterExpressions() {
    return this.stateController.filtering.state.values.reduce(
      (t, e) => [...t, ...e.all],
      []
    );
  }
  /**
   * Returns the collection of rendered row elements in the grid.
   *
   * @remarks
   * Since the grid has virtualization, this property returns only the currently rendered
   * chunk of elements in the DOM.
   */
  get rows() {
    return Array.from(this._rows);
  }
  /**
   * Returns the state of the data source after sort/filter operations
   * have been applied.
   */
  get dataView() {
    return this.dataState;
  }
  /**
   * The total number of items in the {@link ApexGrid.dataView} collection.
   */
  get totalItems() {
    return this.dataState.length;
  }
  watchColumns(t, e = []) {
    this.columns = e.map((i) => ({ ...G, ...i }));
  }
  dataChanged() {
    this.dataState = structuredClone(this.data), ot(this), this.hasUpdated && this.pipeline();
  }
  async pipeline() {
    this.dataState = await this.dataController.apply(
      structuredClone(this.data),
      this.stateController
    );
  }
  /**
   * Performs a filter operation in the grid based on the passed expression(s).
   */
  filter(t) {
    this.stateController.filtering.filter(
      E(t).map(
        (e) => typeof e.condition == "string" ? (
          // XXX: Types
          Object.assign(e, {
            condition: W(this.getColumn(e.key))[e.condition]
          })
        ) : e
      )
    );
  }
  /**
   * Performs a sort operation in the grid based on the passed expression(s).
   */
  sort(t) {
    this.stateController.sorting.sort(t);
  }
  /**
   * Resets the current sort state of the control.
   */
  clearSort(t) {
    this.stateController.sorting.reset(t), this.requestUpdate(_);
  }
  /**
   * Resets the current filter state of the control.
   */
  clearFilter(t) {
    this.stateController.filtering.reset(t), this.requestUpdate(_);
  }
  /**
   * Returns a {@link ColumnConfiguration} for a given column.
   */
  getColumn(t) {
    return typeof t == "number" ? this.columns.at(t) : this.columns.find(({ key: e }) => e === t);
  }
  /**
   * Updates the column configuration of the grid.
   */
  updateColumns(t) {
    E(t).forEach((e) => {
      const i = this.columns.findIndex((r) => r.key === e.key);
      this.columns[i] = { ...this.columns[i], ...e };
    }), this.requestUpdate(_);
  }
  bodyClickHandler(t) {
    const e = t.composedPath().find((i) => i instanceof z);
    e && (this.stateController.active = {
      column: e.column.key,
      row: e.row.index
    });
  }
  bodyKeydownHandler(t) {
    this.scrollContainer.isSameNode(t.target) && this.stateController.navigation.navigate(t);
  }
  renderHeaderRow() {
    return n`<apex-grid-header-row
      style=${N(this.DOM.columnSizes)}
      .columns=${this.columns}
    ></apex-grid-header-row>`;
  }
  renderBody() {
    return n`
      <apex-virtualizer
        .items=${this.dataState}
        .renderItem=${this.DOM.rowRenderer}
        @click=${this.bodyClickHandler}
        @keydown=${this.bodyKeydownHandler}
      ></apex-virtualizer>
    `;
  }
  renderFilterRow() {
    return this.columns.some((t) => t.filter) ? n`<apex-filter-row style=${N(this.DOM.columnSizes)}></apex-filter-row>` : g;
  }
  render() {
    return n` ${this.stateController.resizing.renderIndicator()} ${this.renderHeaderRow()}
    ${this.renderFilterRow()} ${this.renderBody()}`;
  }
};
d.styles = Ce;
h([
  S(ke.is)
], d.prototype, "scrollContainer", 2);
h([
  S(O.is)
], d.prototype, "headerRow", 2);
h([
  S(u.is)
], d.prototype, "filterRow", 2);
h([
  He()
], d.prototype, "dataState", 2);
h([
  oe(y.is)
], d.prototype, "_rows", 2);
h([
  o({ attribute: !1 })
], d.prototype, "columns", 2);
h([
  o({ attribute: !1 })
], d.prototype, "data", 2);
h([
  o({ type: Boolean, attribute: "auto-generate" })
], d.prototype, "autoGenerate", 2);
h([
  o({ attribute: !1 })
], d.prototype, "sortConfiguration", 2);
h([
  o({ attribute: !1 })
], d.prototype, "dataPipelineConfiguration", 2);
h([
  o({ attribute: !1 })
], d.prototype, "sortExpressions", 1);
h([
  o({ attribute: !1 })
], d.prototype, "filterExpressions", 1);
h([
  U("columns")
], d.prototype, "watchColumns", 1);
h([
  U("data")
], d.prototype, "dataChanged", 1);
h([
  U(_)
], d.prototype, "pipeline", 1);
h([
  We({ capture: !0 })
], d.prototype, "bodyClickHandler", 1);
d = h([
  Ze({
    bootstrap: Ce,
    fluent: At,
    indigo: Ot,
    material: qt
  })
], d);
export {
  d as ApexGrid,
  at as BooleanOperands,
  st as NumberOperands,
  lt as StringOperands
};
