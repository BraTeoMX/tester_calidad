{"version":3,"file":"ResizeObserver.js","sourceRoot":"","sources":["../src/polyfillLoaders/ResizeObserver.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAC,qBAAqB,EAAC,MAAM,mBAAmB,CAAC;AACxD,OAAO,EAAC,qBAAqB,EAAC,MAAM,mBAAmB,CAAC;AAExD;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB;IACxC,IAAI,CAAC;QACH,IAAI,cAAc,CAAC,cAAa,CAAC,CAAC,CAAC;QACnC,oCAAoC;QACpC,OAAO,cAAc,CAAC;IACxB,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,MAAM,UAAU,GAAG,CACjB,MAAM,MAAM,CAAC,yDAAyD,CAAC,CACxE,CAAC,OAAO,CAAC;QACV,qBAAqB,CAAC,UAAU,CAAC,CAAC;QAClC,oCAAoC;QACpC,OAAO,UAAU,CAAC;IACpB,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {provideResizeObserver} from '../Virtualizer.js';\nexport {provideResizeObserver} from '../Virtualizer.js';\n\n/**\n * If your browser support matrix includes older browsers\n * that don't implement `ResizeObserver`, import this function,\n * call it, and await its return before doing anything that\n * will cause a virtualizer to be instantiated. See docs\n * for details.\n */\nexport async function loadPolyfillIfNeeded() {\n  try {\n    new ResizeObserver(function () {});\n    // Return value for testing purposes\n    return ResizeObserver;\n  } catch (e) {\n    const ROPolyfill = (\n      await import('../polyfills/resize-observer-polyfill/ResizeObserver.js')\n    ).default;\n    provideResizeObserver(ROPolyfill);\n    // Return value for testing purposes\n    return ROPolyfill;\n  }\n}\n"]}