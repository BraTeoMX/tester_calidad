{"version":3,"file":"resize-observer-errors.js","sourceRoot":"","sources":["../src/support/resize-observer-errors.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EACL,eAAe,GAEhB,MAAM,0BAA0B,CAAC;AAElC;;;;;GAKG;AACH,MAAM,UAAU,yCAAyC,CACvD,MAAgB,EAChB,KAAe;IAEf,IAAI,QAA+C,CAAC;IACpD,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,GAAG,oCAAoC,EAAE,CAAC,CAAC,CAAC;IAClE,KAAK,CAAC,GAAG,EAAE;QACT,QAAQ,EAAE,EAAE,CAAC;QACb,QAAQ,GAAG,SAAS,CAAC;IACvB,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,gCAAgC,CAAC,OAAe;IAC9D,OAAO,CACL,OAAO,CAAC,QAAQ,CAAC,oCAAoC,CAAC;QACtD,OAAO,CAAC,QAAQ,CACd,8DAA8D,CAC/D,CACF,CAAC;AACJ,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,mBAAmB,CACjC,gBAA8C;IAE9C,OAAO,eAAe,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC,eAAe,EAAE,GAAG,IAAI,EAAE,EAAE;QACrE,MAAM,OAAO,GACX,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAc,IAAI,CAAC,CAAC,CAAE,CAAC,OAAO,CAAC;QACxE,IAAI,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC;YAC9B,OAAO;QACT,CAAC;QACD,OAAO,eAAe,EAAE,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,oCAAoC;IAClD,OAAO,mBAAmB,CAAC,gCAAgC,CAAC,CAAC;AAC/D,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,2CAA2C;IACzD,MAAM,aAAa,GAAG,CAAC,EAAc,EAAE,EAAE;QACvC,IACE,OAAO,EAAE,CAAC,OAAO,KAAK,QAAQ;YAC9B,gCAAgC,CAAC,EAAE,CAAC,OAAO,CAAC,EAC5C,CAAC;YACD,EAAE,CAAC,cAAc,EAAE,EAAE,CAAC;YACtB,EAAE,CAAC,eAAe,EAAE,EAAE,CAAC;YACvB,EAAE,CAAC,wBAAwB,EAAE,EAAE,CAAC;YAChC,OAAO;QACT,CAAC;IACH,CAAC,CAAC;IAEF,MAAM,mBAAmB,GAAG,GAAG,EAAE,CAC/B,MAAM,CAAC,mBAAmB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;IAErD,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;IAEhD,oEAAoE;IACpE,OAAO,mBAAmB,CAAC;AAC7B,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  interceptMethod,\n  MethodInterceptorTeardown,\n} from './method-interception.js';\n\n/**\n * In a testing environment with a setup/before and teardown/after callback pattern, this function\n * can be used as a succinct declaration to ignore these errors in tests.\n * @param before a setup callback; in Mocha, this would be the `beforeEach` function.\n * @param after a teardown callback; in Mocha, this would be the `afterEach` function.\n */\nexport function setupIgnoreWindowResizeObserverLoopErrors(\n  before: Function,\n  after: Function\n) {\n  let teardown: MethodInterceptorTeardown | undefined;\n  before(() => (teardown = ignoreWindowResizeObserverLoopErrors()));\n  after(() => {\n    teardown?.();\n    teardown = undefined;\n  });\n}\n\n/**\n * Reads the message text and returns true if the message contains any text indicating an\n * error due to too many ResizeObserver triggers.\n * @param message The text to evaluate\n * @returns True if text contains ResizeObserver loop limit exceeded message.\n */\nexport function isResizeObserverLoopErrorMessage(message: string): boolean {\n  return (\n    message.includes('ResizeObserver loop limit exceeded') ||\n    message.includes(\n      'ResizeObserver loop completed with undelivered notifications'\n    )\n  );\n}\n\n/**\n * Replaces the window.onerror method with a new method that tests the error message\n * against the given predicate function.  If the predicate returns true, the original\n * window.onerror is not called.  Otherwise, the original window.onerror is called.\n * This is most useful for ignoring benign errors that are expected to occur in tests.\n * @param messagePredicate A function that returns true if the error message should\n * cause the skip the call to the original window.onerror.\n */\nexport function ignoreWindowOnError(\n  messagePredicate: (message: string) => boolean\n): MethodInterceptorTeardown {\n  return interceptMethod(window, 'onerror', (originalOnError, ...args) => {\n    const message =\n      typeof args[0] === 'string' ? args[0] : (<ErrorEvent>args[0]).message;\n    if (messagePredicate(message)) {\n      return;\n    }\n    return originalOnError?.apply(window, args);\n  });\n}\n\n/**\n * Patches window.onerror to ignore the \"ResizeObserver loop limit\n * exceeded\" errors.\n * @returns A function that can be used to restore the original window.onerror to the unpatched version.\n */\nexport function ignoreWindowResizeObserverLoopErrors() {\n  return ignoreWindowOnError(isResizeObserverLoopErrorMessage);\n}\n\n/**\n * Adds an event listener to the window which prevents default event\n * handling for \"ResizeObserver loop limit exceeded errors.\"\n * @returns A function that can be used to remove the event listener.\n */\nexport function preventResizeObserverLoopErrorEventDefaults() {\n  const eventListener = (ev: ErrorEvent) => {\n    if (\n      typeof ev.message === 'string' &&\n      isResizeObserverLoopErrorMessage(ev.message)\n    ) {\n      ev.preventDefault?.();\n      ev.stopPropagation?.();\n      ev.stopImmediatePropagation?.();\n      return;\n    }\n  };\n\n  const removeEventListener = () =>\n    window.removeEventListener('error', eventListener);\n\n  window.addEventListener('error', eventListener);\n\n  // Returns a function that can be used to remove the event listener.\n  return removeEventListener;\n}\n"]}