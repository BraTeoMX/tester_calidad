/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
import { ValueNotifier } from '../value-notifier.js';
export class ContextProviderEvent extends Event {
    /**
     *
     * @param context the context which this provider can provide
     */
    constructor(context) {
        super('context-provider', { bubbles: true, composed: true });
        this.context = context;
    }
}
/**
 * A ReactiveController which adds context provider behavior to a
 * custom element.
 *
 * This controller simply listens to the `context-request` event when
 * the host is connected to the DOM and registers the received callbacks
 * against its observable Context implementation.
 */
export class ContextProvider extends ValueNotifier {
    constructor(host, contextOrOptions, initialValue) {
        super(contextOrOptions.context !== undefined
            ? contextOrOptions.initialValue
            : initialValue);
        this.onContextRequest = (ev) => {
            // Only call the callback if the context matches.
            // Also, in case an element is a consumer AND a provider
            // of the same context, we want to avoid the element to self-register.
            // The check on composedPath (as opposed to ev.target) is to cover cases
            // where the consumer is in the shadowDom of the provider (in which case,
            // event.target === this.host because of event retargeting).
            if (ev.context !== this.context || ev.composedPath()[0] === this.host) {
                return;
            }
            ev.stopPropagation();
            this.addCallback(ev.callback, ev.subscribe);
        };
        this.host = host;
        if (contextOrOptions.context !== undefined) {
            this.context = contextOrOptions.context;
        }
        else {
            this.context = contextOrOptions;
        }
        this.attachListeners();
        this.host.addController(this);
    }
    attachListeners() {
        this.host.addEventListener('context-request', this.onContextRequest);
    }
    hostConnected() {
        // emit an event to signal a provider is available for this context
        this.host.dispatchEvent(new ContextProviderEvent(this.context));
    }
}
//# sourceMappingURL=context-provider.js.map