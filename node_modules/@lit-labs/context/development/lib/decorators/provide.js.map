{"version":3,"file":"provide.js","sourceRoot":"","sources":["../../../src/lib/decorators/provide.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAGH,OAAO,EAAC,gBAAgB,EAAC,MAAM,0CAA0C,CAAC;AAE1E,OAAO,EAAC,eAAe,EAAC,MAAM,oCAAoC,CAAC;AAEnE;;;;;GAKG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAM,UAAU,OAAO,CAAY,EACjC,OAAO,EAAE,OAAO,GAGjB;IACC,OAAO,gBAAgB,CAAC;QACtB,QAAQ,EAAE,CAAC,IAA4B,EAAE,IAAiB,EAAE,EAAE;YAC5D,MAAM,aAAa,GAAG,IAAI,OAAO,EAAE,CAAC;YACpC,IAAI,CAAC,cAAc,CAAC,CAAC,OAAwB,EAAQ,EAAE;gBACrD,aAAa,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,eAAe,CAAC,OAAO,EAAE,EAAC,OAAO,EAAC,CAAC,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;YACH,4DAA4D;YAC5D,4CAA4C;YAC5C,MAAM,UAAU,GAAG,MAAM,CAAC,wBAAwB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACzE,MAAM,SAAS,GAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,GAAG,CAAC;YAClC,MAAM,aAAa,GAAG;gBACpB,GAAG,UAAU;gBACb,GAAG,EAAE,UAAiC,KAAgB;;oBACpD,MAAA,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,0CAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;oBACzC,IAAI,SAAS,EAAE;wBACb,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;qBAC7B;gBACH,CAAC;aACF,CAAC;YACF,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;QAC7D,CAAC;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ReactiveElement} from '@lit/reactive-element';\nimport {decorateProperty} from '@lit/reactive-element/decorators/base.js';\nimport {Context} from '../create-context.js';\nimport {ContextProvider} from '../controllers/context-provider.js';\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\n/**\n * A property decorator that adds a ContextConsumer controller to the component\n * which will try and retrieve a value for the property via the Context API.\n *\n * @param context A Context identifier value created via `createContext`\n * @param multiple An optional boolean which when true allows the value to be updated\n *   multiple times.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n * ```ts\n * import {consume} from '@lit-labs/context';\n * import {loggerContext} from 'community-protocols/logger';\n *\n * class MyElement {\n *   @provide({context: loggerContext})\n *   logger;\n *\n *   doThing() {\n *     this.logger.log('thing was done');\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function provide<ValueType>({\n  context: context,\n}: {\n  context: Context<unknown, ValueType>;\n}): ProvideDecorator<ValueType> {\n  return decorateProperty({\n    finisher: (ctor: typeof ReactiveElement, name: PropertyKey) => {\n      const controllerMap = new WeakMap();\n      ctor.addInitializer((element: ReactiveElement): void => {\n        controllerMap.set(element, new ContextProvider(element, {context}));\n      });\n      // proxy any existing setter for this property and use it to\n      // notify the controller of an updated value\n      const descriptor = Object.getOwnPropertyDescriptor(ctor.prototype, name);\n      const oldSetter = descriptor?.set;\n      const newDescriptor = {\n        ...descriptor,\n        set: function (this: ReactiveElement, value: ValueType) {\n          controllerMap.get(this)?.setValue(value);\n          if (oldSetter) {\n            oldSetter.call(this, value);\n          }\n        },\n      };\n      Object.defineProperty(ctor.prototype, name, newDescriptor);\n    },\n  });\n}\n\ntype ProvideDecorator<ContextType> = {\n  <K extends PropertyKey, Proto extends ReactiveElement>(\n    protoOrDescriptor: Proto,\n    name?: K\n  ): FieldMustMatchContextType<Proto, K, ContextType>;\n};\n\n// Note TypeScript requires the return type of a decorator to be `void | any`\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype DecoratorReturn = void | any;\n\ntype FieldMustMatchContextType<Obj, Key extends PropertyKey, ContextType> =\n  // First we check whether the object has the property as a required field\n  Obj extends Record<Key, infer ProvidingType>\n    ? // Ok, it does, just check whether it's ok to assign the\n      // provided type to the consuming field\n      [ProvidingType] extends [ContextType]\n      ? DecoratorReturn\n      : {\n          message: 'providing field not assignable to context';\n          context: ContextType;\n          provided: ProvidingType;\n        }\n    : // Next we check whether the object has the property as an optional field\n    Obj extends Partial<Record<Key, infer Providing>>\n    ? // Check assignability again. Note that we have to include undefined\n      // here on the providing type because it's optional.\n      [Providing | undefined] extends [ContextType]\n      ? DecoratorReturn\n      : {\n          message: 'providing field not assignable to context';\n          context: ContextType;\n          consuming: Providing | undefined;\n        }\n    : // Ok, the field isn't present, so either someone's using provide\n      // manually, i.e. not as a decorator (maybe don't do that! but if you do,\n      // you're on your own for your type checking, sorry), or the field is\n      // private, in which case we can't check it.\n      DecoratorReturn;\n"]}